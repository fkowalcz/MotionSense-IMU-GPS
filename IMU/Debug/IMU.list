
IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f2c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080070c0  080070c0  000080c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071d8  080071d8  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  080071d8  080071d8  000081d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071e0  080071e0  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071e0  080071e0  000081e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071e4  080071e4  000081e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080071e8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000070  08007258  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08007258  00009400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145ed  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab6  00000000  00000000  0001d68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00020148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e29  00000000  00000000  00021360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e16  00000000  00000000  00022189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cf3  00000000  00000000  00024f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f64e4  00000000  00000000  0003cc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133176  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e4  00000000  00000000  001331bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001387a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070a4 	.word	0x080070a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080070a4 	.word	0x080070a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a2a      	ldr	r2, [pc, #168]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b28      	ldr	r3, [pc, #160]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	4a24      	ldr	r2, [pc, #144]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f72:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	4a1e      	ldr	r2, [pc, #120]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a18      	ldr	r2, [pc, #96]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f001 f9fb 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fc0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480b      	ldr	r0, [pc, #44]	@ (8001000 <MX_GPIO_Init+0xc8>)
 8000fd2:	f001 f843 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff0:	f001 f834 	bl	800205c <HAL_GPIO_Init>

}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	@ 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000
 8001000:	48000800 	.word	0x48000800

08001004 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001008:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <MX_I2C1_Init+0x74>)
 800100a:	4a1c      	ldr	r2, [pc, #112]	@ (800107c <MX_I2C1_Init+0x78>)
 800100c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800100e:	4b1a      	ldr	r3, [pc, #104]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001010:	4a1b      	ldr	r2, [pc, #108]	@ (8001080 <MX_I2C1_Init+0x7c>)
 8001012:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001014:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101a:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <MX_I2C1_Init+0x74>)
 800101c:	2201      	movs	r2, #1
 800101e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <MX_I2C1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_I2C1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800103e:	480e      	ldr	r0, [pc, #56]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001040:	f001 f9e8 	bl	8002414 <HAL_I2C_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800104a:	f000 fc97 	bl	800197c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800104e:	2100      	movs	r1, #0
 8001050:	4809      	ldr	r0, [pc, #36]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001052:	f001 ff6b 	bl	8002f2c <HAL_I2CEx_ConfigAnalogFilter>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800105c:	f000 fc8e 	bl	800197c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001060:	2100      	movs	r1, #0
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001064:	f001 ffad 	bl	8002fc2 <HAL_I2CEx_ConfigDigitalFilter>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800106e:	f000 fc85 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000008c 	.word	0x2000008c
 800107c:	40005400 	.word	0x40005400
 8001080:	10d19ce4 	.word	0x10d19ce4

08001084 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0ac      	sub	sp, #176	@ 0xb0
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2288      	movs	r2, #136	@ 0x88
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 fc1d 	bl	80058e4 <memset>
  if(i2cHandle->Instance==I2C1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a21      	ldr	r2, [pc, #132]	@ (8001134 <HAL_I2C_MspInit+0xb0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d13b      	bne.n	800112c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010b4:	2340      	movs	r3, #64	@ 0x40
 80010b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 fe2f 	bl	8003d24 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010cc:	f000 fc56 	bl	800197c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <HAL_I2C_MspInit+0xb4>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	4a18      	ldr	r2, [pc, #96]	@ (8001138 <HAL_I2C_MspInit+0xb4>)
 80010d6:	f043 0302 	orr.w	r3, r3, #2
 80010da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010dc:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <HAL_I2C_MspInit+0xb4>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f0:	2312      	movs	r3, #18
 80010f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001102:	2304      	movs	r3, #4
 8001104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800110c:	4619      	mov	r1, r3
 800110e:	480b      	ldr	r0, [pc, #44]	@ (800113c <HAL_I2C_MspInit+0xb8>)
 8001110:	f000 ffa4 	bl	800205c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <HAL_I2C_MspInit+0xb4>)
 8001116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001118:	4a07      	ldr	r2, [pc, #28]	@ (8001138 <HAL_I2C_MspInit+0xb4>)
 800111a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800111e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_I2C_MspInit+0xb4>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800112c:	bf00      	nop
 800112e:	37b0      	adds	r7, #176	@ 0xb0
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40005400 	.word	0x40005400
 8001138:	40021000 	.word	0x40021000
 800113c:	48000400 	.word	0x48000400

08001140 <LSM9DS1_Init_AccelGyro>:
#include "lsm9ds1_lib.h"

uint8_t LSM9DS1_Init_AccelGyro(I2C_HandleTypeDef *I2Cx)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af04      	add	r7, sp, #16
 8001146:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // Odczytujemy rejestr WHO_AM_I dla akcelerometru/żyroskopu
    if (HAL_I2C_Mem_Read(I2Cx, LSM9DS1_AG_ADDR, WHO_AM_I, 1, &check, 1, 100) != HAL_OK)
 8001148:	2364      	movs	r3, #100	@ 0x64
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	2301      	movs	r3, #1
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	f107 030f 	add.w	r3, r7, #15
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	220f      	movs	r2, #15
 800115a:	21d6      	movs	r1, #214	@ 0xd6
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f001 fb09 	bl	8002774 <HAL_I2C_Mem_Read>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <LSM9DS1_Init_AccelGyro+0x2c>
    {
        // Błąd komunikacji I2C
        return 2; // Zwracamy 2, jeśli komunikacja I2C się nie powiodła
 8001168:	2302      	movs	r3, #2
 800116a:	e02d      	b.n	80011c8 <LSM9DS1_Init_AccelGyro+0x88>
    }

    // Sprawdzamy, czy odczytana wartość WHO_AM_I jest poprawna
    if (check == 104) // 0x68 jest wartością WHO_AM_I dla akcelerometru/żyroskopu
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	2b68      	cmp	r3, #104	@ 0x68
 8001170:	d129      	bne.n	80011c6 <LSM9DS1_Init_AccelGyro+0x86>
    {
        // Konfigurujemy akcelerometr - rejestr CTRL_REG6_XL
        Data = 0x60; // 119 Hz, ±2g, BW default
 8001172:	2360      	movs	r3, #96	@ 0x60
 8001174:	73bb      	strb	r3, [r7, #14]
        if (HAL_I2C_Mem_Write(I2Cx, LSM9DS1_AG_ADDR, CTRL_REG6_XL, 1, &Data, 1, 100) != HAL_OK)
 8001176:	2364      	movs	r3, #100	@ 0x64
 8001178:	9302      	str	r3, [sp, #8]
 800117a:	2301      	movs	r3, #1
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	f107 030e 	add.w	r3, r7, #14
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	2220      	movs	r2, #32
 8001188:	21d6      	movs	r1, #214	@ 0xd6
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f001 f9de 	bl	800254c <HAL_I2C_Mem_Write>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <LSM9DS1_Init_AccelGyro+0x5a>
        {
            return 3; // Zwracamy 3, jeśli komunikacja I2C podczas zapisu nie powiodła się
 8001196:	2303      	movs	r3, #3
 8001198:	e016      	b.n	80011c8 <LSM9DS1_Init_AccelGyro+0x88>
        }

        // Konfigurujemy żyroskop - rejestr CTRL_REG1_G
        Data = 0x60; // 119 Hz, ±245 dps, BW 14Hz
 800119a:	2360      	movs	r3, #96	@ 0x60
 800119c:	73bb      	strb	r3, [r7, #14]
        if (HAL_I2C_Mem_Write(I2Cx, LSM9DS1_AG_ADDR, CTRL_REG1_G, 1, &Data, 1, 100) != HAL_OK)
 800119e:	2364      	movs	r3, #100	@ 0x64
 80011a0:	9302      	str	r3, [sp, #8]
 80011a2:	2301      	movs	r3, #1
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	f107 030e 	add.w	r3, r7, #14
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	2210      	movs	r2, #16
 80011b0:	21d6      	movs	r1, #214	@ 0xd6
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f001 f9ca 	bl	800254c <HAL_I2C_Mem_Write>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <LSM9DS1_Init_AccelGyro+0x82>
        {
            return 4; // Zwracamy 4, jeśli komunikacja I2C podczas zapisu nie powiodła się
 80011be:	2304      	movs	r3, #4
 80011c0:	e002      	b.n	80011c8 <LSM9DS1_Init_AccelGyro+0x88>
        }

        return 0; // Zwracamy 0, jeśli inicjalizacja zakończyła się sukcesem
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <LSM9DS1_Init_AccelGyro+0x88>
    }

    return 1; // Zwracamy 1, jeśli WHO_AM_I nie odpowiada oczekiwanej wartości
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <LSM9DS1_Init_Mag>:

uint8_t LSM9DS1_Init_Mag(I2C_HandleTypeDef *I2Cx)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af04      	add	r7, sp, #16
 80011d6:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // Odczytujemy rejestr WHO_AM_I dla magnetometru
    HAL_I2C_Mem_Read(I2Cx, LSM9DS1_MAG_ADDR, WHO_AM_I_M, 1, &check, 1, 50);
 80011d8:	2332      	movs	r3, #50	@ 0x32
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f107 030f 	add.w	r3, r7, #15
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	220f      	movs	r2, #15
 80011ea:	213c      	movs	r1, #60	@ 0x3c
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f001 fac1 	bl	8002774 <HAL_I2C_Mem_Read>

    if (check == 0x3D) // 0x3D jest wartością WHO_AM_I dla magnetometru
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b3d      	cmp	r3, #61	@ 0x3d
 80011f6:	d13d      	bne.n	8001274 <LSM9DS1_Init_Mag+0xa4>
    {
        // Konfigurujemy magnetometr - rejestr CTRL_REG1_M
        Data = 0b00111100; // 10 Hz, Medium-performance, ustawienie temperatury off
 80011f8:	233c      	movs	r3, #60	@ 0x3c
 80011fa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, LSM9DS1_MAG_ADDR, CTRL_REG1_M, 1, &Data, 1, 50);
 80011fc:	2332      	movs	r3, #50	@ 0x32
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	2301      	movs	r3, #1
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	f107 030e 	add.w	r3, r7, #14
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	2220      	movs	r2, #32
 800120e:	213c      	movs	r1, #60	@ 0x3c
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f001 f99b 	bl	800254c <HAL_I2C_Mem_Write>

        // Konfigurujemy zakres magnetometru - rejestr CTRL_REG2_M
        Data = 0b00000000; // ±4 gauss (default)
 8001216:	2300      	movs	r3, #0
 8001218:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, LSM9DS1_MAG_ADDR, CTRL_REG2_M, 1, &Data, 1, 50);
 800121a:	2332      	movs	r3, #50	@ 0x32
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2301      	movs	r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	f107 030e 	add.w	r3, r7, #14
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	2221      	movs	r2, #33	@ 0x21
 800122c:	213c      	movs	r1, #60	@ 0x3c
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f001 f98c 	bl	800254c <HAL_I2C_Mem_Write>

        // Konfigurujemy tryb działania magnetometru - rejestr CTRL_REG3_M
        Data = 0b00000000; // Continuous-conversion mode
 8001234:	2300      	movs	r3, #0
 8001236:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, LSM9DS1_MAG_ADDR, CTRL_REG3_M, 1, &Data, 1, 50);
 8001238:	2332      	movs	r3, #50	@ 0x32
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	f107 030e 	add.w	r3, r7, #14
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	2222      	movs	r2, #34	@ 0x22
 800124a:	213c      	movs	r1, #60	@ 0x3c
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f001 f97d 	bl	800254c <HAL_I2C_Mem_Write>

        // Konfigurujemy wydajność magnetometru na osi Z - rejestr CTRL_REG4_M
        Data = 0b00000000; // Medium-performance mode on Z-axis
 8001252:	2300      	movs	r3, #0
 8001254:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, LSM9DS1_MAG_ADDR, CTRL_REG4_M, 1, &Data, 1, 50);
 8001256:	2332      	movs	r3, #50	@ 0x32
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	2301      	movs	r3, #1
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	f107 030e 	add.w	r3, r7, #14
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2301      	movs	r3, #1
 8001266:	2223      	movs	r2, #35	@ 0x23
 8001268:	213c      	movs	r1, #60	@ 0x3c
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f001 f96e 	bl	800254c <HAL_I2C_Mem_Write>

        return 0; // Zwracamy 0, jeśli inicjalizacja zakończyła się sukcesem
 8001270:	2300      	movs	r3, #0
 8001272:	e000      	b.n	8001276 <LSM9DS1_Init_Mag+0xa6>
    }
    return 1; // Zwracamy 1, jeśli inicjalizacja nie powiodła się
 8001274:	2301      	movs	r3, #1
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <LSM9DS1_Read_Accel>:



void LSM9DS1_Read_Accel(I2C_HandleTypeDef *I2Cx, IMU_t *DataStruct)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b088      	sub	sp, #32
 8001282:	af04      	add	r7, sp, #16
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, LSM9DS1_AG_ADDR, OUT_X_L_XL, 1, Rec_Data, 6, 50);
 8001288:	2332      	movs	r3, #50	@ 0x32
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2306      	movs	r3, #6
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	2228      	movs	r2, #40	@ 0x28
 800129a:	21d6      	movs	r1, #214	@ 0xd6
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f001 fa69 	bl	8002774 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[1] << 8 | Rec_Data[0]);
 80012a2:	7a7b      	ldrb	r3, [r7, #9]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	7a3b      	ldrb	r3, [r7, #8]
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	841a      	strh	r2, [r3, #32]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[3] << 8 | Rec_Data[2]);
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	7abb      	ldrb	r3, [r7, #10]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[5] << 8 | Rec_Data[4]);
 80012c6:	7b7b      	ldrb	r3, [r7, #13]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	7b3b      	ldrb	r3, [r7, #12]
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	849a      	strh	r2, [r3, #36]	@ 0x24

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <LSM9DS1_Read_Gyro>:

void LSM9DS1_Read_Gyro(I2C_HandleTypeDef *I2Cx, IMU_t *DataStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af04      	add	r7, sp, #16
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, LSM9DS1_AG_ADDR, OUT_X_L_G, 1, Rec_Data, 6, 50);
 80012ea:	2332      	movs	r3, #50	@ 0x32
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2306      	movs	r3, #6
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	2218      	movs	r2, #24
 80012fc:	21d6      	movs	r1, #214	@ 0xd6
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f001 fa38 	bl	8002774 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[1] << 8 | Rec_Data[0]);
 8001304:	7a7b      	ldrb	r3, [r7, #9]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21a      	sxth	r2, r3
 800130a:	7a3b      	ldrb	r3, [r7, #8]
 800130c:	b21b      	sxth	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b21a      	sxth	r2, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	801a      	strh	r2, [r3, #0]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[3] << 8 | Rec_Data[2]);
 8001316:	7afb      	ldrb	r3, [r7, #11]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	b21a      	sxth	r2, r3
 800131c:	7abb      	ldrb	r3, [r7, #10]
 800131e:	b21b      	sxth	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	b21a      	sxth	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	805a      	strh	r2, [r3, #2]
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[5] << 8 | Rec_Data[4]);
 8001328:	7b7b      	ldrb	r3, [r7, #13]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21a      	sxth	r2, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	809a      	strh	r2, [r3, #4]
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <LSM9DS1_Read_Mag>:

void LSM9DS1_Read_Mag(I2C_HandleTypeDef *I2Cx, IMU_t *DataStruct)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b088      	sub	sp, #32
 8001346:	af04      	add	r7, sp, #16
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, LSM9DS1_AG_ADDR, OUT_X_L_M, 1, Rec_Data, 6, 50);
 800134c:	2332      	movs	r3, #50	@ 0x32
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	2306      	movs	r3, #6
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2301      	movs	r3, #1
 800135c:	2228      	movs	r2, #40	@ 0x28
 800135e:	21d6      	movs	r1, #214	@ 0xd6
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f001 fa07 	bl	8002774 <HAL_I2C_Mem_Read>

    DataStruct->Mag_X_RAW = (int16_t)(Rec_Data[1] << 8 | Rec_Data[0]);
 8001366:	7a7b      	ldrb	r3, [r7, #9]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b21a      	sxth	r2, r3
 800136c:	7a3b      	ldrb	r3, [r7, #8]
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21a      	sxth	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    DataStruct->Mag_Y_RAW = (int16_t)(Rec_Data[3] << 8 | Rec_Data[2]);
 800137a:	7afb      	ldrb	r3, [r7, #11]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	7abb      	ldrb	r3, [r7, #10]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21a      	sxth	r2, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    DataStruct->Mag_Z_RAW = (int16_t)(Rec_Data[5] << 8 | Rec_Data[4]);
 800138e:	7b7b      	ldrb	r3, [r7, #13]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b21a      	sxth	r2, r3
 8001394:	7b3b      	ldrb	r3, [r7, #12]
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b21a      	sxth	r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	0000      	movs	r0, r0
 80013ac:	0000      	movs	r0, r0
	...

080013b0 <Normalize_Accel_Values>:

void Normalize_Accel_Values(IMU_t *Raw_Values){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    //Scale values
	Raw_Values-> Accel_X = Raw_Values-> Accel_X_RAW*((2*G)/32768); //Values for AFS_SEL = 0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8b0 	bl	8000524 <__aeabi_i2d>
 80013c4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001438 <Normalize_Accel_Values+0x88>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f915 	bl	80005f8 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fbe7 	bl	8000ba8 <__aeabi_d2f>
 80013da:	4602      	mov	r2, r0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	629a      	str	r2, [r3, #40]	@ 0x28
	Raw_Values-> Accel_Y = Raw_Values-> Accel_Y_RAW*((2*G)/32768);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f89c 	bl	8000524 <__aeabi_i2d>
 80013ec:	a312      	add	r3, pc, #72	@ (adr r3, 8001438 <Normalize_Accel_Values+0x88>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff f901 	bl	80005f8 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fbd3 	bl	8000ba8 <__aeabi_d2f>
 8001402:	4602      	mov	r2, r0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	62da      	str	r2, [r3, #44]	@ 0x2c
	Raw_Values-> Accel_Z = Raw_Values-> Accel_Z_RAW*((2*G)/32768);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f888 	bl	8000524 <__aeabi_i2d>
 8001414:	a308      	add	r3, pc, #32	@ (adr r3, 8001438 <Normalize_Accel_Values+0x88>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7ff f8ed 	bl	80005f8 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fbbf 	bl	8000ba8 <__aeabi_d2f>
 800142a:	4602      	mov	r2, r0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	631a      	str	r2, [r3, #48]	@ 0x30
};
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	51eb851f 	.word	0x51eb851f
 800143c:	3f439eb8 	.word	0x3f439eb8

08001440 <Normalize_Gyro_Values>:

void Normalize_Gyro_Values(IMU_t *Raw_Values){
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
    //Scale values
	Raw_Values-> Gyro_X = Raw_Values-> Gyro_X_RAW*245.0/32768; //Values for FS_SEL = 0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f868 	bl	8000524 <__aeabi_i2d>
 8001454:	a32a      	add	r3, pc, #168	@ (adr r3, 8001500 <Normalize_Gyro_Values+0xc0>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff f8cd 	bl	80005f8 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b27      	ldr	r3, [pc, #156]	@ (8001508 <Normalize_Gyro_Values+0xc8>)
 800146c:	f7ff f9ee 	bl	800084c <__aeabi_ddiv>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fb96 	bl	8000ba8 <__aeabi_d2f>
 800147c:	4602      	mov	r2, r0
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	609a      	str	r2, [r3, #8]
	Raw_Values-> Gyro_Y = Raw_Values-> Gyro_Y_RAW*245.0/32768;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f84b 	bl	8000524 <__aeabi_i2d>
 800148e:	a31c      	add	r3, pc, #112	@ (adr r3, 8001500 <Normalize_Gyro_Values+0xc0>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7ff f8b0 	bl	80005f8 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <Normalize_Gyro_Values+0xc8>)
 80014a6:	f7ff f9d1 	bl	800084c <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fb79 	bl	8000ba8 <__aeabi_d2f>
 80014b6:	4602      	mov	r2, r0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	60da      	str	r2, [r3, #12]
	Raw_Values-> Gyro_Z = Raw_Values-> Gyro_Z_RAW*245.0/32768;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f82e 	bl	8000524 <__aeabi_i2d>
 80014c8:	a30d      	add	r3, pc, #52	@ (adr r3, 8001500 <Normalize_Gyro_Values+0xc0>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f893 	bl	80005f8 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <Normalize_Gyro_Values+0xc8>)
 80014e0:	f7ff f9b4 	bl	800084c <__aeabi_ddiv>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fb5c 	bl	8000ba8 <__aeabi_d2f>
 80014f0:	4602      	mov	r2, r0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	611a      	str	r2, [r3, #16]
};
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	00000000 	.word	0x00000000
 8001504:	406ea000 	.word	0x406ea000
 8001508:	40e00000 	.word	0x40e00000

0800150c <Normalize_Mag_Values>:

void Normalize_Mag_Values(IMU_t *Raw_Values){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    //Scale values
	Raw_Values-> Mag_X = Raw_Values-> Mag_X_RAW*4.0/32768; //Values for FS_SEL = 0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f802 	bl	8000524 <__aeabi_i2d>
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <Normalize_Mag_Values+0xc0>)
 8001526:	f7ff f867 	bl	80005f8 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <Normalize_Mag_Values+0xc4>)
 8001538:	f7ff f988 	bl	800084c <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff fb30 	bl	8000ba8 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	649a      	str	r2, [r3, #72]	@ 0x48
	Raw_Values-> Mag_Y = Raw_Values-> Mag_Y_RAW*4.0/32768;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ffe5 	bl	8000524 <__aeabi_i2d>
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <Normalize_Mag_Values+0xc0>)
 8001560:	f7ff f84a 	bl	80005f8 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <Normalize_Mag_Values+0xc4>)
 8001572:	f7ff f96b 	bl	800084c <__aeabi_ddiv>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb13 	bl	8000ba8 <__aeabi_d2f>
 8001582:	4602      	mov	r2, r0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	64da      	str	r2, [r3, #76]	@ 0x4c
	Raw_Values-> Mag_Z = Raw_Values-> Mag_Z_RAW*4.0/32768;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffc8 	bl	8000524 <__aeabi_i2d>
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <Normalize_Mag_Values+0xc0>)
 800159a:	f7ff f82d 	bl	80005f8 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <Normalize_Mag_Values+0xc4>)
 80015ac:	f7ff f94e 	bl	800084c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff faf6 	bl	8000ba8 <__aeabi_d2f>
 80015bc:	4602      	mov	r2, r0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	651a      	str	r2, [r3, #80]	@ 0x50
};
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40100000 	.word	0x40100000
 80015d0:	40e00000 	.word	0x40e00000
 80015d4:	00000000 	.word	0x00000000

080015d8 <ftoaIMU>:
             wholePart2, decimalDigits, fractionalPart2,
             wholePart3, decimalDigits, fractionalPart3);
}


void ftoaIMU(IMU_t *IMU, char *buffer, int bufferSize, int decimalDigits) {
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	b0c7      	sub	sp, #284	@ 0x11c
 80015dc:	af1a      	add	r7, sp, #104	@ 0x68
 80015de:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80015e0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80015e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80015e4:	633b      	str	r3, [r7, #48]	@ 0x30
    int wholePart[9];
    int fractionalPart[9];

    float values[9] = {IMU->Gyro_X, IMU->Gyro_Y, IMU->Gyro_Z,
 80015e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80015ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80015f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	64bb      	str	r3, [r7, #72]	@ 0x48
                       IMU->Accel_X, IMU->Accel_Y, IMU->Accel_Z,
 80015f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    float values[9] = {IMU->Gyro_X, IMU->Gyro_Y, IMU->Gyro_Z,
 80015fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       IMU->Accel_X, IMU->Accel_Y, IMU->Accel_Z,
 80015fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    float values[9] = {IMU->Gyro_X, IMU->Gyro_Y, IMU->Gyro_Z,
 8001602:	653b      	str	r3, [r7, #80]	@ 0x50
                       IMU->Accel_X, IMU->Accel_Y, IMU->Accel_Z,
 8001604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    float values[9] = {IMU->Gyro_X, IMU->Gyro_Y, IMU->Gyro_Z,
 8001608:	657b      	str	r3, [r7, #84]	@ 0x54
                       IMU->Mag_X, IMU->Mag_Y, IMU->Mag_Z};
 800160a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800160c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    float values[9] = {IMU->Gyro_X, IMU->Gyro_Y, IMU->Gyro_Z,
 800160e:	65bb      	str	r3, [r7, #88]	@ 0x58
                       IMU->Mag_X, IMU->Mag_Y, IMU->Mag_Z};
 8001610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    float values[9] = {IMU->Gyro_X, IMU->Gyro_Y, IMU->Gyro_Z,
 8001614:	65fb      	str	r3, [r7, #92]	@ 0x5c
                       IMU->Mag_X, IMU->Mag_Y, IMU->Mag_Z};
 8001616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    float values[9] = {IMU->Gyro_X, IMU->Gyro_Y, IMU->Gyro_Z,
 800161a:	663b      	str	r3, [r7, #96]	@ 0x60

    for (int i = 0; i < 9; i++) {
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001622:	e05d      	b.n	80016e0 <ftoaIMU+0x108>
        wholePart[i] = (int)values[i];
 8001624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	3380      	adds	r3, #128	@ 0x80
 800162c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001630:	4413      	add	r3, r2
 8001632:	3b70      	subs	r3, #112	@ 0x70
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163c:	ee17 2a90 	vmov	r2, s15
 8001640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	3380      	adds	r3, #128	@ 0x80
 8001648:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800164c:	440b      	add	r3, r1
 800164e:	f843 2c28 	str.w	r2, [r3, #-40]
        fractionalPart[i] = (int)(fabs(values[i] - wholePart[i]) * pow(10, decimalDigits));
 8001652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	3380      	adds	r3, #128	@ 0x80
 800165a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800165e:	4413      	add	r3, r2
 8001660:	3b70      	subs	r3, #112	@ 0x70
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	3380      	adds	r3, #128	@ 0x80
 800166e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001672:	4413      	add	r3, r2
 8001674:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	eef0 7ae7 	vabs.f32	s15, s15
 8001688:	ee17 0a90 	vmov	r0, s15
 800168c:	f7fe ff5c 	bl	8000548 <__aeabi_f2d>
 8001690:	4604      	mov	r4, r0
 8001692:	460d      	mov	r5, r1
 8001694:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001696:	f7fe ff45 	bl	8000524 <__aeabi_i2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	ec43 2b11 	vmov	d1, r2, r3
 80016a2:	ed9f 0b43 	vldr	d0, [pc, #268]	@ 80017b0 <ftoaIMU+0x1d8>
 80016a6:	f004 fd9d 	bl	80061e4 <pow>
 80016aa:	ec53 2b10 	vmov	r2, r3, d0
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe ffa1 	bl	80005f8 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff fa4b 	bl	8000b58 <__aeabi_d2iz>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	3380      	adds	r3, #128	@ 0x80
 80016cc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80016d0:	440b      	add	r3, r1
 80016d2:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (int i = 0; i < 9; i++) {
 80016d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016da:	3301      	adds	r3, #1
 80016dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80016e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	dd9d      	ble.n	8001624 <ftoaIMU+0x4c>
//        if (values[i] < 0) {
//            wholePart[i] = -wholePart[i];
//        }
    }

    snprintf(buffer, bufferSize,
 80016e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80016f0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80016f2:	6e7d      	ldr	r5, [r7, #100]	@ 0x64
 80016f4:	f8d7 608c 	ldr.w	r6, [r7, #140]	@ 0x8c
 80016f8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80016fa:	6278      	str	r0, [r7, #36]	@ 0x24
 80016fc:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8001700:	623c      	str	r4, [r7, #32]
 8001702:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001704:	61fa      	str	r2, [r7, #28]
 8001706:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800170a:	61b9      	str	r1, [r7, #24]
 800170c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8001714:	6138      	str	r0, [r7, #16]
 8001716:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 8001718:	60fc      	str	r4, [r7, #12]
 800171a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800171e:	60ba      	str	r2, [r7, #8]
 8001720:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001722:	6079      	str	r1, [r7, #4]
 8001724:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 800172c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001730:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001734:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001738:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800173c:	9319      	str	r3, [sp, #100]	@ 0x64
 800173e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001740:	9318      	str	r3, [sp, #96]	@ 0x60
 8001742:	9217      	str	r2, [sp, #92]	@ 0x5c
 8001744:	9116      	str	r1, [sp, #88]	@ 0x58
 8001746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001748:	9315      	str	r3, [sp, #84]	@ 0x54
 800174a:	9014      	str	r0, [sp, #80]	@ 0x50
 800174c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800174e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001750:	9312      	str	r3, [sp, #72]	@ 0x48
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	9311      	str	r3, [sp, #68]	@ 0x44
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	9110      	str	r1, [sp, #64]	@ 0x40
 800175a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800175c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	920e      	str	r2, [sp, #56]	@ 0x38
 8001762:	68fc      	ldr	r4, [r7, #12]
 8001764:	940d      	str	r4, [sp, #52]	@ 0x34
 8001766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001768:	930c      	str	r3, [sp, #48]	@ 0x30
 800176a:	6938      	ldr	r0, [r7, #16]
 800176c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	930a      	str	r3, [sp, #40]	@ 0x28
 8001772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001774:	9309      	str	r3, [sp, #36]	@ 0x24
 8001776:	69b9      	ldr	r1, [r7, #24]
 8001778:	9108      	str	r1, [sp, #32]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	9207      	str	r2, [sp, #28]
 800177e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001780:	9306      	str	r3, [sp, #24]
 8001782:	6a3c      	ldr	r4, [r7, #32]
 8001784:	9405      	str	r4, [sp, #20]
 8001786:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001788:	9004      	str	r0, [sp, #16]
 800178a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800178c:	9303      	str	r3, [sp, #12]
 800178e:	9602      	str	r6, [sp, #8]
 8001790:	9501      	str	r5, [sp, #4]
 8001792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001798:	4a07      	ldr	r2, [pc, #28]	@ (80017b8 <ftoaIMU+0x1e0>)
 800179a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800179c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800179e:	f004 f86d 	bl	800587c <sniprintf>
             wholePart[4], decimalDigits, fractionalPart[4],
             wholePart[5], decimalDigits, fractionalPart[5],
             wholePart[6], decimalDigits, fractionalPart[6],
             wholePart[7], decimalDigits, fractionalPart[7],
             wholePart[8], decimalDigits, fractionalPart[8]);
}
 80017a2:	bf00      	nop
 80017a4:	37b4      	adds	r7, #180	@ 0xb4
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017aa:	bf00      	nop
 80017ac:	f3af 8000 	nop.w
 80017b0:	00000000 	.word	0x00000000
 80017b4:	40240000 	.word	0x40240000
 80017b8:	080070dc 	.word	0x080070dc

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c0:	f000 fa9a 	bl	8001cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c4:	f000 f872 	bl	80018ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c8:	f7ff fbb6 	bl	8000f38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017cc:	f000 f9de 	bl	8001b8c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80017d0:	f7ff fc18 	bl	8001004 <MX_I2C1_Init>
  MX_TIM6_Init();
 80017d4:	f000 f97e 	bl	8001ad4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80017d8:	482c      	ldr	r0, [pc, #176]	@ (800188c <main+0xd0>)
 80017da:	f002 ffb7 	bl	800474c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(500);
 80017de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017e2:	f000 fb05 	bl	8001df0 <HAL_Delay>

//  IMU_status = LSM9DS1_Init_AccelGyro(&hi2c1);

//  ScanI2CBus(&hi2c1, &i2c_buffer, &devices_count);

  IMU_status = LSM9DS1_Init_AccelGyro(&hi2c1);
 80017e6:	482a      	ldr	r0, [pc, #168]	@ (8001890 <main+0xd4>)
 80017e8:	f7ff fcaa 	bl	8001140 <LSM9DS1_Init_AccelGyro>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b28      	ldr	r3, [pc, #160]	@ (8001894 <main+0xd8>)
 80017f2:	701a      	strb	r2, [r3, #0]
  if(IMU_status == 0  ){
 80017f4:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <main+0xd8>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d104      	bne.n	8001806 <main+0x4a>
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 80017fc:	2120      	movs	r1, #32
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001802:	f000 fded 	bl	80023e0 <HAL_GPIO_TogglePin>
  }

  HAL_Delay(2000);
 8001806:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800180a:	f000 faf1 	bl	8001df0 <HAL_Delay>

  MAG_status = LSM9DS1_Init_Mag(&hi2c1);
 800180e:	4820      	ldr	r0, [pc, #128]	@ (8001890 <main+0xd4>)
 8001810:	f7ff fcde 	bl	80011d0 <LSM9DS1_Init_Mag>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <main+0xdc>)
 800181a:	701a      	strb	r2, [r3, #0]
  if(IMU_status == 0  ){
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <main+0xd8>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d104      	bne.n	800182e <main+0x72>
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8001824:	2120      	movs	r1, #32
 8001826:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182a:	f000 fdd9 	bl	80023e0 <HAL_GPIO_TogglePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(IMU_flag){
 800182e:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <main+0xe0>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0fa      	beq.n	800182e <main+0x72>
		  LSM9DS1_Read_Accel(&hi2c1, &IMU);
 8001838:	4919      	ldr	r1, [pc, #100]	@ (80018a0 <main+0xe4>)
 800183a:	4815      	ldr	r0, [pc, #84]	@ (8001890 <main+0xd4>)
 800183c:	f7ff fd1f 	bl	800127e <LSM9DS1_Read_Accel>
		  LSM9DS1_Read_Gyro(&hi2c1, &IMU);
 8001840:	4917      	ldr	r1, [pc, #92]	@ (80018a0 <main+0xe4>)
 8001842:	4813      	ldr	r0, [pc, #76]	@ (8001890 <main+0xd4>)
 8001844:	f7ff fd4c 	bl	80012e0 <LSM9DS1_Read_Gyro>
		  LSM9DS1_Read_Mag(&hi2c1, &IMU);
 8001848:	4915      	ldr	r1, [pc, #84]	@ (80018a0 <main+0xe4>)
 800184a:	4811      	ldr	r0, [pc, #68]	@ (8001890 <main+0xd4>)
 800184c:	f7ff fd79 	bl	8001342 <LSM9DS1_Read_Mag>
		  Normalize_Accel_Values(&IMU);
 8001850:	4813      	ldr	r0, [pc, #76]	@ (80018a0 <main+0xe4>)
 8001852:	f7ff fdad 	bl	80013b0 <Normalize_Accel_Values>
		  Normalize_Gyro_Values(&IMU);
 8001856:	4812      	ldr	r0, [pc, #72]	@ (80018a0 <main+0xe4>)
 8001858:	f7ff fdf2 	bl	8001440 <Normalize_Gyro_Values>
		  Normalize_Mag_Values(&IMU);
 800185c:	4810      	ldr	r0, [pc, #64]	@ (80018a0 <main+0xe4>)
 800185e:	f7ff fe55 	bl	800150c <Normalize_Mag_Values>
		  ftoaIMU(&IMU, IMU_i2cBuffer, sizeof(IMU_i2cBuffer), 4);
 8001862:	2304      	movs	r3, #4
 8001864:	2296      	movs	r2, #150	@ 0x96
 8001866:	490f      	ldr	r1, [pc, #60]	@ (80018a4 <main+0xe8>)
 8001868:	480d      	ldr	r0, [pc, #52]	@ (80018a0 <main+0xe4>)
 800186a:	f7ff feb5 	bl	80015d8 <ftoaIMU>
		  HAL_UART_Transmit(&huart2, (uint8_t*)IMU_i2cBuffer, strlen(IMU_i2cBuffer), HAL_MAX_DELAY);
 800186e:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <main+0xe8>)
 8001870:	f7fe fcae 	bl	80001d0 <strlen>
 8001874:	4603      	mov	r3, r0
 8001876:	b29a      	uxth	r2, r3
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
 800187c:	4909      	ldr	r1, [pc, #36]	@ (80018a4 <main+0xe8>)
 800187e:	480a      	ldr	r0, [pc, #40]	@ (80018a8 <main+0xec>)
 8001880:	f003 fa9e 	bl	8004dc0 <HAL_UART_Transmit>
		  IMU_flag = 0;
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <main+0xe0>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
	  if(IMU_flag){
 800188a:	e7d0      	b.n	800182e <main+0x72>
 800188c:	200001e0 	.word	0x200001e0
 8001890:	2000008c 	.word	0x2000008c
 8001894:	200000e1 	.word	0x200000e1
 8001898:	200000e2 	.word	0x200000e2
 800189c:	200000e0 	.word	0x200000e0
 80018a0:	200000e4 	.word	0x200000e4
 80018a4:	20000144 	.word	0x20000144
 80018a8:	2000022c 	.word	0x2000022c

080018ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b096      	sub	sp, #88	@ 0x58
 80018b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	2244      	movs	r2, #68	@ 0x44
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f004 f812 	bl	80058e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c0:	463b      	mov	r3, r7
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80018d2:	f001 fbd1 	bl	8003078 <HAL_PWREx_ControlVoltageScaling>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018dc:	f000 f84e 	bl	800197c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018e0:	2302      	movs	r3, #2
 80018e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ea:	2310      	movs	r3, #16
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ee:	2302      	movs	r3, #2
 80018f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018f2:	2302      	movs	r3, #2
 80018f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80018fa:	230a      	movs	r3, #10
 80018fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018fe:	2307      	movs	r3, #7
 8001900:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001902:	2302      	movs	r3, #2
 8001904:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001906:	2302      	movs	r3, #2
 8001908:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4618      	mov	r0, r3
 8001910:	f001 fc08 	bl	8003124 <HAL_RCC_OscConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800191a:	f000 f82f 	bl	800197c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191e:	230f      	movs	r3, #15
 8001920:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001922:	2303      	movs	r3, #3
 8001924:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001932:	463b      	mov	r3, r7
 8001934:	2104      	movs	r1, #4
 8001936:	4618      	mov	r0, r3
 8001938:	f001 ffd0 	bl	80038dc <HAL_RCC_ClockConfig>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001942:	f000 f81b 	bl	800197c <Error_Handler>
  }
}
 8001946:	bf00      	nop
 8001948:	3758      	adds	r7, #88	@ 0x58
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    if(htim == &htim6)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a06      	ldr	r2, [pc, #24]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d102      	bne.n	8001966 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        IMU_flag=1;
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
    }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	200001e0 	.word	0x200001e0
 8001978:	200000e0 	.word	0x200000e0

0800197c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001980:	b672      	cpsid	i
}
 8001982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <Error_Handler+0x8>

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <HAL_MspInit+0x44>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001992:	4a0e      	ldr	r2, [pc, #56]	@ (80019cc <HAL_MspInit+0x44>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6613      	str	r3, [r2, #96]	@ 0x60
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <HAL_MspInit+0x44>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_MspInit+0x44>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019aa:	4a08      	ldr	r2, [pc, #32]	@ (80019cc <HAL_MspInit+0x44>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_MspInit+0x44>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000

080019d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <NMI_Handler+0x4>

080019d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <HardFault_Handler+0x4>

080019e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <MemManage_Handler+0x4>

080019e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <BusFault_Handler+0x4>

080019f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <UsageFault_Handler+0x4>

080019f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a26:	f000 f9c3 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a34:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <TIM6_DAC_IRQHandler+0x10>)
 8001a36:	f002 fef9 	bl	800482c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200001e0 	.word	0x200001e0

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f003 ff3e 	bl	80058f4 <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20018000 	.word	0x20018000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	200001dc 	.word	0x200001dc
 8001aac:	20000400 	.word	0x20000400

08001ab0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <SystemInit+0x20>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aba:	4a05      	ldr	r2, [pc, #20]	@ (8001ad0 <SystemInit+0x20>)
 8001abc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ac0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <MX_TIM6_Init+0x64>)
 8001ae6:	4a15      	ldr	r2, [pc, #84]	@ (8001b3c <MX_TIM6_Init+0x68>)
 8001ae8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8001aea:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <MX_TIM6_Init+0x64>)
 8001aec:	220f      	movs	r2, #15
 8001aee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <MX_TIM6_Init+0x64>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <MX_TIM6_Init+0x64>)
 8001af8:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001afc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <MX_TIM6_Init+0x64>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b04:	480c      	ldr	r0, [pc, #48]	@ (8001b38 <MX_TIM6_Init+0x64>)
 8001b06:	f002 fdc9 	bl	800469c <HAL_TIM_Base_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b10:	f7ff ff34 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	@ (8001b38 <MX_TIM6_Init+0x64>)
 8001b22:	f003 f859 	bl	8004bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b2c:	f7ff ff26 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200001e0 	.word	0x200001e0
 8001b3c:	40001000 	.word	0x40001000

08001b40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <HAL_TIM_Base_MspInit+0x44>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d113      	bne.n	8001b7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b52:	4b0d      	ldr	r3, [pc, #52]	@ (8001b88 <HAL_TIM_Base_MspInit+0x48>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b56:	4a0c      	ldr	r2, [pc, #48]	@ (8001b88 <HAL_TIM_Base_MspInit+0x48>)
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <HAL_TIM_Base_MspInit+0x48>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2036      	movs	r0, #54	@ 0x36
 8001b70:	f000 fa3d 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b74:	2036      	movs	r0, #54	@ 0x36
 8001b76:	f000 fa56 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40001000 	.word	0x40001000
 8001b88:	40021000 	.word	0x40021000

08001b8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001b92:	4a15      	ldr	r2, [pc, #84]	@ (8001be8 <MX_USART2_UART_Init+0x5c>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bd0:	f003 f8a8 	bl	8004d24 <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bda:	f7ff fecf 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000022c 	.word	0x2000022c
 8001be8:	40004400 	.word	0x40004400

08001bec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0ac      	sub	sp, #176	@ 0xb0
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2288      	movs	r2, #136	@ 0x88
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fe69 	bl	80058e4 <memset>
  if(uartHandle->Instance==USART2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a21      	ldr	r2, [pc, #132]	@ (8001c9c <HAL_UART_MspInit+0xb0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d13b      	bne.n	8001c94 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f002 f87b 	bl	8003d24 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c34:	f7ff fea2 	bl	800197c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c38:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <HAL_UART_MspInit+0xb4>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3c:	4a18      	ldr	r2, [pc, #96]	@ (8001ca0 <HAL_UART_MspInit+0xb4>)
 8001c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c44:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <HAL_UART_MspInit+0xb4>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <HAL_UART_MspInit+0xb4>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c54:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <HAL_UART_MspInit+0xb4>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <HAL_UART_MspInit+0xb4>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c68:	230c      	movs	r3, #12
 8001c6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c80:	2307      	movs	r3, #7
 8001c82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c90:	f000 f9e4 	bl	800205c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c94:	bf00      	nop
 8001c96:	37b0      	adds	r7, #176	@ 0xb0
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ca4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca8:	f7ff ff02 	bl	8001ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cac:	480c      	ldr	r0, [pc, #48]	@ (8001ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cae:	490d      	ldr	r1, [pc, #52]	@ (8001ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce8 <LoopForever+0xe>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf0 <LoopForever+0x16>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f003 fe15 	bl	8005900 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cd6:	f7ff fd71 	bl	80017bc <main>

08001cda <LoopForever>:

LoopForever:
    b LoopForever
 8001cda:	e7fe      	b.n	8001cda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cdc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ce8:	080071e8 	.word	0x080071e8
  ldr r2, =_sbss
 8001cec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001cf0:	20000400 	.word	0x20000400

08001cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC1_2_IRQHandler>
	...

08001cf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d02:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <HAL_Init+0x3c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a0b      	ldr	r2, [pc, #44]	@ (8001d34 <HAL_Init+0x3c>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0e:	2003      	movs	r0, #3
 8001d10:	f000 f962 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d14:	2000      	movs	r0, #0
 8001d16:	f000 f80f 	bl	8001d38 <HAL_InitTick>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	71fb      	strb	r3, [r7, #7]
 8001d24:	e001      	b.n	8001d2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d26:	f7ff fe2f 	bl	8001988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40022000 	.word	0x40022000

08001d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d44:	4b17      	ldr	r3, [pc, #92]	@ (8001da4 <HAL_InitTick+0x6c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d023      	beq.n	8001d94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d4c:	4b16      	ldr	r3, [pc, #88]	@ (8001da8 <HAL_InitTick+0x70>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <HAL_InitTick+0x6c>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f96d 	bl	8002042 <HAL_SYSTICK_Config>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10f      	bne.n	8001d8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b0f      	cmp	r3, #15
 8001d72:	d809      	bhi.n	8001d88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d74:	2200      	movs	r2, #0
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f000 f937 	bl	8001fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d80:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <HAL_InitTick+0x74>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e007      	b.n	8001d98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
 8001d8c:	e004      	b.n	8001d98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	e001      	b.n	8001d98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000008 	.word	0x20000008
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000004 	.word	0x20000004

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	200002b4 	.word	0x200002b4

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	200002b4 	.word	0x200002b4

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_Delay+0x44>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000008 	.word	0x20000008

08001e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4b0c      	ldr	r3, [pc, #48]	@ (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	60d3      	str	r3, [r2, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e84:	4b04      	ldr	r3, [pc, #16]	@ (8001e98 <__NVIC_GetPriorityGrouping+0x18>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f003 0307 	and.w	r3, r3, #7
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db0b      	blt.n	8001ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4907      	ldr	r1, [pc, #28]	@ (8001ed4 <__NVIC_EnableIRQ+0x38>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	@ (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	@ (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	@ 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f7ff ff8e 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff29 	bl	8001e38 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff3e 	bl	8001e80 <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff8e 	bl	8001f2c <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff31 	bl	8001e9c <__NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffa2 	bl	8001f94 <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206a:	e17f      	b.n	800236c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8171 	beq.w	8002366 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d005      	beq.n	800209c <HAL_GPIO_Init+0x40>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d130      	bne.n	80020fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020d2:	2201      	movs	r2, #1
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f003 0201 	and.w	r2, r3, #1
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b03      	cmp	r3, #3
 8002108:	d118      	bne.n	800213c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002110:	2201      	movs	r2, #1
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	f003 0201 	and.w	r2, r3, #1
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b03      	cmp	r3, #3
 8002146:	d017      	beq.n	8002178 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d123      	bne.n	80021cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	08da      	lsrs	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3208      	adds	r2, #8
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3208      	adds	r2, #8
 80021c6:	6939      	ldr	r1, [r7, #16]
 80021c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80ac 	beq.w	8002366 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	4b5f      	ldr	r3, [pc, #380]	@ (800238c <HAL_GPIO_Init+0x330>)
 8002210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002212:	4a5e      	ldr	r2, [pc, #376]	@ (800238c <HAL_GPIO_Init+0x330>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6613      	str	r3, [r2, #96]	@ 0x60
 800221a:	4b5c      	ldr	r3, [pc, #368]	@ (800238c <HAL_GPIO_Init+0x330>)
 800221c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002226:	4a5a      	ldr	r2, [pc, #360]	@ (8002390 <HAL_GPIO_Init+0x334>)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	220f      	movs	r2, #15
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002250:	d025      	beq.n	800229e <HAL_GPIO_Init+0x242>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4f      	ldr	r2, [pc, #316]	@ (8002394 <HAL_GPIO_Init+0x338>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01f      	beq.n	800229a <HAL_GPIO_Init+0x23e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4e      	ldr	r2, [pc, #312]	@ (8002398 <HAL_GPIO_Init+0x33c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d019      	beq.n	8002296 <HAL_GPIO_Init+0x23a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4d      	ldr	r2, [pc, #308]	@ (800239c <HAL_GPIO_Init+0x340>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0x236>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4c      	ldr	r2, [pc, #304]	@ (80023a0 <HAL_GPIO_Init+0x344>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00d      	beq.n	800228e <HAL_GPIO_Init+0x232>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4b      	ldr	r2, [pc, #300]	@ (80023a4 <HAL_GPIO_Init+0x348>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <HAL_GPIO_Init+0x22e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4a      	ldr	r2, [pc, #296]	@ (80023a8 <HAL_GPIO_Init+0x34c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d101      	bne.n	8002286 <HAL_GPIO_Init+0x22a>
 8002282:	2306      	movs	r3, #6
 8002284:	e00c      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 8002286:	2307      	movs	r3, #7
 8002288:	e00a      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 800228a:	2305      	movs	r3, #5
 800228c:	e008      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 800228e:	2304      	movs	r3, #4
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 8002292:	2303      	movs	r3, #3
 8002294:	e004      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 8002296:	2302      	movs	r3, #2
 8002298:	e002      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 800229e:	2300      	movs	r3, #0
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	f002 0203 	and.w	r2, r2, #3
 80022a6:	0092      	lsls	r2, r2, #2
 80022a8:	4093      	lsls	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022b0:	4937      	ldr	r1, [pc, #220]	@ (8002390 <HAL_GPIO_Init+0x334>)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3302      	adds	r3, #2
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022be:	4b3b      	ldr	r3, [pc, #236]	@ (80023ac <HAL_GPIO_Init+0x350>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022e2:	4a32      	ldr	r2, [pc, #200]	@ (80023ac <HAL_GPIO_Init+0x350>)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022e8:	4b30      	ldr	r3, [pc, #192]	@ (80023ac <HAL_GPIO_Init+0x350>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800230c:	4a27      	ldr	r2, [pc, #156]	@ (80023ac <HAL_GPIO_Init+0x350>)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002312:	4b26      	ldr	r3, [pc, #152]	@ (80023ac <HAL_GPIO_Init+0x350>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002336:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <HAL_GPIO_Init+0x350>)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800233c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <HAL_GPIO_Init+0x350>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002360:	4a12      	ldr	r2, [pc, #72]	@ (80023ac <HAL_GPIO_Init+0x350>)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	f47f ae78 	bne.w	800206c <HAL_GPIO_Init+0x10>
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	40010000 	.word	0x40010000
 8002394:	48000400 	.word	0x48000400
 8002398:	48000800 	.word	0x48000800
 800239c:	48000c00 	.word	0x48000c00
 80023a0:	48001000 	.word	0x48001000
 80023a4:	48001400 	.word	0x48001400
 80023a8:	48001800 	.word	0x48001800
 80023ac:	40010400 	.word	0x40010400

080023b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c0:	787b      	ldrb	r3, [r7, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023cc:	e002      	b.n	80023d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4013      	ands	r3, r2
 80023f8:	041a      	lsls	r2, r3, #16
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	43d9      	mvns	r1, r3
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	400b      	ands	r3, r1
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e08d      	b.n	8002542 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe fe22 	bl	8001084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	@ 0x24
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002464:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002474:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d107      	bne.n	800248e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e006      	b.n	800249c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800249a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d108      	bne.n	80024b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	e007      	b.n	80024c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69d9      	ldr	r1, [r3, #28]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1a      	ldr	r2, [r3, #32]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af02      	add	r7, sp, #8
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	4608      	mov	r0, r1
 8002556:	4611      	mov	r1, r2
 8002558:	461a      	mov	r2, r3
 800255a:	4603      	mov	r3, r0
 800255c:	817b      	strh	r3, [r7, #10]
 800255e:	460b      	mov	r3, r1
 8002560:	813b      	strh	r3, [r7, #8]
 8002562:	4613      	mov	r3, r2
 8002564:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b20      	cmp	r3, #32
 8002570:	f040 80f9 	bne.w	8002766 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <HAL_I2C_Mem_Write+0x34>
 800257a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002586:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0ed      	b.n	8002768 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_I2C_Mem_Write+0x4e>
 8002596:	2302      	movs	r3, #2
 8002598:	e0e6      	b.n	8002768 <HAL_I2C_Mem_Write+0x21c>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025a2:	f7ff fc19 	bl	8001dd8 <HAL_GetTick>
 80025a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2319      	movs	r3, #25
 80025ae:	2201      	movs	r2, #1
 80025b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 fac3 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0d1      	b.n	8002768 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2221      	movs	r2, #33	@ 0x21
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2240      	movs	r2, #64	@ 0x40
 80025d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a3a      	ldr	r2, [r7, #32]
 80025de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80025e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025ec:	88f8      	ldrh	r0, [r7, #6]
 80025ee:	893a      	ldrh	r2, [r7, #8]
 80025f0:	8979      	ldrh	r1, [r7, #10]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	4603      	mov	r3, r0
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f9d3 	bl	80029a8 <I2C_RequestMemoryWrite>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0a9      	b.n	8002768 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	2bff      	cmp	r3, #255	@ 0xff
 800261c:	d90e      	bls.n	800263c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	22ff      	movs	r2, #255	@ 0xff
 8002622:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002628:	b2da      	uxtb	r2, r3
 800262a:	8979      	ldrh	r1, [r7, #10]
 800262c:	2300      	movs	r3, #0
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fc47 	bl	8002ec8 <I2C_TransferConfig>
 800263a:	e00f      	b.n	800265c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264a:	b2da      	uxtb	r2, r3
 800264c:	8979      	ldrh	r1, [r7, #10]
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 fc36 	bl	8002ec8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fac6 	bl	8002bf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e07b      	b.n	8002768 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	781a      	ldrb	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d034      	beq.n	8002714 <HAL_I2C_Mem_Write+0x1c8>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d130      	bne.n	8002714 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b8:	2200      	movs	r2, #0
 80026ba:	2180      	movs	r1, #128	@ 0x80
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fa3f 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e04d      	b.n	8002768 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2bff      	cmp	r3, #255	@ 0xff
 80026d4:	d90e      	bls.n	80026f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	22ff      	movs	r2, #255	@ 0xff
 80026da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	8979      	ldrh	r1, [r7, #10]
 80026e4:	2300      	movs	r3, #0
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fbeb 	bl	8002ec8 <I2C_TransferConfig>
 80026f2:	e00f      	b.n	8002714 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002702:	b2da      	uxtb	r2, r3
 8002704:	8979      	ldrh	r1, [r7, #10]
 8002706:	2300      	movs	r3, #0
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fbda 	bl	8002ec8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d19e      	bne.n	800265c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 faac 	bl	8002c80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e01a      	b.n	8002768 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2220      	movs	r2, #32
 8002738:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <HAL_I2C_Mem_Write+0x224>)
 8002746:	400b      	ands	r3, r1
 8002748:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
  }
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	fe00e800 	.word	0xfe00e800

08002774 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	4608      	mov	r0, r1
 800277e:	4611      	mov	r1, r2
 8002780:	461a      	mov	r2, r3
 8002782:	4603      	mov	r3, r0
 8002784:	817b      	strh	r3, [r7, #10]
 8002786:	460b      	mov	r3, r1
 8002788:	813b      	strh	r3, [r7, #8]
 800278a:	4613      	mov	r3, r2
 800278c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b20      	cmp	r3, #32
 8002798:	f040 80fd 	bne.w	8002996 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_I2C_Mem_Read+0x34>
 80027a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0f1      	b.n	8002998 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_I2C_Mem_Read+0x4e>
 80027be:	2302      	movs	r3, #2
 80027c0:	e0ea      	b.n	8002998 <HAL_I2C_Mem_Read+0x224>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027ca:	f7ff fb05 	bl	8001dd8 <HAL_GetTick>
 80027ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2319      	movs	r3, #25
 80027d6:	2201      	movs	r2, #1
 80027d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f9af 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0d5      	b.n	8002998 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2222      	movs	r2, #34	@ 0x22
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2240      	movs	r2, #64	@ 0x40
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a3a      	ldr	r2, [r7, #32]
 8002806:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800280c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002814:	88f8      	ldrh	r0, [r7, #6]
 8002816:	893a      	ldrh	r2, [r7, #8]
 8002818:	8979      	ldrh	r1, [r7, #10]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	9301      	str	r3, [sp, #4]
 800281e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	4603      	mov	r3, r0
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f913 	bl	8002a50 <I2C_RequestMemoryRead>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0ad      	b.n	8002998 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	2bff      	cmp	r3, #255	@ 0xff
 8002844:	d90e      	bls.n	8002864 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	b2da      	uxtb	r2, r3
 8002852:	8979      	ldrh	r1, [r7, #10]
 8002854:	4b52      	ldr	r3, [pc, #328]	@ (80029a0 <HAL_I2C_Mem_Read+0x22c>)
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fb33 	bl	8002ec8 <I2C_TransferConfig>
 8002862:	e00f      	b.n	8002884 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002872:	b2da      	uxtb	r2, r3
 8002874:	8979      	ldrh	r1, [r7, #10]
 8002876:	4b4a      	ldr	r3, [pc, #296]	@ (80029a0 <HAL_I2C_Mem_Read+0x22c>)
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fb22 	bl	8002ec8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288a:	2200      	movs	r2, #0
 800288c:	2104      	movs	r1, #4
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f956 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e07c      	b.n	8002998 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d034      	beq.n	8002944 <HAL_I2C_Mem_Read+0x1d0>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d130      	bne.n	8002944 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e8:	2200      	movs	r2, #0
 80028ea:	2180      	movs	r1, #128	@ 0x80
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f927 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e04d      	b.n	8002998 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	2bff      	cmp	r3, #255	@ 0xff
 8002904:	d90e      	bls.n	8002924 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002910:	b2da      	uxtb	r2, r3
 8002912:	8979      	ldrh	r1, [r7, #10]
 8002914:	2300      	movs	r3, #0
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fad3 	bl	8002ec8 <I2C_TransferConfig>
 8002922:	e00f      	b.n	8002944 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002932:	b2da      	uxtb	r2, r3
 8002934:	8979      	ldrh	r1, [r7, #10]
 8002936:	2300      	movs	r3, #0
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fac2 	bl	8002ec8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d19a      	bne.n	8002884 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f994 	bl	8002c80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e01a      	b.n	8002998 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2220      	movs	r2, #32
 8002968:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <HAL_I2C_Mem_Read+0x230>)
 8002976:	400b      	ands	r3, r1
 8002978:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	e000      	b.n	8002998 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002996:	2302      	movs	r3, #2
  }
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	80002400 	.word	0x80002400
 80029a4:	fe00e800 	.word	0xfe00e800

080029a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	4608      	mov	r0, r1
 80029b2:	4611      	mov	r1, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	817b      	strh	r3, [r7, #10]
 80029ba:	460b      	mov	r3, r1
 80029bc:	813b      	strh	r3, [r7, #8]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	8979      	ldrh	r1, [r7, #10]
 80029c8:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <I2C_RequestMemoryWrite+0xa4>)
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fa79 	bl	8002ec8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	69b9      	ldr	r1, [r7, #24]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f909 	bl	8002bf2 <I2C_WaitOnTXISFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e02c      	b.n	8002a44 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029f0:	893b      	ldrh	r3, [r7, #8]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80029fa:	e015      	b.n	8002a28 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029fc:	893b      	ldrh	r3, [r7, #8]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	69b9      	ldr	r1, [r7, #24]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f8ef 	bl	8002bf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e012      	b.n	8002a44 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a1e:	893b      	ldrh	r3, [r7, #8]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2180      	movs	r1, #128	@ 0x80
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f884 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	80002000 	.word	0x80002000

08002a50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	4608      	mov	r0, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	817b      	strh	r3, [r7, #10]
 8002a62:	460b      	mov	r3, r1
 8002a64:	813b      	strh	r3, [r7, #8]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	8979      	ldrh	r1, [r7, #10]
 8002a70:	4b20      	ldr	r3, [pc, #128]	@ (8002af4 <I2C_RequestMemoryRead+0xa4>)
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2300      	movs	r3, #0
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fa26 	bl	8002ec8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	69b9      	ldr	r1, [r7, #24]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f8b6 	bl	8002bf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e02c      	b.n	8002aea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d105      	bne.n	8002aa2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a96:	893b      	ldrh	r3, [r7, #8]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002aa0:	e015      	b.n	8002ace <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002aa2:	893b      	ldrh	r3, [r7, #8]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	69b9      	ldr	r1, [r7, #24]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f89c 	bl	8002bf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e012      	b.n	8002aea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac4:	893b      	ldrh	r3, [r7, #8]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2140      	movs	r1, #64	@ 0x40
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f831 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	80002000 	.word	0x80002000

08002af8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d103      	bne.n	8002b16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2200      	movs	r2, #0
 8002b14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d007      	beq.n	8002b34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	619a      	str	r2, [r3, #24]
  }
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b50:	e03b      	b.n	8002bca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	6839      	ldr	r1, [r7, #0]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f8d6 	bl	8002d08 <I2C_IsErrorOccurred>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e041      	b.n	8002bea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d02d      	beq.n	8002bca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6e:	f7ff f933 	bl	8001dd8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d122      	bne.n	8002bca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d113      	bne.n	8002bca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	f043 0220 	orr.w	r2, r3, #32
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e00f      	b.n	8002bea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	bf0c      	ite	eq
 8002bda:	2301      	moveq	r3, #1
 8002bdc:	2300      	movne	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d0b4      	beq.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bfe:	e033      	b.n	8002c68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f87f 	bl	8002d08 <I2C_IsErrorOccurred>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e031      	b.n	8002c78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1a:	d025      	beq.n	8002c68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1c:	f7ff f8dc 	bl	8001dd8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d302      	bcc.n	8002c32 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11a      	bne.n	8002c68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d013      	beq.n	8002c68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e007      	b.n	8002c78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d1c4      	bne.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c8c:	e02f      	b.n	8002cee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f838 	bl	8002d08 <I2C_IsErrorOccurred>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e02d      	b.n	8002cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca2:	f7ff f899 	bl	8001dd8 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d302      	bcc.n	8002cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d11a      	bne.n	8002cee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d013      	beq.n	8002cee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f043 0220 	orr.w	r2, r3, #32
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e007      	b.n	8002cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d1c8      	bne.n	8002c8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d068      	beq.n	8002e06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2210      	movs	r2, #16
 8002d3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d3c:	e049      	b.n	8002dd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d045      	beq.n	8002dd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7ff f847 	bl	8001dd8 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_IsErrorOccurred+0x54>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d13a      	bne.n	8002dd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d7e:	d121      	bne.n	8002dc4 <I2C_IsErrorOccurred+0xbc>
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d86:	d01d      	beq.n	8002dc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d01a      	beq.n	8002dc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d9e:	f7ff f81b 	bl	8001dd8 <HAL_GetTick>
 8002da2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da4:	e00e      	b.n	8002dc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002da6:	f7ff f817 	bl	8001dd8 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b19      	cmp	r3, #25
 8002db2:	d907      	bls.n	8002dc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	f043 0320 	orr.w	r3, r3, #32
 8002dba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002dc2:	e006      	b.n	8002dd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d1e9      	bne.n	8002da6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d003      	beq.n	8002de8 <I2C_IsErrorOccurred+0xe0>
 8002de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0aa      	beq.n	8002d3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002de8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d103      	bne.n	8002df8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2220      	movs	r2, #32
 8002df6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	f043 0304 	orr.w	r3, r3, #4
 8002dfe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	f043 0308 	orr.w	r3, r3, #8
 8002e40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00b      	beq.n	8002e74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	f043 0302 	orr.w	r3, r3, #2
 8002e62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002e74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01c      	beq.n	8002eb6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f7ff fe3b 	bl	8002af8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec4 <I2C_IsErrorOccurred+0x1bc>)
 8002e8e:	400b      	ands	r3, r1
 8002e90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3728      	adds	r7, #40	@ 0x28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	fe00e800 	.word	0xfe00e800

08002ec8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	607b      	str	r3, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	817b      	strh	r3, [r7, #10]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eda:	897b      	ldrh	r3, [r7, #10]
 8002edc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ee0:	7a7b      	ldrb	r3, [r7, #9]
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ee8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ef6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	0d5b      	lsrs	r3, r3, #21
 8002f02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f06:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <I2C_TransferConfig+0x60>)
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	ea02 0103 	and.w	r1, r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	03ff63ff 	.word	0x03ff63ff

08002f2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d138      	bne.n	8002fb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e032      	b.n	8002fb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	@ 0x24
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6819      	ldr	r1, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e000      	b.n	8002fb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fb4:	2302      	movs	r3, #2
  }
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d139      	bne.n	800304c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e033      	b.n	800304e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2224      	movs	r2, #36	@ 0x24
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003014:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003060:	4b04      	ldr	r3, [pc, #16]	@ (8003074 <HAL_PWREx_GetVoltageRange+0x18>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40007000 	.word	0x40007000

08003078 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003086:	d130      	bne.n	80030ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003088:	4b23      	ldr	r3, [pc, #140]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003094:	d038      	beq.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003096:	4b20      	ldr	r3, [pc, #128]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800309e:	4a1e      	ldr	r2, [pc, #120]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030a6:	4b1d      	ldr	r3, [pc, #116]	@ (800311c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2232      	movs	r2, #50	@ 0x32
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	0c9b      	lsrs	r3, r3, #18
 80030b8:	3301      	adds	r3, #1
 80030ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030bc:	e002      	b.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c4:	4b14      	ldr	r3, [pc, #80]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d0:	d102      	bne.n	80030d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f2      	bne.n	80030be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e4:	d110      	bne.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e00f      	b.n	800310a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f6:	d007      	beq.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030f8:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003100:	4a05      	ldr	r2, [pc, #20]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003102:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003106:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40007000 	.word	0x40007000
 800311c:	20000000 	.word	0x20000000
 8003120:	431bde83 	.word	0x431bde83

08003124 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e3ca      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003136:	4b97      	ldr	r3, [pc, #604]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003140:	4b94      	ldr	r3, [pc, #592]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80e4 	beq.w	8003320 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <HAL_RCC_OscConfig+0x4a>
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b0c      	cmp	r3, #12
 8003162:	f040 808b 	bne.w	800327c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b01      	cmp	r3, #1
 800316a:	f040 8087 	bne.w	800327c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800316e:	4b89      	ldr	r3, [pc, #548]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_RCC_OscConfig+0x62>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e3a2      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	4b82      	ldr	r3, [pc, #520]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d004      	beq.n	80031a0 <HAL_RCC_OscConfig+0x7c>
 8003196:	4b7f      	ldr	r3, [pc, #508]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800319e:	e005      	b.n	80031ac <HAL_RCC_OscConfig+0x88>
 80031a0:	4b7c      	ldr	r3, [pc, #496]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80031a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d223      	bcs.n	80031f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fd55 	bl	8003c64 <RCC_SetFlashLatencyFromMSIRange>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e383      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c4:	4b73      	ldr	r3, [pc, #460]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a72      	ldr	r2, [pc, #456]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80031ca:	f043 0308 	orr.w	r3, r3, #8
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b70      	ldr	r3, [pc, #448]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	496d      	ldr	r1, [pc, #436]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031e2:	4b6c      	ldr	r3, [pc, #432]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	4968      	ldr	r1, [pc, #416]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
 80031f6:	e025      	b.n	8003244 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031f8:	4b66      	ldr	r3, [pc, #408]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a65      	ldr	r2, [pc, #404]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80031fe:	f043 0308 	orr.w	r3, r3, #8
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b63      	ldr	r3, [pc, #396]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	4960      	ldr	r1, [pc, #384]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003216:	4b5f      	ldr	r3, [pc, #380]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	495b      	ldr	r1, [pc, #364]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d109      	bne.n	8003244 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fd15 	bl	8003c64 <RCC_SetFlashLatencyFromMSIRange>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e343      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003244:	f000 fc4a 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b52      	ldr	r3, [pc, #328]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	4950      	ldr	r1, [pc, #320]	@ (8003398 <HAL_RCC_OscConfig+0x274>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	4a4e      	ldr	r2, [pc, #312]	@ (800339c <HAL_RCC_OscConfig+0x278>)
 8003262:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003264:	4b4e      	ldr	r3, [pc, #312]	@ (80033a0 <HAL_RCC_OscConfig+0x27c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe fd65 	bl	8001d38 <HAL_InitTick>
 800326e:	4603      	mov	r3, r0
 8003270:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d052      	beq.n	800331e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	e327      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d032      	beq.n	80032ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003284:	4b43      	ldr	r3, [pc, #268]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a42      	ldr	r2, [pc, #264]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003290:	f7fe fda2 	bl	8001dd8 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003298:	f7fe fd9e 	bl	8001dd8 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e310      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032b6:	4b37      	ldr	r3, [pc, #220]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a36      	ldr	r2, [pc, #216]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4b34      	ldr	r3, [pc, #208]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	4931      	ldr	r1, [pc, #196]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	492c      	ldr	r1, [pc, #176]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]
 80032e8:	e01a      	b.n	8003320 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a29      	ldr	r2, [pc, #164]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032f6:	f7fe fd6f 	bl	8001dd8 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032fe:	f7fe fd6b 	bl	8001dd8 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e2dd      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003310:	4b20      	ldr	r3, [pc, #128]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f0      	bne.n	80032fe <HAL_RCC_OscConfig+0x1da>
 800331c:	e000      	b.n	8003320 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800331e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d074      	beq.n	8003416 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b08      	cmp	r3, #8
 8003330:	d005      	beq.n	800333e <HAL_RCC_OscConfig+0x21a>
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b0c      	cmp	r3, #12
 8003336:	d10e      	bne.n	8003356 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b03      	cmp	r3, #3
 800333c:	d10b      	bne.n	8003356 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333e:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d064      	beq.n	8003414 <HAL_RCC_OscConfig+0x2f0>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d160      	bne.n	8003414 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e2ba      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x24a>
 8003360:	4b0c      	ldr	r3, [pc, #48]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0b      	ldr	r2, [pc, #44]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e026      	b.n	80033bc <HAL_RCC_OscConfig+0x298>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003376:	d115      	bne.n	80033a4 <HAL_RCC_OscConfig+0x280>
 8003378:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a05      	ldr	r2, [pc, #20]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 800337e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a02      	ldr	r2, [pc, #8]	@ (8003394 <HAL_RCC_OscConfig+0x270>)
 800338a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	e014      	b.n	80033bc <HAL_RCC_OscConfig+0x298>
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
 8003398:	08007128 	.word	0x08007128
 800339c:	20000000 	.word	0x20000000
 80033a0:	20000004 	.word	0x20000004
 80033a4:	4ba0      	ldr	r3, [pc, #640]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a9f      	ldr	r2, [pc, #636]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b9d      	ldr	r3, [pc, #628]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a9c      	ldr	r2, [pc, #624]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 80033b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d013      	beq.n	80033ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fd08 	bl	8001dd8 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fe fd04 	bl	8001dd8 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	@ 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e276      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033de:	4b92      	ldr	r3, [pc, #584]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x2a8>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fe fcf4 	bl	8001dd8 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fe fcf0 	bl	8001dd8 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	@ 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e262      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003406:	4b88      	ldr	r3, [pc, #544]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x2d0>
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d060      	beq.n	80034e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	2b04      	cmp	r3, #4
 8003426:	d005      	beq.n	8003434 <HAL_RCC_OscConfig+0x310>
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d119      	bne.n	8003462 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d116      	bne.n	8003462 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003434:	4b7c      	ldr	r3, [pc, #496]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_OscConfig+0x328>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e23f      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344c:	4b76      	ldr	r3, [pc, #472]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	061b      	lsls	r3, r3, #24
 800345a:	4973      	ldr	r1, [pc, #460]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003460:	e040      	b.n	80034e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d023      	beq.n	80034b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346a:	4b6f      	ldr	r3, [pc, #444]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a6e      	ldr	r2, [pc, #440]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fe fcaf 	bl	8001dd8 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800347e:	f7fe fcab 	bl	8001dd8 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e21d      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003490:	4b65      	ldr	r3, [pc, #404]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b62      	ldr	r3, [pc, #392]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	495f      	ldr	r1, [pc, #380]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
 80034b0:	e018      	b.n	80034e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 80034b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe fc8b 	bl	8001dd8 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fe fc87 	bl	8001dd8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e1f9      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034d8:	4b53      	ldr	r3, [pc, #332]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f0      	bne.n	80034c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d03c      	beq.n	800356a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01c      	beq.n	8003532 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 80034fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034fe:	4a4a      	ldr	r2, [pc, #296]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fe fc66 	bl	8001dd8 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003510:	f7fe fc62 	bl	8001dd8 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e1d4      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003522:	4b41      	ldr	r3, [pc, #260]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 8003524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0ef      	beq.n	8003510 <HAL_RCC_OscConfig+0x3ec>
 8003530:	e01b      	b.n	800356a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003532:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 8003534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003538:	4a3b      	ldr	r2, [pc, #236]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003542:	f7fe fc49 	bl	8001dd8 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354a:	f7fe fc45 	bl	8001dd8 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e1b7      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800355c:	4b32      	ldr	r3, [pc, #200]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 800355e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1ef      	bne.n	800354a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80a6 	beq.w	80036c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003578:	2300      	movs	r3, #0
 800357a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800357c:	4b2a      	ldr	r3, [pc, #168]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10d      	bne.n	80035a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003588:	4b27      	ldr	r3, [pc, #156]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358c:	4a26      	ldr	r2, [pc, #152]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 800358e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003592:	6593      	str	r3, [r2, #88]	@ 0x58
 8003594:	4b24      	ldr	r3, [pc, #144]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a0:	2301      	movs	r3, #1
 80035a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a4:	4b21      	ldr	r3, [pc, #132]	@ (800362c <HAL_RCC_OscConfig+0x508>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d118      	bne.n	80035e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b0:	4b1e      	ldr	r3, [pc, #120]	@ (800362c <HAL_RCC_OscConfig+0x508>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1d      	ldr	r2, [pc, #116]	@ (800362c <HAL_RCC_OscConfig+0x508>)
 80035b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035bc:	f7fe fc0c 	bl	8001dd8 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c4:	f7fe fc08 	bl	8001dd8 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e17a      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d6:	4b15      	ldr	r3, [pc, #84]	@ (800362c <HAL_RCC_OscConfig+0x508>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d108      	bne.n	80035fc <HAL_RCC_OscConfig+0x4d8>
 80035ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035fa:	e029      	b.n	8003650 <HAL_RCC_OscConfig+0x52c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b05      	cmp	r3, #5
 8003602:	d115      	bne.n	8003630 <HAL_RCC_OscConfig+0x50c>
 8003604:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360a:	4a07      	ldr	r2, [pc, #28]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 800360c:	f043 0304 	orr.w	r3, r3, #4
 8003610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003614:	4b04      	ldr	r3, [pc, #16]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361a:	4a03      	ldr	r2, [pc, #12]	@ (8003628 <HAL_RCC_OscConfig+0x504>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003624:	e014      	b.n	8003650 <HAL_RCC_OscConfig+0x52c>
 8003626:	bf00      	nop
 8003628:	40021000 	.word	0x40021000
 800362c:	40007000 	.word	0x40007000
 8003630:	4b9c      	ldr	r3, [pc, #624]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003636:	4a9b      	ldr	r2, [pc, #620]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003640:	4b98      	ldr	r3, [pc, #608]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003646:	4a97      	ldr	r2, [pc, #604]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 8003648:	f023 0304 	bic.w	r3, r3, #4
 800364c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d016      	beq.n	8003686 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fe fbbe 	bl	8001dd8 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fe fbba 	bl	8001dd8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e12a      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003676:	4b8b      	ldr	r3, [pc, #556]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ed      	beq.n	8003660 <HAL_RCC_OscConfig+0x53c>
 8003684:	e015      	b.n	80036b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fe fba7 	bl	8001dd8 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fe fba3 	bl	8001dd8 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e113      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036a4:	4b7f      	ldr	r3, [pc, #508]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1ed      	bne.n	800368e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036b2:	7ffb      	ldrb	r3, [r7, #31]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d105      	bne.n	80036c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b8:	4b7a      	ldr	r3, [pc, #488]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 80036ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036bc:	4a79      	ldr	r2, [pc, #484]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 80036be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036c2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80fe 	beq.w	80038ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	f040 80d0 	bne.w	8003878 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036d8:	4b72      	ldr	r3, [pc, #456]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0203 	and.w	r2, r3, #3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d130      	bne.n	800374e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	3b01      	subs	r3, #1
 80036f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d127      	bne.n	800374e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003708:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d11f      	bne.n	800374e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003718:	2a07      	cmp	r2, #7
 800371a:	bf14      	ite	ne
 800371c:	2201      	movne	r2, #1
 800371e:	2200      	moveq	r2, #0
 8003720:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003722:	4293      	cmp	r3, r2
 8003724:	d113      	bne.n	800374e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	3b01      	subs	r3, #1
 8003734:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003736:	429a      	cmp	r2, r3
 8003738:	d109      	bne.n	800374e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	3b01      	subs	r3, #1
 8003748:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d06e      	beq.n	800382c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b0c      	cmp	r3, #12
 8003752:	d069      	beq.n	8003828 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003754:	4b53      	ldr	r3, [pc, #332]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003760:	4b50      	ldr	r3, [pc, #320]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0ad      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003770:	4b4c      	ldr	r3, [pc, #304]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a4b      	ldr	r2, [pc, #300]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 8003776:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800377a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800377c:	f7fe fb2c 	bl	8001dd8 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003784:	f7fe fb28 	bl	8001dd8 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e09a      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003796:	4b43      	ldr	r3, [pc, #268]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a2:	4b40      	ldr	r3, [pc, #256]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	4b40      	ldr	r3, [pc, #256]	@ (80038a8 <HAL_RCC_OscConfig+0x784>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80037b2:	3a01      	subs	r2, #1
 80037b4:	0112      	lsls	r2, r2, #4
 80037b6:	4311      	orrs	r1, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037bc:	0212      	lsls	r2, r2, #8
 80037be:	4311      	orrs	r1, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037c4:	0852      	lsrs	r2, r2, #1
 80037c6:	3a01      	subs	r2, #1
 80037c8:	0552      	lsls	r2, r2, #21
 80037ca:	4311      	orrs	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037d0:	0852      	lsrs	r2, r2, #1
 80037d2:	3a01      	subs	r2, #1
 80037d4:	0652      	lsls	r2, r2, #25
 80037d6:	4311      	orrs	r1, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037dc:	0912      	lsrs	r2, r2, #4
 80037de:	0452      	lsls	r2, r2, #17
 80037e0:	430a      	orrs	r2, r1
 80037e2:	4930      	ldr	r1, [pc, #192]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037e8:	4b2e      	ldr	r3, [pc, #184]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2d      	ldr	r2, [pc, #180]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 80037ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037f4:	4b2b      	ldr	r3, [pc, #172]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4a2a      	ldr	r2, [pc, #168]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 80037fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003800:	f7fe faea 	bl	8001dd8 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003808:	f7fe fae6 	bl	8001dd8 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e058      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800381a:	4b22      	ldr	r3, [pc, #136]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003826:	e050      	b.n	80038ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e04f      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800382c:	4b1d      	ldr	r3, [pc, #116]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d148      	bne.n	80038ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003838:	4b1a      	ldr	r3, [pc, #104]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a19      	ldr	r2, [pc, #100]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 800383e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003842:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003844:	4b17      	ldr	r3, [pc, #92]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4a16      	ldr	r2, [pc, #88]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 800384a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800384e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003850:	f7fe fac2 	bl	8001dd8 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fe fabe 	bl	8001dd8 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e030      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386a:	4b0e      	ldr	r3, [pc, #56]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x734>
 8003876:	e028      	b.n	80038ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b0c      	cmp	r3, #12
 800387c:	d023      	beq.n	80038c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387e:	4b09      	ldr	r3, [pc, #36]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a08      	ldr	r2, [pc, #32]	@ (80038a4 <HAL_RCC_OscConfig+0x780>)
 8003884:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7fe faa5 	bl	8001dd8 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003890:	e00c      	b.n	80038ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003892:	f7fe faa1 	bl	8001dd8 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d905      	bls.n	80038ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e013      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
 80038a4:	40021000 	.word	0x40021000
 80038a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ac:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <HAL_RCC_OscConfig+0x7b0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1ec      	bne.n	8003892 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038b8:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <HAL_RCC_OscConfig+0x7b0>)
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	4905      	ldr	r1, [pc, #20]	@ (80038d4 <HAL_RCC_OscConfig+0x7b0>)
 80038be:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <HAL_RCC_OscConfig+0x7b4>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	60cb      	str	r3, [r1, #12]
 80038c4:	e001      	b.n	80038ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000
 80038d8:	feeefffc 	.word	0xfeeefffc

080038dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0e7      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f0:	4b75      	ldr	r3, [pc, #468]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1ec>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d910      	bls.n	8003920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b72      	ldr	r3, [pc, #456]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 0207 	bic.w	r2, r3, #7
 8003906:	4970      	ldr	r1, [pc, #448]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390e:	4b6e      	ldr	r3, [pc, #440]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0cf      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d010      	beq.n	800394e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	4b66      	ldr	r3, [pc, #408]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003938:	429a      	cmp	r2, r3
 800393a:	d908      	bls.n	800394e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800393c:	4b63      	ldr	r3, [pc, #396]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4960      	ldr	r1, [pc, #384]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d04c      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003962:	4b5a      	ldr	r3, [pc, #360]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d121      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0a6      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d107      	bne.n	800398a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800397a:	4b54      	ldr	r3, [pc, #336]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d115      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e09a      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003992:	4b4e      	ldr	r3, [pc, #312]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e08e      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a2:	4b4a      	ldr	r3, [pc, #296]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e086      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039b2:	4b46      	ldr	r3, [pc, #280]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4943      	ldr	r1, [pc, #268]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c4:	f7fe fa08 	bl	8001dd8 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039cc:	f7fe fa04 	bl	8001dd8 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e06e      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	4b3a      	ldr	r3, [pc, #232]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 020c 	and.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1eb      	bne.n	80039cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d010      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	4b31      	ldr	r3, [pc, #196]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d208      	bcs.n	8003a22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a10:	4b2e      	ldr	r3, [pc, #184]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	492b      	ldr	r1, [pc, #172]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a22:	4b29      	ldr	r3, [pc, #164]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d210      	bcs.n	8003a52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a30:	4b25      	ldr	r3, [pc, #148]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f023 0207 	bic.w	r2, r3, #7
 8003a38:	4923      	ldr	r1, [pc, #140]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a40:	4b21      	ldr	r3, [pc, #132]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e036      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	4918      	ldr	r1, [pc, #96]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a7c:	4b13      	ldr	r3, [pc, #76]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4910      	ldr	r1, [pc, #64]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a90:	f000 f824 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b0d      	ldr	r3, [pc, #52]	@ (8003acc <HAL_RCC_ClockConfig+0x1f0>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	490b      	ldr	r1, [pc, #44]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1f4>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aac:	4a09      	ldr	r2, [pc, #36]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8003aae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ab0:	4b09      	ldr	r3, [pc, #36]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1fc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe f93f 	bl	8001d38 <HAL_InitTick>
 8003aba:	4603      	mov	r3, r0
 8003abc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003abe:	7afb      	ldrb	r3, [r7, #11]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40022000 	.word	0x40022000
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	08007128 	.word	0x08007128
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	20000004 	.word	0x20000004

08003adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	@ 0x24
 8003ae0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aea:	4b3e      	ldr	r3, [pc, #248]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003af4:	4b3b      	ldr	r3, [pc, #236]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0x34>
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d121      	bne.n	8003b4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d11e      	bne.n	8003b4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b10:	4b34      	ldr	r3, [pc, #208]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b1c:	4b31      	ldr	r3, [pc, #196]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	e005      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b38:	4a2b      	ldr	r2, [pc, #172]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10d      	bne.n	8003b64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d102      	bne.n	8003b5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b54:	4b25      	ldr	r3, [pc, #148]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x110>)
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	e004      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b60:	4b23      	ldr	r3, [pc, #140]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	2b0c      	cmp	r3, #12
 8003b68:	d134      	bne.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d003      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d003      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0xac>
 8003b80:	e005      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b82:	4b1a      	ldr	r3, [pc, #104]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x110>)
 8003b84:	617b      	str	r3, [r7, #20]
      break;
 8003b86:	e005      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b88:	4b19      	ldr	r3, [pc, #100]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b8a:	617b      	str	r3, [r7, #20]
      break;
 8003b8c:	e002      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	617b      	str	r3, [r7, #20]
      break;
 8003b92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b94:	4b13      	ldr	r3, [pc, #76]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ba2:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	fb03 f202 	mul.w	r2, r3, r2
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	0e5b      	lsrs	r3, r3, #25
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bd4:	69bb      	ldr	r3, [r7, #24]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3724      	adds	r7, #36	@ 0x24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	08007140 	.word	0x08007140
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	007a1200 	.word	0x007a1200

08003bf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	@ (8003c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000000 	.word	0x20000000

08003c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c10:	f7ff fff0 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4904      	ldr	r1, [pc, #16]	@ (8003c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40021000 	.word	0x40021000
 8003c34:	08007138 	.word	0x08007138

08003c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c3c:	f7ff ffda 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	0adb      	lsrs	r3, r3, #11
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	4904      	ldr	r1, [pc, #16]	@ (8003c60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c4e:	5ccb      	ldrb	r3, [r1, r3]
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	08007138 	.word	0x08007138

08003c64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c70:	4b2a      	ldr	r3, [pc, #168]	@ (8003d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c7c:	f7ff f9ee 	bl	800305c <HAL_PWREx_GetVoltageRange>
 8003c80:	6178      	str	r0, [r7, #20]
 8003c82:	e014      	b.n	8003cae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c84:	4b25      	ldr	r3, [pc, #148]	@ (8003d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	4a24      	ldr	r2, [pc, #144]	@ (8003d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c90:	4b22      	ldr	r3, [pc, #136]	@ (8003d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c9c:	f7ff f9de 	bl	800305c <HAL_PWREx_GetVoltageRange>
 8003ca0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ca8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb4:	d10b      	bne.n	8003cce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b80      	cmp	r3, #128	@ 0x80
 8003cba:	d919      	bls.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2ba0      	cmp	r3, #160	@ 0xa0
 8003cc0:	d902      	bls.n	8003cc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	e013      	b.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cc8:	2301      	movs	r3, #1
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	e010      	b.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b80      	cmp	r3, #128	@ 0x80
 8003cd2:	d902      	bls.n	8003cda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	e00a      	b.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b80      	cmp	r3, #128	@ 0x80
 8003cde:	d102      	bne.n	8003ce6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	e004      	b.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b70      	cmp	r3, #112	@ 0x70
 8003cea:	d101      	bne.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cec:	2301      	movs	r3, #1
 8003cee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 0207 	bic.w	r2, r3, #7
 8003cf8:	4909      	ldr	r1, [pc, #36]	@ (8003d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d00:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d001      	beq.n	8003d12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40022000 	.word	0x40022000

08003d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d30:	2300      	movs	r3, #0
 8003d32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d041      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d48:	d02a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d4a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d4e:	d824      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d54:	d008      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d5a:	d81e      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d64:	d010      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d66:	e018      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d68:	4b86      	ldr	r3, [pc, #536]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a85      	ldr	r2, [pc, #532]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d74:	e015      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fabb 	bl	80042f8 <RCCEx_PLLSAI1_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d86:	e00c      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3320      	adds	r3, #32
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fba6 	bl	80044e0 <RCCEx_PLLSAI2_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d98:	e003      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d9e:	e000      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10b      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003da8:	4b76      	ldr	r3, [pc, #472]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003db6:	4973      	ldr	r1, [pc, #460]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003dbe:	e001      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d041      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dd8:	d02a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003dda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dde:	d824      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003de4:	d008      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003de6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dea:	d81e      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003df4:	d010      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003df6:	e018      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003df8:	4b62      	ldr	r3, [pc, #392]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a61      	ldr	r2, [pc, #388]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e04:	e015      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fa73 	bl	80042f8 <RCCEx_PLLSAI1_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e16:	e00c      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3320      	adds	r3, #32
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fb5e 	bl	80044e0 <RCCEx_PLLSAI2_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e28:	e003      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	74fb      	strb	r3, [r7, #19]
      break;
 8003e2e:	e000      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e32:	7cfb      	ldrb	r3, [r7, #19]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10b      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e38:	4b52      	ldr	r3, [pc, #328]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e46:	494f      	ldr	r1, [pc, #316]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e4e:	e001      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80a0 	beq.w	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e62:	2300      	movs	r3, #0
 8003e64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e66:	4b47      	ldr	r3, [pc, #284]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00d      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7c:	4b41      	ldr	r3, [pc, #260]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e80:	4a40      	ldr	r2, [pc, #256]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e88:	4b3e      	ldr	r3, [pc, #248]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e94:	2301      	movs	r3, #1
 8003e96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e98:	4b3b      	ldr	r3, [pc, #236]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a3a      	ldr	r2, [pc, #232]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ea4:	f7fd ff98 	bl	8001dd8 <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003eaa:	e009      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eac:	f7fd ff94 	bl	8001dd8 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d902      	bls.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	74fb      	strb	r3, [r7, #19]
        break;
 8003ebe:	e005      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ec0:	4b31      	ldr	r3, [pc, #196]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0ef      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ecc:	7cfb      	ldrb	r3, [r7, #19]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d15c      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003edc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01f      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d019      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ef0:	4b24      	ldr	r3, [pc, #144]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003efa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003efc:	4b21      	ldr	r3, [pc, #132]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	4a20      	ldr	r2, [pc, #128]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f12:	4a1c      	ldr	r2, [pc, #112]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f1c:	4a19      	ldr	r2, [pc, #100]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d016      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2e:	f7fd ff53 	bl	8001dd8 <HAL_GetTick>
 8003f32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f34:	e00b      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fd ff4f 	bl	8001dd8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d902      	bls.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	74fb      	strb	r3, [r7, #19]
            break;
 8003f4c:	e006      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0ec      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f5c:	7cfb      	ldrb	r3, [r7, #19]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f62:	4b08      	ldr	r3, [pc, #32]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f72:	4904      	ldr	r1, [pc, #16]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f7a:	e009      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	74bb      	strb	r3, [r7, #18]
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f90:	7c7b      	ldrb	r3, [r7, #17]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d105      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f96:	4b9e      	ldr	r3, [pc, #632]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9a:	4a9d      	ldr	r2, [pc, #628]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fae:	4b98      	ldr	r3, [pc, #608]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb4:	f023 0203 	bic.w	r2, r3, #3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbc:	4994      	ldr	r1, [pc, #592]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fd0:	4b8f      	ldr	r3, [pc, #572]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	f023 020c 	bic.w	r2, r3, #12
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fde:	498c      	ldr	r1, [pc, #560]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ff2:	4b87      	ldr	r3, [pc, #540]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	4983      	ldr	r1, [pc, #524]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004014:	4b7e      	ldr	r3, [pc, #504]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	497b      	ldr	r1, [pc, #492]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004036:	4b76      	ldr	r3, [pc, #472]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004044:	4972      	ldr	r1, [pc, #456]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004058:	4b6d      	ldr	r3, [pc, #436]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004066:	496a      	ldr	r1, [pc, #424]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800407a:	4b65      	ldr	r3, [pc, #404]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004080:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004088:	4961      	ldr	r1, [pc, #388]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800409c:	4b5c      	ldr	r3, [pc, #368]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040aa:	4959      	ldr	r1, [pc, #356]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040be:	4b54      	ldr	r3, [pc, #336]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040cc:	4950      	ldr	r1, [pc, #320]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ee:	4948      	ldr	r1, [pc, #288]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004102:	4b43      	ldr	r3, [pc, #268]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004110:	493f      	ldr	r1, [pc, #252]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d028      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004124:	4b3a      	ldr	r3, [pc, #232]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004132:	4937      	ldr	r1, [pc, #220]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800413e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004142:	d106      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004144:	4b32      	ldr	r3, [pc, #200]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a31      	ldr	r2, [pc, #196]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800414e:	60d3      	str	r3, [r2, #12]
 8004150:	e011      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004156:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800415a:	d10c      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	2101      	movs	r1, #1
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f8c8 	bl	80042f8 <RCCEx_PLLSAI1_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004172:	7cfb      	ldrb	r3, [r7, #19]
 8004174:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d028      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004182:	4b23      	ldr	r3, [pc, #140]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004188:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004190:	491f      	ldr	r1, [pc, #124]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041a0:	d106      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ac:	60d3      	str	r3, [r2, #12]
 80041ae:	e011      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	2101      	movs	r1, #1
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 f899 	bl	80042f8 <RCCEx_PLLSAI1_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ca:	7cfb      	ldrb	r3, [r7, #19]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d02b      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ee:	4908      	ldr	r1, [pc, #32]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041fe:	d109      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004200:	4b03      	ldr	r3, [pc, #12]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4a02      	ldr	r2, [pc, #8]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800420a:	60d3      	str	r3, [r2, #12]
 800420c:	e014      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004218:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800421c:	d10c      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3304      	adds	r3, #4
 8004222:	2101      	movs	r1, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f000 f867 	bl	80042f8 <RCCEx_PLLSAI1_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800422e:	7cfb      	ldrb	r3, [r7, #19]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004234:	7cfb      	ldrb	r3, [r7, #19]
 8004236:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d02f      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004244:	4b2b      	ldr	r3, [pc, #172]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004252:	4928      	ldr	r1, [pc, #160]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800425e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004262:	d10d      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	2102      	movs	r1, #2
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f844 	bl	80042f8 <RCCEx_PLLSAI1_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004274:	7cfb      	ldrb	r3, [r7, #19]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d014      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800427a:	7cfb      	ldrb	r3, [r7, #19]
 800427c:	74bb      	strb	r3, [r7, #18]
 800427e:	e011      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004288:	d10c      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3320      	adds	r3, #32
 800428e:	2102      	movs	r1, #2
 8004290:	4618      	mov	r0, r3
 8004292:	f000 f925 	bl	80044e0 <RCCEx_PLLSAI2_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800429a:	7cfb      	ldrb	r3, [r7, #19]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042b0:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042be:	490d      	ldr	r1, [pc, #52]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042d2:	4b08      	ldr	r3, [pc, #32]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042e2:	4904      	ldr	r1, [pc, #16]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000

080042f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004306:	4b75      	ldr	r3, [pc, #468]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d018      	beq.n	8004344 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004312:	4b72      	ldr	r3, [pc, #456]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0203 	and.w	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d10d      	bne.n	800433e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
       ||
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800432a:	4b6c      	ldr	r3, [pc, #432]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
       ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d047      	beq.n	80043ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	73fb      	strb	r3, [r7, #15]
 8004342:	e044      	b.n	80043ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b03      	cmp	r3, #3
 800434a:	d018      	beq.n	800437e <RCCEx_PLLSAI1_Config+0x86>
 800434c:	2b03      	cmp	r3, #3
 800434e:	d825      	bhi.n	800439c <RCCEx_PLLSAI1_Config+0xa4>
 8004350:	2b01      	cmp	r3, #1
 8004352:	d002      	beq.n	800435a <RCCEx_PLLSAI1_Config+0x62>
 8004354:	2b02      	cmp	r3, #2
 8004356:	d009      	beq.n	800436c <RCCEx_PLLSAI1_Config+0x74>
 8004358:	e020      	b.n	800439c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800435a:	4b60      	ldr	r3, [pc, #384]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d11d      	bne.n	80043a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436a:	e01a      	b.n	80043a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800436c:	4b5b      	ldr	r3, [pc, #364]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004374:	2b00      	cmp	r3, #0
 8004376:	d116      	bne.n	80043a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437c:	e013      	b.n	80043a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800437e:	4b57      	ldr	r3, [pc, #348]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10f      	bne.n	80043aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800438a:	4b54      	ldr	r3, [pc, #336]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800439a:	e006      	b.n	80043aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
      break;
 80043a0:	e004      	b.n	80043ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043a2:	bf00      	nop
 80043a4:	e002      	b.n	80043ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043a6:	bf00      	nop
 80043a8:	e000      	b.n	80043ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10d      	bne.n	80043ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043b2:	4b4a      	ldr	r3, [pc, #296]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6819      	ldr	r1, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	430b      	orrs	r3, r1
 80043c8:	4944      	ldr	r1, [pc, #272]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d17d      	bne.n	80044d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043d4:	4b41      	ldr	r3, [pc, #260]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a40      	ldr	r2, [pc, #256]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e0:	f7fd fcfa 	bl	8001dd8 <HAL_GetTick>
 80043e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043e6:	e009      	b.n	80043fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043e8:	f7fd fcf6 	bl	8001dd8 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d902      	bls.n	80043fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	73fb      	strb	r3, [r7, #15]
        break;
 80043fa:	e005      	b.n	8004408 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043fc:	4b37      	ldr	r3, [pc, #220]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1ef      	bne.n	80043e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d160      	bne.n	80044d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d111      	bne.n	8004438 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004414:	4b31      	ldr	r3, [pc, #196]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800441c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6892      	ldr	r2, [r2, #8]
 8004424:	0211      	lsls	r1, r2, #8
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68d2      	ldr	r2, [r2, #12]
 800442a:	0912      	lsrs	r2, r2, #4
 800442c:	0452      	lsls	r2, r2, #17
 800442e:	430a      	orrs	r2, r1
 8004430:	492a      	ldr	r1, [pc, #168]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004432:	4313      	orrs	r3, r2
 8004434:	610b      	str	r3, [r1, #16]
 8004436:	e027      	b.n	8004488 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d112      	bne.n	8004464 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800443e:	4b27      	ldr	r3, [pc, #156]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004446:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6892      	ldr	r2, [r2, #8]
 800444e:	0211      	lsls	r1, r2, #8
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6912      	ldr	r2, [r2, #16]
 8004454:	0852      	lsrs	r2, r2, #1
 8004456:	3a01      	subs	r2, #1
 8004458:	0552      	lsls	r2, r2, #21
 800445a:	430a      	orrs	r2, r1
 800445c:	491f      	ldr	r1, [pc, #124]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800445e:	4313      	orrs	r3, r2
 8004460:	610b      	str	r3, [r1, #16]
 8004462:	e011      	b.n	8004488 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004464:	4b1d      	ldr	r3, [pc, #116]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800446c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6892      	ldr	r2, [r2, #8]
 8004474:	0211      	lsls	r1, r2, #8
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6952      	ldr	r2, [r2, #20]
 800447a:	0852      	lsrs	r2, r2, #1
 800447c:	3a01      	subs	r2, #1
 800447e:	0652      	lsls	r2, r2, #25
 8004480:	430a      	orrs	r2, r1
 8004482:	4916      	ldr	r1, [pc, #88]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004484:	4313      	orrs	r3, r2
 8004486:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004488:	4b14      	ldr	r3, [pc, #80]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a13      	ldr	r2, [pc, #76]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800448e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004492:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fd fca0 	bl	8001dd8 <HAL_GetTick>
 8004498:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800449a:	e009      	b.n	80044b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800449c:	f7fd fc9c 	bl	8001dd8 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d902      	bls.n	80044b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	73fb      	strb	r3, [r7, #15]
          break;
 80044ae:	e005      	b.n	80044bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044b0:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0ef      	beq.n	800449c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044c2:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	4904      	ldr	r1, [pc, #16]	@ (80044dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000

080044e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d018      	beq.n	800452c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044fa:	4b67      	ldr	r3, [pc, #412]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f003 0203 	and.w	r2, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d10d      	bne.n	8004526 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
       ||
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004512:	4b61      	ldr	r3, [pc, #388]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
       ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d047      	beq.n	80045b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	73fb      	strb	r3, [r7, #15]
 800452a:	e044      	b.n	80045b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b03      	cmp	r3, #3
 8004532:	d018      	beq.n	8004566 <RCCEx_PLLSAI2_Config+0x86>
 8004534:	2b03      	cmp	r3, #3
 8004536:	d825      	bhi.n	8004584 <RCCEx_PLLSAI2_Config+0xa4>
 8004538:	2b01      	cmp	r3, #1
 800453a:	d002      	beq.n	8004542 <RCCEx_PLLSAI2_Config+0x62>
 800453c:	2b02      	cmp	r3, #2
 800453e:	d009      	beq.n	8004554 <RCCEx_PLLSAI2_Config+0x74>
 8004540:	e020      	b.n	8004584 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004542:	4b55      	ldr	r3, [pc, #340]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d11d      	bne.n	800458a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004552:	e01a      	b.n	800458a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004554:	4b50      	ldr	r3, [pc, #320]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800455c:	2b00      	cmp	r3, #0
 800455e:	d116      	bne.n	800458e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004564:	e013      	b.n	800458e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004566:	4b4c      	ldr	r3, [pc, #304]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10f      	bne.n	8004592 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004572:	4b49      	ldr	r3, [pc, #292]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004582:	e006      	b.n	8004592 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
      break;
 8004588:	e004      	b.n	8004594 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800458a:	bf00      	nop
 800458c:	e002      	b.n	8004594 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800458e:	bf00      	nop
 8004590:	e000      	b.n	8004594 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004592:	bf00      	nop
    }

    if(status == HAL_OK)
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10d      	bne.n	80045b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800459a:	4b3f      	ldr	r3, [pc, #252]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6819      	ldr	r1, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	430b      	orrs	r3, r1
 80045b0:	4939      	ldr	r1, [pc, #228]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d167      	bne.n	800468c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045bc:	4b36      	ldr	r3, [pc, #216]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a35      	ldr	r2, [pc, #212]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c8:	f7fd fc06 	bl	8001dd8 <HAL_GetTick>
 80045cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045ce:	e009      	b.n	80045e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045d0:	f7fd fc02 	bl	8001dd8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d902      	bls.n	80045e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	73fb      	strb	r3, [r7, #15]
        break;
 80045e2:	e005      	b.n	80045f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ef      	bne.n	80045d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d14a      	bne.n	800468c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d111      	bne.n	8004620 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045fc:	4b26      	ldr	r3, [pc, #152]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6892      	ldr	r2, [r2, #8]
 800460c:	0211      	lsls	r1, r2, #8
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68d2      	ldr	r2, [r2, #12]
 8004612:	0912      	lsrs	r2, r2, #4
 8004614:	0452      	lsls	r2, r2, #17
 8004616:	430a      	orrs	r2, r1
 8004618:	491f      	ldr	r1, [pc, #124]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 800461a:	4313      	orrs	r3, r2
 800461c:	614b      	str	r3, [r1, #20]
 800461e:	e011      	b.n	8004644 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004620:	4b1d      	ldr	r3, [pc, #116]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004628:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6892      	ldr	r2, [r2, #8]
 8004630:	0211      	lsls	r1, r2, #8
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6912      	ldr	r2, [r2, #16]
 8004636:	0852      	lsrs	r2, r2, #1
 8004638:	3a01      	subs	r2, #1
 800463a:	0652      	lsls	r2, r2, #25
 800463c:	430a      	orrs	r2, r1
 800463e:	4916      	ldr	r1, [pc, #88]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004640:	4313      	orrs	r3, r2
 8004642:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004644:	4b14      	ldr	r3, [pc, #80]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a13      	ldr	r2, [pc, #76]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800464e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004650:	f7fd fbc2 	bl	8001dd8 <HAL_GetTick>
 8004654:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004656:	e009      	b.n	800466c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004658:	f7fd fbbe 	bl	8001dd8 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d902      	bls.n	800466c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	73fb      	strb	r3, [r7, #15]
          break;
 800466a:	e005      	b.n	8004678 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800466c:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0ef      	beq.n	8004658 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800467e:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	4904      	ldr	r1, [pc, #16]	@ (8004698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004688:	4313      	orrs	r3, r2
 800468a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800468c:	7bfb      	ldrb	r3, [r7, #15]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40021000 	.word	0x40021000

0800469c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e049      	b.n	8004742 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fd fa3c 	bl	8001b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f000 f9d6 	bl	8004a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	d001      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e04f      	b.n	8004804 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a23      	ldr	r2, [pc, #140]	@ (8004810 <HAL_TIM_Base_Start_IT+0xc4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d01d      	beq.n	80047c2 <HAL_TIM_Base_Start_IT+0x76>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478e:	d018      	beq.n	80047c2 <HAL_TIM_Base_Start_IT+0x76>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1f      	ldr	r2, [pc, #124]	@ (8004814 <HAL_TIM_Base_Start_IT+0xc8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d013      	beq.n	80047c2 <HAL_TIM_Base_Start_IT+0x76>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1e      	ldr	r2, [pc, #120]	@ (8004818 <HAL_TIM_Base_Start_IT+0xcc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00e      	beq.n	80047c2 <HAL_TIM_Base_Start_IT+0x76>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1c      	ldr	r2, [pc, #112]	@ (800481c <HAL_TIM_Base_Start_IT+0xd0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d009      	beq.n	80047c2 <HAL_TIM_Base_Start_IT+0x76>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004820 <HAL_TIM_Base_Start_IT+0xd4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_TIM_Base_Start_IT+0x76>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a19      	ldr	r2, [pc, #100]	@ (8004824 <HAL_TIM_Base_Start_IT+0xd8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d115      	bne.n	80047ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	4b17      	ldr	r3, [pc, #92]	@ (8004828 <HAL_TIM_Base_Start_IT+0xdc>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b06      	cmp	r3, #6
 80047d2:	d015      	beq.n	8004800 <HAL_TIM_Base_Start_IT+0xb4>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047da:	d011      	beq.n	8004800 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ec:	e008      	b.n	8004800 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	e000      	b.n	8004802 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004800:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800
 800481c:	40000c00 	.word	0x40000c00
 8004820:	40013400 	.word	0x40013400
 8004824:	40014000 	.word	0x40014000
 8004828:	00010007 	.word	0x00010007

0800482c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d020      	beq.n	8004890 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01b      	beq.n	8004890 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0202 	mvn.w	r2, #2
 8004860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f8e9 	bl	8004a4e <HAL_TIM_IC_CaptureCallback>
 800487c:	e005      	b.n	800488a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f8db 	bl	8004a3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8ec 	bl	8004a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d020      	beq.n	80048dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01b      	beq.n	80048dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0204 	mvn.w	r2, #4
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f8c3 	bl	8004a4e <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f8b5 	bl	8004a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f8c6 	bl	8004a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d020      	beq.n	8004928 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01b      	beq.n	8004928 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0208 	mvn.w	r2, #8
 80048f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2204      	movs	r2, #4
 80048fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f89d 	bl	8004a4e <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f88f 	bl	8004a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f8a0 	bl	8004a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 0310 	and.w	r3, r3, #16
 800492e:	2b00      	cmp	r3, #0
 8004930:	d020      	beq.n	8004974 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0210 	mvn.w	r2, #16
 8004944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2208      	movs	r2, #8
 800494a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f877 	bl	8004a4e <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f869 	bl	8004a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f87a 	bl	8004a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00c      	beq.n	8004998 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0201 	mvn.w	r2, #1
 8004990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fc ffdc 	bl	8001950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00c      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f99b 	bl	8004cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00c      	beq.n	80049ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f993 	bl	8004d10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00c      	beq.n	8004a0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f834 	bl	8004a76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00c      	beq.n	8004a32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d007      	beq.n	8004a32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f06f 0220 	mvn.w	r2, #32
 8004a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f95b 	bl	8004ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a46      	ldr	r2, [pc, #280]	@ (8004bb8 <TIM_Base_SetConfig+0x12c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aaa:	d00f      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a43      	ldr	r2, [pc, #268]	@ (8004bbc <TIM_Base_SetConfig+0x130>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00b      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a42      	ldr	r2, [pc, #264]	@ (8004bc0 <TIM_Base_SetConfig+0x134>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d007      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a41      	ldr	r2, [pc, #260]	@ (8004bc4 <TIM_Base_SetConfig+0x138>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a40      	ldr	r2, [pc, #256]	@ (8004bc8 <TIM_Base_SetConfig+0x13c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d108      	bne.n	8004ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a35      	ldr	r2, [pc, #212]	@ (8004bb8 <TIM_Base_SetConfig+0x12c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01f      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aec:	d01b      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a32      	ldr	r2, [pc, #200]	@ (8004bbc <TIM_Base_SetConfig+0x130>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d017      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a31      	ldr	r2, [pc, #196]	@ (8004bc0 <TIM_Base_SetConfig+0x134>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a30      	ldr	r2, [pc, #192]	@ (8004bc4 <TIM_Base_SetConfig+0x138>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00f      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2f      	ldr	r2, [pc, #188]	@ (8004bc8 <TIM_Base_SetConfig+0x13c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00b      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2e      	ldr	r2, [pc, #184]	@ (8004bcc <TIM_Base_SetConfig+0x140>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a2d      	ldr	r2, [pc, #180]	@ (8004bd0 <TIM_Base_SetConfig+0x144>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd4 <TIM_Base_SetConfig+0x148>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d108      	bne.n	8004b38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a16      	ldr	r2, [pc, #88]	@ (8004bb8 <TIM_Base_SetConfig+0x12c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00f      	beq.n	8004b84 <TIM_Base_SetConfig+0xf8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a18      	ldr	r2, [pc, #96]	@ (8004bc8 <TIM_Base_SetConfig+0x13c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00b      	beq.n	8004b84 <TIM_Base_SetConfig+0xf8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a17      	ldr	r2, [pc, #92]	@ (8004bcc <TIM_Base_SetConfig+0x140>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d007      	beq.n	8004b84 <TIM_Base_SetConfig+0xf8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a16      	ldr	r2, [pc, #88]	@ (8004bd0 <TIM_Base_SetConfig+0x144>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_Base_SetConfig+0xf8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a15      	ldr	r2, [pc, #84]	@ (8004bd4 <TIM_Base_SetConfig+0x148>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d103      	bne.n	8004b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d105      	bne.n	8004baa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f023 0201 	bic.w	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	611a      	str	r2, [r3, #16]
  }
}
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	40000c00 	.word	0x40000c00
 8004bc8:	40013400 	.word	0x40013400
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40014400 	.word	0x40014400
 8004bd4:	40014800 	.word	0x40014800

08004bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e068      	b.n	8004cc2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a2e      	ldr	r2, [pc, #184]	@ (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d108      	bne.n	8004c36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d01d      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c62:	d018      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1a      	ldr	r2, [pc, #104]	@ (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a18      	ldr	r2, [pc, #96]	@ (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d009      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a13      	ldr	r2, [pc, #76]	@ (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a14      	ldr	r2, [pc, #80]	@ (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10c      	bne.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40012c00 	.word	0x40012c00
 8004cd4:	40013400 	.word	0x40013400
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40000800 	.word	0x40000800
 8004ce0:	40000c00 	.word	0x40000c00
 8004ce4:	40014000 	.word	0x40014000

08004ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e040      	b.n	8004db8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fc ff50 	bl	8001bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2224      	movs	r2, #36	@ 0x24
 8004d50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fb6a 	bl	8005444 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f8af 	bl	8004ed4 <UART_SetConfig>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e01b      	b.n	8004db8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fbe9 	bl	8005588 <UART_CheckIdleState>
 8004db6:	4603      	mov	r3, r0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08a      	sub	sp, #40	@ 0x28
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d177      	bne.n	8004ec8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_UART_Transmit+0x24>
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e070      	b.n	8004eca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2221      	movs	r2, #33	@ 0x21
 8004df4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004df6:	f7fc ffef 	bl	8001dd8 <HAL_GetTick>
 8004dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	88fa      	ldrh	r2, [r7, #6]
 8004e00:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	88fa      	ldrh	r2, [r7, #6]
 8004e08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e14:	d108      	bne.n	8004e28 <HAL_UART_Transmit+0x68>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d104      	bne.n	8004e28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	e003      	b.n	8004e30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e30:	e02f      	b.n	8004e92 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2180      	movs	r1, #128	@ 0x80
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fc4b 	bl	80056d8 <UART_WaitOnFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d004      	beq.n	8004e52 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e03b      	b.n	8004eca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10b      	bne.n	8004e70 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	881a      	ldrh	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e64:	b292      	uxth	r2, r2
 8004e66:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	e007      	b.n	8004e80 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	781a      	ldrb	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1c9      	bne.n	8004e32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2140      	movs	r1, #64	@ 0x40
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 fc15 	bl	80056d8 <UART_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e005      	b.n	8004eca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e000      	b.n	8004eca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004ec8:	2302      	movs	r3, #2
  }
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3720      	adds	r7, #32
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed8:	b08a      	sub	sp, #40	@ 0x28
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	4ba4      	ldr	r3, [pc, #656]	@ (8005194 <UART_SetConfig+0x2c0>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a99      	ldr	r2, [pc, #612]	@ (8005198 <UART_SetConfig+0x2c4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d004      	beq.n	8004f40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f50:	430a      	orrs	r2, r1
 8004f52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a90      	ldr	r2, [pc, #576]	@ (800519c <UART_SetConfig+0x2c8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d126      	bne.n	8004fac <UART_SetConfig+0xd8>
 8004f5e:	4b90      	ldr	r3, [pc, #576]	@ (80051a0 <UART_SetConfig+0x2cc>)
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d81b      	bhi.n	8004fa4 <UART_SetConfig+0xd0>
 8004f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f74 <UART_SetConfig+0xa0>)
 8004f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f72:	bf00      	nop
 8004f74:	08004f85 	.word	0x08004f85
 8004f78:	08004f95 	.word	0x08004f95
 8004f7c:	08004f8d 	.word	0x08004f8d
 8004f80:	08004f9d 	.word	0x08004f9d
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8a:	e116      	b.n	80051ba <UART_SetConfig+0x2e6>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f92:	e112      	b.n	80051ba <UART_SetConfig+0x2e6>
 8004f94:	2304      	movs	r3, #4
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9a:	e10e      	b.n	80051ba <UART_SetConfig+0x2e6>
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa2:	e10a      	b.n	80051ba <UART_SetConfig+0x2e6>
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004faa:	e106      	b.n	80051ba <UART_SetConfig+0x2e6>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a7c      	ldr	r2, [pc, #496]	@ (80051a4 <UART_SetConfig+0x2d0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d138      	bne.n	8005028 <UART_SetConfig+0x154>
 8004fb6:	4b7a      	ldr	r3, [pc, #488]	@ (80051a0 <UART_SetConfig+0x2cc>)
 8004fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fbc:	f003 030c 	and.w	r3, r3, #12
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d82d      	bhi.n	8005020 <UART_SetConfig+0x14c>
 8004fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <UART_SetConfig+0xf8>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08005001 	.word	0x08005001
 8004fd0:	08005021 	.word	0x08005021
 8004fd4:	08005021 	.word	0x08005021
 8004fd8:	08005021 	.word	0x08005021
 8004fdc:	08005011 	.word	0x08005011
 8004fe0:	08005021 	.word	0x08005021
 8004fe4:	08005021 	.word	0x08005021
 8004fe8:	08005021 	.word	0x08005021
 8004fec:	08005009 	.word	0x08005009
 8004ff0:	08005021 	.word	0x08005021
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005019 	.word	0x08005019
 8005000:	2300      	movs	r3, #0
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005006:	e0d8      	b.n	80051ba <UART_SetConfig+0x2e6>
 8005008:	2302      	movs	r3, #2
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800500e:	e0d4      	b.n	80051ba <UART_SetConfig+0x2e6>
 8005010:	2304      	movs	r3, #4
 8005012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005016:	e0d0      	b.n	80051ba <UART_SetConfig+0x2e6>
 8005018:	2308      	movs	r3, #8
 800501a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501e:	e0cc      	b.n	80051ba <UART_SetConfig+0x2e6>
 8005020:	2310      	movs	r3, #16
 8005022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005026:	e0c8      	b.n	80051ba <UART_SetConfig+0x2e6>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a5e      	ldr	r2, [pc, #376]	@ (80051a8 <UART_SetConfig+0x2d4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d125      	bne.n	800507e <UART_SetConfig+0x1aa>
 8005032:	4b5b      	ldr	r3, [pc, #364]	@ (80051a0 <UART_SetConfig+0x2cc>)
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005038:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800503c:	2b30      	cmp	r3, #48	@ 0x30
 800503e:	d016      	beq.n	800506e <UART_SetConfig+0x19a>
 8005040:	2b30      	cmp	r3, #48	@ 0x30
 8005042:	d818      	bhi.n	8005076 <UART_SetConfig+0x1a2>
 8005044:	2b20      	cmp	r3, #32
 8005046:	d00a      	beq.n	800505e <UART_SetConfig+0x18a>
 8005048:	2b20      	cmp	r3, #32
 800504a:	d814      	bhi.n	8005076 <UART_SetConfig+0x1a2>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <UART_SetConfig+0x182>
 8005050:	2b10      	cmp	r3, #16
 8005052:	d008      	beq.n	8005066 <UART_SetConfig+0x192>
 8005054:	e00f      	b.n	8005076 <UART_SetConfig+0x1a2>
 8005056:	2300      	movs	r3, #0
 8005058:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800505c:	e0ad      	b.n	80051ba <UART_SetConfig+0x2e6>
 800505e:	2302      	movs	r3, #2
 8005060:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005064:	e0a9      	b.n	80051ba <UART_SetConfig+0x2e6>
 8005066:	2304      	movs	r3, #4
 8005068:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800506c:	e0a5      	b.n	80051ba <UART_SetConfig+0x2e6>
 800506e:	2308      	movs	r3, #8
 8005070:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005074:	e0a1      	b.n	80051ba <UART_SetConfig+0x2e6>
 8005076:	2310      	movs	r3, #16
 8005078:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507c:	e09d      	b.n	80051ba <UART_SetConfig+0x2e6>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a4a      	ldr	r2, [pc, #296]	@ (80051ac <UART_SetConfig+0x2d8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d125      	bne.n	80050d4 <UART_SetConfig+0x200>
 8005088:	4b45      	ldr	r3, [pc, #276]	@ (80051a0 <UART_SetConfig+0x2cc>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800508e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005092:	2bc0      	cmp	r3, #192	@ 0xc0
 8005094:	d016      	beq.n	80050c4 <UART_SetConfig+0x1f0>
 8005096:	2bc0      	cmp	r3, #192	@ 0xc0
 8005098:	d818      	bhi.n	80050cc <UART_SetConfig+0x1f8>
 800509a:	2b80      	cmp	r3, #128	@ 0x80
 800509c:	d00a      	beq.n	80050b4 <UART_SetConfig+0x1e0>
 800509e:	2b80      	cmp	r3, #128	@ 0x80
 80050a0:	d814      	bhi.n	80050cc <UART_SetConfig+0x1f8>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <UART_SetConfig+0x1d8>
 80050a6:	2b40      	cmp	r3, #64	@ 0x40
 80050a8:	d008      	beq.n	80050bc <UART_SetConfig+0x1e8>
 80050aa:	e00f      	b.n	80050cc <UART_SetConfig+0x1f8>
 80050ac:	2300      	movs	r3, #0
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050b2:	e082      	b.n	80051ba <UART_SetConfig+0x2e6>
 80050b4:	2302      	movs	r3, #2
 80050b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ba:	e07e      	b.n	80051ba <UART_SetConfig+0x2e6>
 80050bc:	2304      	movs	r3, #4
 80050be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050c2:	e07a      	b.n	80051ba <UART_SetConfig+0x2e6>
 80050c4:	2308      	movs	r3, #8
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ca:	e076      	b.n	80051ba <UART_SetConfig+0x2e6>
 80050cc:	2310      	movs	r3, #16
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d2:	e072      	b.n	80051ba <UART_SetConfig+0x2e6>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a35      	ldr	r2, [pc, #212]	@ (80051b0 <UART_SetConfig+0x2dc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d12a      	bne.n	8005134 <UART_SetConfig+0x260>
 80050de:	4b30      	ldr	r3, [pc, #192]	@ (80051a0 <UART_SetConfig+0x2cc>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050ec:	d01a      	beq.n	8005124 <UART_SetConfig+0x250>
 80050ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050f2:	d81b      	bhi.n	800512c <UART_SetConfig+0x258>
 80050f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050f8:	d00c      	beq.n	8005114 <UART_SetConfig+0x240>
 80050fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050fe:	d815      	bhi.n	800512c <UART_SetConfig+0x258>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <UART_SetConfig+0x238>
 8005104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005108:	d008      	beq.n	800511c <UART_SetConfig+0x248>
 800510a:	e00f      	b.n	800512c <UART_SetConfig+0x258>
 800510c:	2300      	movs	r3, #0
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005112:	e052      	b.n	80051ba <UART_SetConfig+0x2e6>
 8005114:	2302      	movs	r3, #2
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800511a:	e04e      	b.n	80051ba <UART_SetConfig+0x2e6>
 800511c:	2304      	movs	r3, #4
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005122:	e04a      	b.n	80051ba <UART_SetConfig+0x2e6>
 8005124:	2308      	movs	r3, #8
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800512a:	e046      	b.n	80051ba <UART_SetConfig+0x2e6>
 800512c:	2310      	movs	r3, #16
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005132:	e042      	b.n	80051ba <UART_SetConfig+0x2e6>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a17      	ldr	r2, [pc, #92]	@ (8005198 <UART_SetConfig+0x2c4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d13a      	bne.n	80051b4 <UART_SetConfig+0x2e0>
 800513e:	4b18      	ldr	r3, [pc, #96]	@ (80051a0 <UART_SetConfig+0x2cc>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005144:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005148:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800514c:	d01a      	beq.n	8005184 <UART_SetConfig+0x2b0>
 800514e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005152:	d81b      	bhi.n	800518c <UART_SetConfig+0x2b8>
 8005154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005158:	d00c      	beq.n	8005174 <UART_SetConfig+0x2a0>
 800515a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800515e:	d815      	bhi.n	800518c <UART_SetConfig+0x2b8>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <UART_SetConfig+0x298>
 8005164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005168:	d008      	beq.n	800517c <UART_SetConfig+0x2a8>
 800516a:	e00f      	b.n	800518c <UART_SetConfig+0x2b8>
 800516c:	2300      	movs	r3, #0
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005172:	e022      	b.n	80051ba <UART_SetConfig+0x2e6>
 8005174:	2302      	movs	r3, #2
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800517a:	e01e      	b.n	80051ba <UART_SetConfig+0x2e6>
 800517c:	2304      	movs	r3, #4
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005182:	e01a      	b.n	80051ba <UART_SetConfig+0x2e6>
 8005184:	2308      	movs	r3, #8
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800518a:	e016      	b.n	80051ba <UART_SetConfig+0x2e6>
 800518c:	2310      	movs	r3, #16
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005192:	e012      	b.n	80051ba <UART_SetConfig+0x2e6>
 8005194:	efff69f3 	.word	0xefff69f3
 8005198:	40008000 	.word	0x40008000
 800519c:	40013800 	.word	0x40013800
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40004400 	.word	0x40004400
 80051a8:	40004800 	.word	0x40004800
 80051ac:	40004c00 	.word	0x40004c00
 80051b0:	40005000 	.word	0x40005000
 80051b4:	2310      	movs	r3, #16
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a9f      	ldr	r2, [pc, #636]	@ (800543c <UART_SetConfig+0x568>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d17a      	bne.n	80052ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d824      	bhi.n	8005216 <UART_SetConfig+0x342>
 80051cc:	a201      	add	r2, pc, #4	@ (adr r2, 80051d4 <UART_SetConfig+0x300>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	080051f9 	.word	0x080051f9
 80051d8:	08005217 	.word	0x08005217
 80051dc:	08005201 	.word	0x08005201
 80051e0:	08005217 	.word	0x08005217
 80051e4:	08005207 	.word	0x08005207
 80051e8:	08005217 	.word	0x08005217
 80051ec:	08005217 	.word	0x08005217
 80051f0:	08005217 	.word	0x08005217
 80051f4:	0800520f 	.word	0x0800520f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f8:	f7fe fd08 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 80051fc:	61f8      	str	r0, [r7, #28]
        break;
 80051fe:	e010      	b.n	8005222 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005200:	4b8f      	ldr	r3, [pc, #572]	@ (8005440 <UART_SetConfig+0x56c>)
 8005202:	61fb      	str	r3, [r7, #28]
        break;
 8005204:	e00d      	b.n	8005222 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005206:	f7fe fc69 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 800520a:	61f8      	str	r0, [r7, #28]
        break;
 800520c:	e009      	b.n	8005222 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005212:	61fb      	str	r3, [r7, #28]
        break;
 8005214:	e005      	b.n	8005222 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005220:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80fb 	beq.w	8005420 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	4413      	add	r3, r2
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	429a      	cmp	r2, r3
 8005238:	d305      	bcc.n	8005246 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	429a      	cmp	r2, r3
 8005244:	d903      	bls.n	800524e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800524c:	e0e8      	b.n	8005420 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2200      	movs	r2, #0
 8005252:	461c      	mov	r4, r3
 8005254:	4615      	mov	r5, r2
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	022b      	lsls	r3, r5, #8
 8005260:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005264:	0222      	lsls	r2, r4, #8
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	6849      	ldr	r1, [r1, #4]
 800526a:	0849      	lsrs	r1, r1, #1
 800526c:	2000      	movs	r0, #0
 800526e:	4688      	mov	r8, r1
 8005270:	4681      	mov	r9, r0
 8005272:	eb12 0a08 	adds.w	sl, r2, r8
 8005276:	eb43 0b09 	adc.w	fp, r3, r9
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	603b      	str	r3, [r7, #0]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005288:	4650      	mov	r0, sl
 800528a:	4659      	mov	r1, fp
 800528c:	f7fb fcdc 	bl	8000c48 <__aeabi_uldivmod>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4613      	mov	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800529e:	d308      	bcc.n	80052b2 <UART_SetConfig+0x3de>
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052a6:	d204      	bcs.n	80052b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	60da      	str	r2, [r3, #12]
 80052b0:	e0b6      	b.n	8005420 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052b8:	e0b2      	b.n	8005420 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052c2:	d15e      	bne.n	8005382 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80052c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d828      	bhi.n	800531e <UART_SetConfig+0x44a>
 80052cc:	a201      	add	r2, pc, #4	@ (adr r2, 80052d4 <UART_SetConfig+0x400>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	080052f9 	.word	0x080052f9
 80052d8:	08005301 	.word	0x08005301
 80052dc:	08005309 	.word	0x08005309
 80052e0:	0800531f 	.word	0x0800531f
 80052e4:	0800530f 	.word	0x0800530f
 80052e8:	0800531f 	.word	0x0800531f
 80052ec:	0800531f 	.word	0x0800531f
 80052f0:	0800531f 	.word	0x0800531f
 80052f4:	08005317 	.word	0x08005317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f8:	f7fe fc88 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 80052fc:	61f8      	str	r0, [r7, #28]
        break;
 80052fe:	e014      	b.n	800532a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005300:	f7fe fc9a 	bl	8003c38 <HAL_RCC_GetPCLK2Freq>
 8005304:	61f8      	str	r0, [r7, #28]
        break;
 8005306:	e010      	b.n	800532a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005308:	4b4d      	ldr	r3, [pc, #308]	@ (8005440 <UART_SetConfig+0x56c>)
 800530a:	61fb      	str	r3, [r7, #28]
        break;
 800530c:	e00d      	b.n	800532a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800530e:	f7fe fbe5 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8005312:	61f8      	str	r0, [r7, #28]
        break;
 8005314:	e009      	b.n	800532a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800531a:	61fb      	str	r3, [r7, #28]
        break;
 800531c:	e005      	b.n	800532a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d077      	beq.n	8005420 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	005a      	lsls	r2, r3, #1
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	085b      	lsrs	r3, r3, #1
 800533a:	441a      	add	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	fbb2 f3f3 	udiv	r3, r2, r3
 8005344:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b0f      	cmp	r3, #15
 800534a:	d916      	bls.n	800537a <UART_SetConfig+0x4a6>
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005352:	d212      	bcs.n	800537a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f023 030f 	bic.w	r3, r3, #15
 800535c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	085b      	lsrs	r3, r3, #1
 8005362:	b29b      	uxth	r3, r3
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	b29a      	uxth	r2, r3
 800536a:	8afb      	ldrh	r3, [r7, #22]
 800536c:	4313      	orrs	r3, r2
 800536e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	8afa      	ldrh	r2, [r7, #22]
 8005376:	60da      	str	r2, [r3, #12]
 8005378:	e052      	b.n	8005420 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005380:	e04e      	b.n	8005420 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005382:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005386:	2b08      	cmp	r3, #8
 8005388:	d827      	bhi.n	80053da <UART_SetConfig+0x506>
 800538a:	a201      	add	r2, pc, #4	@ (adr r2, 8005390 <UART_SetConfig+0x4bc>)
 800538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c5 	.word	0x080053c5
 800539c:	080053db 	.word	0x080053db
 80053a0:	080053cb 	.word	0x080053cb
 80053a4:	080053db 	.word	0x080053db
 80053a8:	080053db 	.word	0x080053db
 80053ac:	080053db 	.word	0x080053db
 80053b0:	080053d3 	.word	0x080053d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7fe fc2a 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 80053b8:	61f8      	str	r0, [r7, #28]
        break;
 80053ba:	e014      	b.n	80053e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053bc:	f7fe fc3c 	bl	8003c38 <HAL_RCC_GetPCLK2Freq>
 80053c0:	61f8      	str	r0, [r7, #28]
        break;
 80053c2:	e010      	b.n	80053e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005440 <UART_SetConfig+0x56c>)
 80053c6:	61fb      	str	r3, [r7, #28]
        break;
 80053c8:	e00d      	b.n	80053e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ca:	f7fe fb87 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 80053ce:	61f8      	str	r0, [r7, #28]
        break;
 80053d0:	e009      	b.n	80053e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053d6:	61fb      	str	r3, [r7, #28]
        break;
 80053d8:	e005      	b.n	80053e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80053e4:	bf00      	nop
    }

    if (pclk != 0U)
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d019      	beq.n	8005420 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	085a      	lsrs	r2, r3, #1
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	441a      	add	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	2b0f      	cmp	r3, #15
 8005404:	d909      	bls.n	800541a <UART_SetConfig+0x546>
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800540c:	d205      	bcs.n	800541a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60da      	str	r2, [r3, #12]
 8005418:	e002      	b.n	8005420 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800542c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005430:	4618      	mov	r0, r3
 8005432:	3728      	adds	r7, #40	@ 0x28
 8005434:	46bd      	mov	sp, r7
 8005436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800543a:	bf00      	nop
 800543c:	40008000 	.word	0x40008000
 8005440:	00f42400 	.word	0x00f42400

08005444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01a      	beq.n	800555a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005542:	d10a      	bne.n	800555a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b098      	sub	sp, #96	@ 0x60
 800558c:	af02      	add	r7, sp, #8
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005598:	f7fc fc1e 	bl	8001dd8 <HAL_GetTick>
 800559c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d12e      	bne.n	800560a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055b4:	2200      	movs	r2, #0
 80055b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f88c 	bl	80056d8 <UART_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d021      	beq.n	800560a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055da:	653b      	str	r3, [r7, #80]	@ 0x50
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	461a      	mov	r2, r3
 80055e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e6      	bne.n	80055c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e062      	b.n	80056d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b04      	cmp	r3, #4
 8005616:	d149      	bne.n	80056ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005618:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005620:	2200      	movs	r2, #0
 8005622:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f856 	bl	80056d8 <UART_WaitOnFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d03c      	beq.n	80056ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	623b      	str	r3, [r7, #32]
   return(result);
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005650:	633b      	str	r3, [r7, #48]	@ 0x30
 8005652:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800565e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e6      	bne.n	8005632 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3308      	adds	r3, #8
 800566a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	60fb      	str	r3, [r7, #12]
   return(result);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3308      	adds	r3, #8
 8005682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005684:	61fa      	str	r2, [r7, #28]
 8005686:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	69b9      	ldr	r1, [r7, #24]
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	617b      	str	r3, [r7, #20]
   return(result);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e5      	bne.n	8005664 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e011      	b.n	80056d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3758      	adds	r7, #88	@ 0x58
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	4613      	mov	r3, r2
 80056e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e8:	e04f      	b.n	800578a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d04b      	beq.n	800578a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f2:	f7fc fb71 	bl	8001dd8 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d302      	bcc.n	8005708 <UART_WaitOnFlagUntilTimeout+0x30>
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e04e      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	d037      	beq.n	800578a <UART_WaitOnFlagUntilTimeout+0xb2>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b80      	cmp	r3, #128	@ 0x80
 800571e:	d034      	beq.n	800578a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b40      	cmp	r3, #64	@ 0x40
 8005724:	d031      	beq.n	800578a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b08      	cmp	r3, #8
 8005732:	d110      	bne.n	8005756 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2208      	movs	r2, #8
 800573a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f838 	bl	80057b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2208      	movs	r2, #8
 8005746:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e029      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005764:	d111      	bne.n	800578a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800576e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f81e 	bl	80057b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e00f      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4013      	ands	r3, r2
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	429a      	cmp	r2, r3
 8005798:	bf0c      	ite	eq
 800579a:	2301      	moveq	r3, #1
 800579c:	2300      	movne	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d0a0      	beq.n	80056ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b095      	sub	sp, #84	@ 0x54
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80057da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e6      	bne.n	80057ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3308      	adds	r3, #8
 80057f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f023 0301 	bic.w	r3, r3, #1
 8005802:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3308      	adds	r3, #8
 800580a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800580c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800580e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005812:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e5      	bne.n	80057ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005824:	2b01      	cmp	r3, #1
 8005826:	d118      	bne.n	800585a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	60bb      	str	r3, [r7, #8]
   return(result);
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f023 0310 	bic.w	r3, r3, #16
 800583c:	647b      	str	r3, [r7, #68]	@ 0x44
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6979      	ldr	r1, [r7, #20]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	613b      	str	r3, [r7, #16]
   return(result);
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e6      	bne.n	8005828 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800586e:	bf00      	nop
 8005870:	3754      	adds	r7, #84	@ 0x54
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <sniprintf>:
 800587c:	b40c      	push	{r2, r3}
 800587e:	b530      	push	{r4, r5, lr}
 8005880:	4b17      	ldr	r3, [pc, #92]	@ (80058e0 <sniprintf+0x64>)
 8005882:	1e0c      	subs	r4, r1, #0
 8005884:	681d      	ldr	r5, [r3, #0]
 8005886:	b09d      	sub	sp, #116	@ 0x74
 8005888:	da08      	bge.n	800589c <sniprintf+0x20>
 800588a:	238b      	movs	r3, #139	@ 0x8b
 800588c:	602b      	str	r3, [r5, #0]
 800588e:	f04f 30ff 	mov.w	r0, #4294967295
 8005892:	b01d      	add	sp, #116	@ 0x74
 8005894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005898:	b002      	add	sp, #8
 800589a:	4770      	bx	lr
 800589c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80058a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80058a4:	bf14      	ite	ne
 80058a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80058aa:	4623      	moveq	r3, r4
 80058ac:	9304      	str	r3, [sp, #16]
 80058ae:	9307      	str	r3, [sp, #28]
 80058b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80058b4:	9002      	str	r0, [sp, #8]
 80058b6:	9006      	str	r0, [sp, #24]
 80058b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80058bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80058be:	ab21      	add	r3, sp, #132	@ 0x84
 80058c0:	a902      	add	r1, sp, #8
 80058c2:	4628      	mov	r0, r5
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	f000 f995 	bl	8005bf4 <_svfiprintf_r>
 80058ca:	1c43      	adds	r3, r0, #1
 80058cc:	bfbc      	itt	lt
 80058ce:	238b      	movlt	r3, #139	@ 0x8b
 80058d0:	602b      	strlt	r3, [r5, #0]
 80058d2:	2c00      	cmp	r4, #0
 80058d4:	d0dd      	beq.n	8005892 <sniprintf+0x16>
 80058d6:	9b02      	ldr	r3, [sp, #8]
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	e7d9      	b.n	8005892 <sniprintf+0x16>
 80058de:	bf00      	nop
 80058e0:	2000000c 	.word	0x2000000c

080058e4 <memset>:
 80058e4:	4402      	add	r2, r0
 80058e6:	4603      	mov	r3, r0
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d100      	bne.n	80058ee <memset+0xa>
 80058ec:	4770      	bx	lr
 80058ee:	f803 1b01 	strb.w	r1, [r3], #1
 80058f2:	e7f9      	b.n	80058e8 <memset+0x4>

080058f4 <__errno>:
 80058f4:	4b01      	ldr	r3, [pc, #4]	@ (80058fc <__errno+0x8>)
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	2000000c 	.word	0x2000000c

08005900 <__libc_init_array>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	4d0d      	ldr	r5, [pc, #52]	@ (8005938 <__libc_init_array+0x38>)
 8005904:	4c0d      	ldr	r4, [pc, #52]	@ (800593c <__libc_init_array+0x3c>)
 8005906:	1b64      	subs	r4, r4, r5
 8005908:	10a4      	asrs	r4, r4, #2
 800590a:	2600      	movs	r6, #0
 800590c:	42a6      	cmp	r6, r4
 800590e:	d109      	bne.n	8005924 <__libc_init_array+0x24>
 8005910:	4d0b      	ldr	r5, [pc, #44]	@ (8005940 <__libc_init_array+0x40>)
 8005912:	4c0c      	ldr	r4, [pc, #48]	@ (8005944 <__libc_init_array+0x44>)
 8005914:	f001 fbc6 	bl	80070a4 <_init>
 8005918:	1b64      	subs	r4, r4, r5
 800591a:	10a4      	asrs	r4, r4, #2
 800591c:	2600      	movs	r6, #0
 800591e:	42a6      	cmp	r6, r4
 8005920:	d105      	bne.n	800592e <__libc_init_array+0x2e>
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	f855 3b04 	ldr.w	r3, [r5], #4
 8005928:	4798      	blx	r3
 800592a:	3601      	adds	r6, #1
 800592c:	e7ee      	b.n	800590c <__libc_init_array+0xc>
 800592e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005932:	4798      	blx	r3
 8005934:	3601      	adds	r6, #1
 8005936:	e7f2      	b.n	800591e <__libc_init_array+0x1e>
 8005938:	080071e0 	.word	0x080071e0
 800593c:	080071e0 	.word	0x080071e0
 8005940:	080071e0 	.word	0x080071e0
 8005944:	080071e4 	.word	0x080071e4

08005948 <__retarget_lock_acquire_recursive>:
 8005948:	4770      	bx	lr

0800594a <__retarget_lock_release_recursive>:
 800594a:	4770      	bx	lr

0800594c <_free_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4605      	mov	r5, r0
 8005950:	2900      	cmp	r1, #0
 8005952:	d041      	beq.n	80059d8 <_free_r+0x8c>
 8005954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005958:	1f0c      	subs	r4, r1, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	bfb8      	it	lt
 800595e:	18e4      	addlt	r4, r4, r3
 8005960:	f000 f8e0 	bl	8005b24 <__malloc_lock>
 8005964:	4a1d      	ldr	r2, [pc, #116]	@ (80059dc <_free_r+0x90>)
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	b933      	cbnz	r3, 8005978 <_free_r+0x2c>
 800596a:	6063      	str	r3, [r4, #4]
 800596c:	6014      	str	r4, [r2, #0]
 800596e:	4628      	mov	r0, r5
 8005970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005974:	f000 b8dc 	b.w	8005b30 <__malloc_unlock>
 8005978:	42a3      	cmp	r3, r4
 800597a:	d908      	bls.n	800598e <_free_r+0x42>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	1821      	adds	r1, r4, r0
 8005980:	428b      	cmp	r3, r1
 8005982:	bf01      	itttt	eq
 8005984:	6819      	ldreq	r1, [r3, #0]
 8005986:	685b      	ldreq	r3, [r3, #4]
 8005988:	1809      	addeq	r1, r1, r0
 800598a:	6021      	streq	r1, [r4, #0]
 800598c:	e7ed      	b.n	800596a <_free_r+0x1e>
 800598e:	461a      	mov	r2, r3
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	b10b      	cbz	r3, 8005998 <_free_r+0x4c>
 8005994:	42a3      	cmp	r3, r4
 8005996:	d9fa      	bls.n	800598e <_free_r+0x42>
 8005998:	6811      	ldr	r1, [r2, #0]
 800599a:	1850      	adds	r0, r2, r1
 800599c:	42a0      	cmp	r0, r4
 800599e:	d10b      	bne.n	80059b8 <_free_r+0x6c>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	4401      	add	r1, r0
 80059a4:	1850      	adds	r0, r2, r1
 80059a6:	4283      	cmp	r3, r0
 80059a8:	6011      	str	r1, [r2, #0]
 80059aa:	d1e0      	bne.n	800596e <_free_r+0x22>
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	6053      	str	r3, [r2, #4]
 80059b2:	4408      	add	r0, r1
 80059b4:	6010      	str	r0, [r2, #0]
 80059b6:	e7da      	b.n	800596e <_free_r+0x22>
 80059b8:	d902      	bls.n	80059c0 <_free_r+0x74>
 80059ba:	230c      	movs	r3, #12
 80059bc:	602b      	str	r3, [r5, #0]
 80059be:	e7d6      	b.n	800596e <_free_r+0x22>
 80059c0:	6820      	ldr	r0, [r4, #0]
 80059c2:	1821      	adds	r1, r4, r0
 80059c4:	428b      	cmp	r3, r1
 80059c6:	bf04      	itt	eq
 80059c8:	6819      	ldreq	r1, [r3, #0]
 80059ca:	685b      	ldreq	r3, [r3, #4]
 80059cc:	6063      	str	r3, [r4, #4]
 80059ce:	bf04      	itt	eq
 80059d0:	1809      	addeq	r1, r1, r0
 80059d2:	6021      	streq	r1, [r4, #0]
 80059d4:	6054      	str	r4, [r2, #4]
 80059d6:	e7ca      	b.n	800596e <_free_r+0x22>
 80059d8:	bd38      	pop	{r3, r4, r5, pc}
 80059da:	bf00      	nop
 80059dc:	200003fc 	.word	0x200003fc

080059e0 <sbrk_aligned>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	4e0f      	ldr	r6, [pc, #60]	@ (8005a20 <sbrk_aligned+0x40>)
 80059e4:	460c      	mov	r4, r1
 80059e6:	6831      	ldr	r1, [r6, #0]
 80059e8:	4605      	mov	r5, r0
 80059ea:	b911      	cbnz	r1, 80059f2 <sbrk_aligned+0x12>
 80059ec:	f000 fba6 	bl	800613c <_sbrk_r>
 80059f0:	6030      	str	r0, [r6, #0]
 80059f2:	4621      	mov	r1, r4
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 fba1 	bl	800613c <_sbrk_r>
 80059fa:	1c43      	adds	r3, r0, #1
 80059fc:	d103      	bne.n	8005a06 <sbrk_aligned+0x26>
 80059fe:	f04f 34ff 	mov.w	r4, #4294967295
 8005a02:	4620      	mov	r0, r4
 8005a04:	bd70      	pop	{r4, r5, r6, pc}
 8005a06:	1cc4      	adds	r4, r0, #3
 8005a08:	f024 0403 	bic.w	r4, r4, #3
 8005a0c:	42a0      	cmp	r0, r4
 8005a0e:	d0f8      	beq.n	8005a02 <sbrk_aligned+0x22>
 8005a10:	1a21      	subs	r1, r4, r0
 8005a12:	4628      	mov	r0, r5
 8005a14:	f000 fb92 	bl	800613c <_sbrk_r>
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d1f2      	bne.n	8005a02 <sbrk_aligned+0x22>
 8005a1c:	e7ef      	b.n	80059fe <sbrk_aligned+0x1e>
 8005a1e:	bf00      	nop
 8005a20:	200003f8 	.word	0x200003f8

08005a24 <_malloc_r>:
 8005a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a28:	1ccd      	adds	r5, r1, #3
 8005a2a:	f025 0503 	bic.w	r5, r5, #3
 8005a2e:	3508      	adds	r5, #8
 8005a30:	2d0c      	cmp	r5, #12
 8005a32:	bf38      	it	cc
 8005a34:	250c      	movcc	r5, #12
 8005a36:	2d00      	cmp	r5, #0
 8005a38:	4606      	mov	r6, r0
 8005a3a:	db01      	blt.n	8005a40 <_malloc_r+0x1c>
 8005a3c:	42a9      	cmp	r1, r5
 8005a3e:	d904      	bls.n	8005a4a <_malloc_r+0x26>
 8005a40:	230c      	movs	r3, #12
 8005a42:	6033      	str	r3, [r6, #0]
 8005a44:	2000      	movs	r0, #0
 8005a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b20 <_malloc_r+0xfc>
 8005a4e:	f000 f869 	bl	8005b24 <__malloc_lock>
 8005a52:	f8d8 3000 	ldr.w	r3, [r8]
 8005a56:	461c      	mov	r4, r3
 8005a58:	bb44      	cbnz	r4, 8005aac <_malloc_r+0x88>
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f7ff ffbf 	bl	80059e0 <sbrk_aligned>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	4604      	mov	r4, r0
 8005a66:	d158      	bne.n	8005b1a <_malloc_r+0xf6>
 8005a68:	f8d8 4000 	ldr.w	r4, [r8]
 8005a6c:	4627      	mov	r7, r4
 8005a6e:	2f00      	cmp	r7, #0
 8005a70:	d143      	bne.n	8005afa <_malloc_r+0xd6>
 8005a72:	2c00      	cmp	r4, #0
 8005a74:	d04b      	beq.n	8005b0e <_malloc_r+0xea>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	4639      	mov	r1, r7
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	eb04 0903 	add.w	r9, r4, r3
 8005a80:	f000 fb5c 	bl	800613c <_sbrk_r>
 8005a84:	4581      	cmp	r9, r0
 8005a86:	d142      	bne.n	8005b0e <_malloc_r+0xea>
 8005a88:	6821      	ldr	r1, [r4, #0]
 8005a8a:	1a6d      	subs	r5, r5, r1
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f7ff ffa6 	bl	80059e0 <sbrk_aligned>
 8005a94:	3001      	adds	r0, #1
 8005a96:	d03a      	beq.n	8005b0e <_malloc_r+0xea>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	442b      	add	r3, r5
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	bb62      	cbnz	r2, 8005b00 <_malloc_r+0xdc>
 8005aa6:	f8c8 7000 	str.w	r7, [r8]
 8005aaa:	e00f      	b.n	8005acc <_malloc_r+0xa8>
 8005aac:	6822      	ldr	r2, [r4, #0]
 8005aae:	1b52      	subs	r2, r2, r5
 8005ab0:	d420      	bmi.n	8005af4 <_malloc_r+0xd0>
 8005ab2:	2a0b      	cmp	r2, #11
 8005ab4:	d917      	bls.n	8005ae6 <_malloc_r+0xc2>
 8005ab6:	1961      	adds	r1, r4, r5
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	6025      	str	r5, [r4, #0]
 8005abc:	bf18      	it	ne
 8005abe:	6059      	strne	r1, [r3, #4]
 8005ac0:	6863      	ldr	r3, [r4, #4]
 8005ac2:	bf08      	it	eq
 8005ac4:	f8c8 1000 	streq.w	r1, [r8]
 8005ac8:	5162      	str	r2, [r4, r5]
 8005aca:	604b      	str	r3, [r1, #4]
 8005acc:	4630      	mov	r0, r6
 8005ace:	f000 f82f 	bl	8005b30 <__malloc_unlock>
 8005ad2:	f104 000b 	add.w	r0, r4, #11
 8005ad6:	1d23      	adds	r3, r4, #4
 8005ad8:	f020 0007 	bic.w	r0, r0, #7
 8005adc:	1ac2      	subs	r2, r0, r3
 8005ade:	bf1c      	itt	ne
 8005ae0:	1a1b      	subne	r3, r3, r0
 8005ae2:	50a3      	strne	r3, [r4, r2]
 8005ae4:	e7af      	b.n	8005a46 <_malloc_r+0x22>
 8005ae6:	6862      	ldr	r2, [r4, #4]
 8005ae8:	42a3      	cmp	r3, r4
 8005aea:	bf0c      	ite	eq
 8005aec:	f8c8 2000 	streq.w	r2, [r8]
 8005af0:	605a      	strne	r2, [r3, #4]
 8005af2:	e7eb      	b.n	8005acc <_malloc_r+0xa8>
 8005af4:	4623      	mov	r3, r4
 8005af6:	6864      	ldr	r4, [r4, #4]
 8005af8:	e7ae      	b.n	8005a58 <_malloc_r+0x34>
 8005afa:	463c      	mov	r4, r7
 8005afc:	687f      	ldr	r7, [r7, #4]
 8005afe:	e7b6      	b.n	8005a6e <_malloc_r+0x4a>
 8005b00:	461a      	mov	r2, r3
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	42a3      	cmp	r3, r4
 8005b06:	d1fb      	bne.n	8005b00 <_malloc_r+0xdc>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	6053      	str	r3, [r2, #4]
 8005b0c:	e7de      	b.n	8005acc <_malloc_r+0xa8>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	6033      	str	r3, [r6, #0]
 8005b12:	4630      	mov	r0, r6
 8005b14:	f000 f80c 	bl	8005b30 <__malloc_unlock>
 8005b18:	e794      	b.n	8005a44 <_malloc_r+0x20>
 8005b1a:	6005      	str	r5, [r0, #0]
 8005b1c:	e7d6      	b.n	8005acc <_malloc_r+0xa8>
 8005b1e:	bf00      	nop
 8005b20:	200003fc 	.word	0x200003fc

08005b24 <__malloc_lock>:
 8005b24:	4801      	ldr	r0, [pc, #4]	@ (8005b2c <__malloc_lock+0x8>)
 8005b26:	f7ff bf0f 	b.w	8005948 <__retarget_lock_acquire_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	200003f4 	.word	0x200003f4

08005b30 <__malloc_unlock>:
 8005b30:	4801      	ldr	r0, [pc, #4]	@ (8005b38 <__malloc_unlock+0x8>)
 8005b32:	f7ff bf0a 	b.w	800594a <__retarget_lock_release_recursive>
 8005b36:	bf00      	nop
 8005b38:	200003f4 	.word	0x200003f4

08005b3c <__ssputs_r>:
 8005b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b40:	688e      	ldr	r6, [r1, #8]
 8005b42:	461f      	mov	r7, r3
 8005b44:	42be      	cmp	r6, r7
 8005b46:	680b      	ldr	r3, [r1, #0]
 8005b48:	4682      	mov	sl, r0
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	4690      	mov	r8, r2
 8005b4e:	d82d      	bhi.n	8005bac <__ssputs_r+0x70>
 8005b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b58:	d026      	beq.n	8005ba8 <__ssputs_r+0x6c>
 8005b5a:	6965      	ldr	r5, [r4, #20]
 8005b5c:	6909      	ldr	r1, [r1, #16]
 8005b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b62:	eba3 0901 	sub.w	r9, r3, r1
 8005b66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b6a:	1c7b      	adds	r3, r7, #1
 8005b6c:	444b      	add	r3, r9
 8005b6e:	106d      	asrs	r5, r5, #1
 8005b70:	429d      	cmp	r5, r3
 8005b72:	bf38      	it	cc
 8005b74:	461d      	movcc	r5, r3
 8005b76:	0553      	lsls	r3, r2, #21
 8005b78:	d527      	bpl.n	8005bca <__ssputs_r+0x8e>
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	f7ff ff52 	bl	8005a24 <_malloc_r>
 8005b80:	4606      	mov	r6, r0
 8005b82:	b360      	cbz	r0, 8005bde <__ssputs_r+0xa2>
 8005b84:	6921      	ldr	r1, [r4, #16]
 8005b86:	464a      	mov	r2, r9
 8005b88:	f000 fae8 	bl	800615c <memcpy>
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b96:	81a3      	strh	r3, [r4, #12]
 8005b98:	6126      	str	r6, [r4, #16]
 8005b9a:	6165      	str	r5, [r4, #20]
 8005b9c:	444e      	add	r6, r9
 8005b9e:	eba5 0509 	sub.w	r5, r5, r9
 8005ba2:	6026      	str	r6, [r4, #0]
 8005ba4:	60a5      	str	r5, [r4, #8]
 8005ba6:	463e      	mov	r6, r7
 8005ba8:	42be      	cmp	r6, r7
 8005baa:	d900      	bls.n	8005bae <__ssputs_r+0x72>
 8005bac:	463e      	mov	r6, r7
 8005bae:	6820      	ldr	r0, [r4, #0]
 8005bb0:	4632      	mov	r2, r6
 8005bb2:	4641      	mov	r1, r8
 8005bb4:	f000 faa8 	bl	8006108 <memmove>
 8005bb8:	68a3      	ldr	r3, [r4, #8]
 8005bba:	1b9b      	subs	r3, r3, r6
 8005bbc:	60a3      	str	r3, [r4, #8]
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	4433      	add	r3, r6
 8005bc2:	6023      	str	r3, [r4, #0]
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bca:	462a      	mov	r2, r5
 8005bcc:	f000 fad4 	bl	8006178 <_realloc_r>
 8005bd0:	4606      	mov	r6, r0
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d1e0      	bne.n	8005b98 <__ssputs_r+0x5c>
 8005bd6:	6921      	ldr	r1, [r4, #16]
 8005bd8:	4650      	mov	r0, sl
 8005bda:	f7ff feb7 	bl	800594c <_free_r>
 8005bde:	230c      	movs	r3, #12
 8005be0:	f8ca 3000 	str.w	r3, [sl]
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bea:	81a3      	strh	r3, [r4, #12]
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf0:	e7e9      	b.n	8005bc6 <__ssputs_r+0x8a>
	...

08005bf4 <_svfiprintf_r>:
 8005bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf8:	4698      	mov	r8, r3
 8005bfa:	898b      	ldrh	r3, [r1, #12]
 8005bfc:	061b      	lsls	r3, r3, #24
 8005bfe:	b09d      	sub	sp, #116	@ 0x74
 8005c00:	4607      	mov	r7, r0
 8005c02:	460d      	mov	r5, r1
 8005c04:	4614      	mov	r4, r2
 8005c06:	d510      	bpl.n	8005c2a <_svfiprintf_r+0x36>
 8005c08:	690b      	ldr	r3, [r1, #16]
 8005c0a:	b973      	cbnz	r3, 8005c2a <_svfiprintf_r+0x36>
 8005c0c:	2140      	movs	r1, #64	@ 0x40
 8005c0e:	f7ff ff09 	bl	8005a24 <_malloc_r>
 8005c12:	6028      	str	r0, [r5, #0]
 8005c14:	6128      	str	r0, [r5, #16]
 8005c16:	b930      	cbnz	r0, 8005c26 <_svfiprintf_r+0x32>
 8005c18:	230c      	movs	r3, #12
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c20:	b01d      	add	sp, #116	@ 0x74
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	2340      	movs	r3, #64	@ 0x40
 8005c28:	616b      	str	r3, [r5, #20]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c2e:	2320      	movs	r3, #32
 8005c30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c38:	2330      	movs	r3, #48	@ 0x30
 8005c3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005dd8 <_svfiprintf_r+0x1e4>
 8005c3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c42:	f04f 0901 	mov.w	r9, #1
 8005c46:	4623      	mov	r3, r4
 8005c48:	469a      	mov	sl, r3
 8005c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c4e:	b10a      	cbz	r2, 8005c54 <_svfiprintf_r+0x60>
 8005c50:	2a25      	cmp	r2, #37	@ 0x25
 8005c52:	d1f9      	bne.n	8005c48 <_svfiprintf_r+0x54>
 8005c54:	ebba 0b04 	subs.w	fp, sl, r4
 8005c58:	d00b      	beq.n	8005c72 <_svfiprintf_r+0x7e>
 8005c5a:	465b      	mov	r3, fp
 8005c5c:	4622      	mov	r2, r4
 8005c5e:	4629      	mov	r1, r5
 8005c60:	4638      	mov	r0, r7
 8005c62:	f7ff ff6b 	bl	8005b3c <__ssputs_r>
 8005c66:	3001      	adds	r0, #1
 8005c68:	f000 80a7 	beq.w	8005dba <_svfiprintf_r+0x1c6>
 8005c6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c6e:	445a      	add	r2, fp
 8005c70:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c72:	f89a 3000 	ldrb.w	r3, [sl]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 809f 	beq.w	8005dba <_svfiprintf_r+0x1c6>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c86:	f10a 0a01 	add.w	sl, sl, #1
 8005c8a:	9304      	str	r3, [sp, #16]
 8005c8c:	9307      	str	r3, [sp, #28]
 8005c8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c92:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c94:	4654      	mov	r4, sl
 8005c96:	2205      	movs	r2, #5
 8005c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9c:	484e      	ldr	r0, [pc, #312]	@ (8005dd8 <_svfiprintf_r+0x1e4>)
 8005c9e:	f7fa fa9f 	bl	80001e0 <memchr>
 8005ca2:	9a04      	ldr	r2, [sp, #16]
 8005ca4:	b9d8      	cbnz	r0, 8005cde <_svfiprintf_r+0xea>
 8005ca6:	06d0      	lsls	r0, r2, #27
 8005ca8:	bf44      	itt	mi
 8005caa:	2320      	movmi	r3, #32
 8005cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cb0:	0711      	lsls	r1, r2, #28
 8005cb2:	bf44      	itt	mi
 8005cb4:	232b      	movmi	r3, #43	@ 0x2b
 8005cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cba:	f89a 3000 	ldrb.w	r3, [sl]
 8005cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cc0:	d015      	beq.n	8005cee <_svfiprintf_r+0xfa>
 8005cc2:	9a07      	ldr	r2, [sp, #28]
 8005cc4:	4654      	mov	r4, sl
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f04f 0c0a 	mov.w	ip, #10
 8005ccc:	4621      	mov	r1, r4
 8005cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cd2:	3b30      	subs	r3, #48	@ 0x30
 8005cd4:	2b09      	cmp	r3, #9
 8005cd6:	d94b      	bls.n	8005d70 <_svfiprintf_r+0x17c>
 8005cd8:	b1b0      	cbz	r0, 8005d08 <_svfiprintf_r+0x114>
 8005cda:	9207      	str	r2, [sp, #28]
 8005cdc:	e014      	b.n	8005d08 <_svfiprintf_r+0x114>
 8005cde:	eba0 0308 	sub.w	r3, r0, r8
 8005ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	9304      	str	r3, [sp, #16]
 8005cea:	46a2      	mov	sl, r4
 8005cec:	e7d2      	b.n	8005c94 <_svfiprintf_r+0xa0>
 8005cee:	9b03      	ldr	r3, [sp, #12]
 8005cf0:	1d19      	adds	r1, r3, #4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	9103      	str	r1, [sp, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bfbb      	ittet	lt
 8005cfa:	425b      	neglt	r3, r3
 8005cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8005d00:	9307      	strge	r3, [sp, #28]
 8005d02:	9307      	strlt	r3, [sp, #28]
 8005d04:	bfb8      	it	lt
 8005d06:	9204      	strlt	r2, [sp, #16]
 8005d08:	7823      	ldrb	r3, [r4, #0]
 8005d0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d0c:	d10a      	bne.n	8005d24 <_svfiprintf_r+0x130>
 8005d0e:	7863      	ldrb	r3, [r4, #1]
 8005d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d12:	d132      	bne.n	8005d7a <_svfiprintf_r+0x186>
 8005d14:	9b03      	ldr	r3, [sp, #12]
 8005d16:	1d1a      	adds	r2, r3, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	9203      	str	r2, [sp, #12]
 8005d1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d20:	3402      	adds	r4, #2
 8005d22:	9305      	str	r3, [sp, #20]
 8005d24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005de8 <_svfiprintf_r+0x1f4>
 8005d28:	7821      	ldrb	r1, [r4, #0]
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	4650      	mov	r0, sl
 8005d2e:	f7fa fa57 	bl	80001e0 <memchr>
 8005d32:	b138      	cbz	r0, 8005d44 <_svfiprintf_r+0x150>
 8005d34:	9b04      	ldr	r3, [sp, #16]
 8005d36:	eba0 000a 	sub.w	r0, r0, sl
 8005d3a:	2240      	movs	r2, #64	@ 0x40
 8005d3c:	4082      	lsls	r2, r0
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	3401      	adds	r4, #1
 8005d42:	9304      	str	r3, [sp, #16]
 8005d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d48:	4824      	ldr	r0, [pc, #144]	@ (8005ddc <_svfiprintf_r+0x1e8>)
 8005d4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d4e:	2206      	movs	r2, #6
 8005d50:	f7fa fa46 	bl	80001e0 <memchr>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d036      	beq.n	8005dc6 <_svfiprintf_r+0x1d2>
 8005d58:	4b21      	ldr	r3, [pc, #132]	@ (8005de0 <_svfiprintf_r+0x1ec>)
 8005d5a:	bb1b      	cbnz	r3, 8005da4 <_svfiprintf_r+0x1b0>
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	3307      	adds	r3, #7
 8005d60:	f023 0307 	bic.w	r3, r3, #7
 8005d64:	3308      	adds	r3, #8
 8005d66:	9303      	str	r3, [sp, #12]
 8005d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d6a:	4433      	add	r3, r6
 8005d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d6e:	e76a      	b.n	8005c46 <_svfiprintf_r+0x52>
 8005d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d74:	460c      	mov	r4, r1
 8005d76:	2001      	movs	r0, #1
 8005d78:	e7a8      	b.n	8005ccc <_svfiprintf_r+0xd8>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	3401      	adds	r4, #1
 8005d7e:	9305      	str	r3, [sp, #20]
 8005d80:	4619      	mov	r1, r3
 8005d82:	f04f 0c0a 	mov.w	ip, #10
 8005d86:	4620      	mov	r0, r4
 8005d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d8c:	3a30      	subs	r2, #48	@ 0x30
 8005d8e:	2a09      	cmp	r2, #9
 8005d90:	d903      	bls.n	8005d9a <_svfiprintf_r+0x1a6>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0c6      	beq.n	8005d24 <_svfiprintf_r+0x130>
 8005d96:	9105      	str	r1, [sp, #20]
 8005d98:	e7c4      	b.n	8005d24 <_svfiprintf_r+0x130>
 8005d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d9e:	4604      	mov	r4, r0
 8005da0:	2301      	movs	r3, #1
 8005da2:	e7f0      	b.n	8005d86 <_svfiprintf_r+0x192>
 8005da4:	ab03      	add	r3, sp, #12
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	462a      	mov	r2, r5
 8005daa:	4b0e      	ldr	r3, [pc, #56]	@ (8005de4 <_svfiprintf_r+0x1f0>)
 8005dac:	a904      	add	r1, sp, #16
 8005dae:	4638      	mov	r0, r7
 8005db0:	f3af 8000 	nop.w
 8005db4:	1c42      	adds	r2, r0, #1
 8005db6:	4606      	mov	r6, r0
 8005db8:	d1d6      	bne.n	8005d68 <_svfiprintf_r+0x174>
 8005dba:	89ab      	ldrh	r3, [r5, #12]
 8005dbc:	065b      	lsls	r3, r3, #25
 8005dbe:	f53f af2d 	bmi.w	8005c1c <_svfiprintf_r+0x28>
 8005dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005dc4:	e72c      	b.n	8005c20 <_svfiprintf_r+0x2c>
 8005dc6:	ab03      	add	r3, sp, #12
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	462a      	mov	r2, r5
 8005dcc:	4b05      	ldr	r3, [pc, #20]	@ (8005de4 <_svfiprintf_r+0x1f0>)
 8005dce:	a904      	add	r1, sp, #16
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f000 f879 	bl	8005ec8 <_printf_i>
 8005dd6:	e7ed      	b.n	8005db4 <_svfiprintf_r+0x1c0>
 8005dd8:	08007170 	.word	0x08007170
 8005ddc:	0800717a 	.word	0x0800717a
 8005de0:	00000000 	.word	0x00000000
 8005de4:	08005b3d 	.word	0x08005b3d
 8005de8:	08007176 	.word	0x08007176

08005dec <_printf_common>:
 8005dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	4616      	mov	r6, r2
 8005df2:	4698      	mov	r8, r3
 8005df4:	688a      	ldr	r2, [r1, #8]
 8005df6:	690b      	ldr	r3, [r1, #16]
 8005df8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	bfb8      	it	lt
 8005e00:	4613      	movlt	r3, r2
 8005e02:	6033      	str	r3, [r6, #0]
 8005e04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e08:	4607      	mov	r7, r0
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	b10a      	cbz	r2, 8005e12 <_printf_common+0x26>
 8005e0e:	3301      	adds	r3, #1
 8005e10:	6033      	str	r3, [r6, #0]
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	0699      	lsls	r1, r3, #26
 8005e16:	bf42      	ittt	mi
 8005e18:	6833      	ldrmi	r3, [r6, #0]
 8005e1a:	3302      	addmi	r3, #2
 8005e1c:	6033      	strmi	r3, [r6, #0]
 8005e1e:	6825      	ldr	r5, [r4, #0]
 8005e20:	f015 0506 	ands.w	r5, r5, #6
 8005e24:	d106      	bne.n	8005e34 <_printf_common+0x48>
 8005e26:	f104 0a19 	add.w	sl, r4, #25
 8005e2a:	68e3      	ldr	r3, [r4, #12]
 8005e2c:	6832      	ldr	r2, [r6, #0]
 8005e2e:	1a9b      	subs	r3, r3, r2
 8005e30:	42ab      	cmp	r3, r5
 8005e32:	dc26      	bgt.n	8005e82 <_printf_common+0x96>
 8005e34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e38:	6822      	ldr	r2, [r4, #0]
 8005e3a:	3b00      	subs	r3, #0
 8005e3c:	bf18      	it	ne
 8005e3e:	2301      	movne	r3, #1
 8005e40:	0692      	lsls	r2, r2, #26
 8005e42:	d42b      	bmi.n	8005e9c <_printf_common+0xb0>
 8005e44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e48:	4641      	mov	r1, r8
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	47c8      	blx	r9
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d01e      	beq.n	8005e90 <_printf_common+0xa4>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	6922      	ldr	r2, [r4, #16]
 8005e56:	f003 0306 	and.w	r3, r3, #6
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	bf02      	ittt	eq
 8005e5e:	68e5      	ldreq	r5, [r4, #12]
 8005e60:	6833      	ldreq	r3, [r6, #0]
 8005e62:	1aed      	subeq	r5, r5, r3
 8005e64:	68a3      	ldr	r3, [r4, #8]
 8005e66:	bf0c      	ite	eq
 8005e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e6c:	2500      	movne	r5, #0
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	bfc4      	itt	gt
 8005e72:	1a9b      	subgt	r3, r3, r2
 8005e74:	18ed      	addgt	r5, r5, r3
 8005e76:	2600      	movs	r6, #0
 8005e78:	341a      	adds	r4, #26
 8005e7a:	42b5      	cmp	r5, r6
 8005e7c:	d11a      	bne.n	8005eb4 <_printf_common+0xc8>
 8005e7e:	2000      	movs	r0, #0
 8005e80:	e008      	b.n	8005e94 <_printf_common+0xa8>
 8005e82:	2301      	movs	r3, #1
 8005e84:	4652      	mov	r2, sl
 8005e86:	4641      	mov	r1, r8
 8005e88:	4638      	mov	r0, r7
 8005e8a:	47c8      	blx	r9
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d103      	bne.n	8005e98 <_printf_common+0xac>
 8005e90:	f04f 30ff 	mov.w	r0, #4294967295
 8005e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e98:	3501      	adds	r5, #1
 8005e9a:	e7c6      	b.n	8005e2a <_printf_common+0x3e>
 8005e9c:	18e1      	adds	r1, r4, r3
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	2030      	movs	r0, #48	@ 0x30
 8005ea2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ea6:	4422      	add	r2, r4
 8005ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005eac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005eb0:	3302      	adds	r3, #2
 8005eb2:	e7c7      	b.n	8005e44 <_printf_common+0x58>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	4641      	mov	r1, r8
 8005eba:	4638      	mov	r0, r7
 8005ebc:	47c8      	blx	r9
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d0e6      	beq.n	8005e90 <_printf_common+0xa4>
 8005ec2:	3601      	adds	r6, #1
 8005ec4:	e7d9      	b.n	8005e7a <_printf_common+0x8e>
	...

08005ec8 <_printf_i>:
 8005ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ecc:	7e0f      	ldrb	r7, [r1, #24]
 8005ece:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ed0:	2f78      	cmp	r7, #120	@ 0x78
 8005ed2:	4691      	mov	r9, r2
 8005ed4:	4680      	mov	r8, r0
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	469a      	mov	sl, r3
 8005eda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ede:	d807      	bhi.n	8005ef0 <_printf_i+0x28>
 8005ee0:	2f62      	cmp	r7, #98	@ 0x62
 8005ee2:	d80a      	bhi.n	8005efa <_printf_i+0x32>
 8005ee4:	2f00      	cmp	r7, #0
 8005ee6:	f000 80d2 	beq.w	800608e <_printf_i+0x1c6>
 8005eea:	2f58      	cmp	r7, #88	@ 0x58
 8005eec:	f000 80b9 	beq.w	8006062 <_printf_i+0x19a>
 8005ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ef4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ef8:	e03a      	b.n	8005f70 <_printf_i+0xa8>
 8005efa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005efe:	2b15      	cmp	r3, #21
 8005f00:	d8f6      	bhi.n	8005ef0 <_printf_i+0x28>
 8005f02:	a101      	add	r1, pc, #4	@ (adr r1, 8005f08 <_printf_i+0x40>)
 8005f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f08:	08005f61 	.word	0x08005f61
 8005f0c:	08005f75 	.word	0x08005f75
 8005f10:	08005ef1 	.word	0x08005ef1
 8005f14:	08005ef1 	.word	0x08005ef1
 8005f18:	08005ef1 	.word	0x08005ef1
 8005f1c:	08005ef1 	.word	0x08005ef1
 8005f20:	08005f75 	.word	0x08005f75
 8005f24:	08005ef1 	.word	0x08005ef1
 8005f28:	08005ef1 	.word	0x08005ef1
 8005f2c:	08005ef1 	.word	0x08005ef1
 8005f30:	08005ef1 	.word	0x08005ef1
 8005f34:	08006075 	.word	0x08006075
 8005f38:	08005f9f 	.word	0x08005f9f
 8005f3c:	0800602f 	.word	0x0800602f
 8005f40:	08005ef1 	.word	0x08005ef1
 8005f44:	08005ef1 	.word	0x08005ef1
 8005f48:	08006097 	.word	0x08006097
 8005f4c:	08005ef1 	.word	0x08005ef1
 8005f50:	08005f9f 	.word	0x08005f9f
 8005f54:	08005ef1 	.word	0x08005ef1
 8005f58:	08005ef1 	.word	0x08005ef1
 8005f5c:	08006037 	.word	0x08006037
 8005f60:	6833      	ldr	r3, [r6, #0]
 8005f62:	1d1a      	adds	r2, r3, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6032      	str	r2, [r6, #0]
 8005f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f70:	2301      	movs	r3, #1
 8005f72:	e09d      	b.n	80060b0 <_printf_i+0x1e8>
 8005f74:	6833      	ldr	r3, [r6, #0]
 8005f76:	6820      	ldr	r0, [r4, #0]
 8005f78:	1d19      	adds	r1, r3, #4
 8005f7a:	6031      	str	r1, [r6, #0]
 8005f7c:	0606      	lsls	r6, r0, #24
 8005f7e:	d501      	bpl.n	8005f84 <_printf_i+0xbc>
 8005f80:	681d      	ldr	r5, [r3, #0]
 8005f82:	e003      	b.n	8005f8c <_printf_i+0xc4>
 8005f84:	0645      	lsls	r5, r0, #25
 8005f86:	d5fb      	bpl.n	8005f80 <_printf_i+0xb8>
 8005f88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f8c:	2d00      	cmp	r5, #0
 8005f8e:	da03      	bge.n	8005f98 <_printf_i+0xd0>
 8005f90:	232d      	movs	r3, #45	@ 0x2d
 8005f92:	426d      	negs	r5, r5
 8005f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f98:	4859      	ldr	r0, [pc, #356]	@ (8006100 <_printf_i+0x238>)
 8005f9a:	230a      	movs	r3, #10
 8005f9c:	e011      	b.n	8005fc2 <_printf_i+0xfa>
 8005f9e:	6821      	ldr	r1, [r4, #0]
 8005fa0:	6833      	ldr	r3, [r6, #0]
 8005fa2:	0608      	lsls	r0, r1, #24
 8005fa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fa8:	d402      	bmi.n	8005fb0 <_printf_i+0xe8>
 8005faa:	0649      	lsls	r1, r1, #25
 8005fac:	bf48      	it	mi
 8005fae:	b2ad      	uxthmi	r5, r5
 8005fb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fb2:	4853      	ldr	r0, [pc, #332]	@ (8006100 <_printf_i+0x238>)
 8005fb4:	6033      	str	r3, [r6, #0]
 8005fb6:	bf14      	ite	ne
 8005fb8:	230a      	movne	r3, #10
 8005fba:	2308      	moveq	r3, #8
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fc2:	6866      	ldr	r6, [r4, #4]
 8005fc4:	60a6      	str	r6, [r4, #8]
 8005fc6:	2e00      	cmp	r6, #0
 8005fc8:	bfa2      	ittt	ge
 8005fca:	6821      	ldrge	r1, [r4, #0]
 8005fcc:	f021 0104 	bicge.w	r1, r1, #4
 8005fd0:	6021      	strge	r1, [r4, #0]
 8005fd2:	b90d      	cbnz	r5, 8005fd8 <_printf_i+0x110>
 8005fd4:	2e00      	cmp	r6, #0
 8005fd6:	d04b      	beq.n	8006070 <_printf_i+0x1a8>
 8005fd8:	4616      	mov	r6, r2
 8005fda:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fde:	fb03 5711 	mls	r7, r3, r1, r5
 8005fe2:	5dc7      	ldrb	r7, [r0, r7]
 8005fe4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fe8:	462f      	mov	r7, r5
 8005fea:	42bb      	cmp	r3, r7
 8005fec:	460d      	mov	r5, r1
 8005fee:	d9f4      	bls.n	8005fda <_printf_i+0x112>
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d10b      	bne.n	800600c <_printf_i+0x144>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	07df      	lsls	r7, r3, #31
 8005ff8:	d508      	bpl.n	800600c <_printf_i+0x144>
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	6861      	ldr	r1, [r4, #4]
 8005ffe:	4299      	cmp	r1, r3
 8006000:	bfde      	ittt	le
 8006002:	2330      	movle	r3, #48	@ 0x30
 8006004:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006008:	f106 36ff 	addle.w	r6, r6, #4294967295
 800600c:	1b92      	subs	r2, r2, r6
 800600e:	6122      	str	r2, [r4, #16]
 8006010:	f8cd a000 	str.w	sl, [sp]
 8006014:	464b      	mov	r3, r9
 8006016:	aa03      	add	r2, sp, #12
 8006018:	4621      	mov	r1, r4
 800601a:	4640      	mov	r0, r8
 800601c:	f7ff fee6 	bl	8005dec <_printf_common>
 8006020:	3001      	adds	r0, #1
 8006022:	d14a      	bne.n	80060ba <_printf_i+0x1f2>
 8006024:	f04f 30ff 	mov.w	r0, #4294967295
 8006028:	b004      	add	sp, #16
 800602a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	f043 0320 	orr.w	r3, r3, #32
 8006034:	6023      	str	r3, [r4, #0]
 8006036:	4833      	ldr	r0, [pc, #204]	@ (8006104 <_printf_i+0x23c>)
 8006038:	2778      	movs	r7, #120	@ 0x78
 800603a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	6831      	ldr	r1, [r6, #0]
 8006042:	061f      	lsls	r7, r3, #24
 8006044:	f851 5b04 	ldr.w	r5, [r1], #4
 8006048:	d402      	bmi.n	8006050 <_printf_i+0x188>
 800604a:	065f      	lsls	r7, r3, #25
 800604c:	bf48      	it	mi
 800604e:	b2ad      	uxthmi	r5, r5
 8006050:	6031      	str	r1, [r6, #0]
 8006052:	07d9      	lsls	r1, r3, #31
 8006054:	bf44      	itt	mi
 8006056:	f043 0320 	orrmi.w	r3, r3, #32
 800605a:	6023      	strmi	r3, [r4, #0]
 800605c:	b11d      	cbz	r5, 8006066 <_printf_i+0x19e>
 800605e:	2310      	movs	r3, #16
 8006060:	e7ac      	b.n	8005fbc <_printf_i+0xf4>
 8006062:	4827      	ldr	r0, [pc, #156]	@ (8006100 <_printf_i+0x238>)
 8006064:	e7e9      	b.n	800603a <_printf_i+0x172>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	f023 0320 	bic.w	r3, r3, #32
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	e7f6      	b.n	800605e <_printf_i+0x196>
 8006070:	4616      	mov	r6, r2
 8006072:	e7bd      	b.n	8005ff0 <_printf_i+0x128>
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	6825      	ldr	r5, [r4, #0]
 8006078:	6961      	ldr	r1, [r4, #20]
 800607a:	1d18      	adds	r0, r3, #4
 800607c:	6030      	str	r0, [r6, #0]
 800607e:	062e      	lsls	r6, r5, #24
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	d501      	bpl.n	8006088 <_printf_i+0x1c0>
 8006084:	6019      	str	r1, [r3, #0]
 8006086:	e002      	b.n	800608e <_printf_i+0x1c6>
 8006088:	0668      	lsls	r0, r5, #25
 800608a:	d5fb      	bpl.n	8006084 <_printf_i+0x1bc>
 800608c:	8019      	strh	r1, [r3, #0]
 800608e:	2300      	movs	r3, #0
 8006090:	6123      	str	r3, [r4, #16]
 8006092:	4616      	mov	r6, r2
 8006094:	e7bc      	b.n	8006010 <_printf_i+0x148>
 8006096:	6833      	ldr	r3, [r6, #0]
 8006098:	1d1a      	adds	r2, r3, #4
 800609a:	6032      	str	r2, [r6, #0]
 800609c:	681e      	ldr	r6, [r3, #0]
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	2100      	movs	r1, #0
 80060a2:	4630      	mov	r0, r6
 80060a4:	f7fa f89c 	bl	80001e0 <memchr>
 80060a8:	b108      	cbz	r0, 80060ae <_printf_i+0x1e6>
 80060aa:	1b80      	subs	r0, r0, r6
 80060ac:	6060      	str	r0, [r4, #4]
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	6123      	str	r3, [r4, #16]
 80060b2:	2300      	movs	r3, #0
 80060b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060b8:	e7aa      	b.n	8006010 <_printf_i+0x148>
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	4632      	mov	r2, r6
 80060be:	4649      	mov	r1, r9
 80060c0:	4640      	mov	r0, r8
 80060c2:	47d0      	blx	sl
 80060c4:	3001      	adds	r0, #1
 80060c6:	d0ad      	beq.n	8006024 <_printf_i+0x15c>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	079b      	lsls	r3, r3, #30
 80060cc:	d413      	bmi.n	80060f6 <_printf_i+0x22e>
 80060ce:	68e0      	ldr	r0, [r4, #12]
 80060d0:	9b03      	ldr	r3, [sp, #12]
 80060d2:	4298      	cmp	r0, r3
 80060d4:	bfb8      	it	lt
 80060d6:	4618      	movlt	r0, r3
 80060d8:	e7a6      	b.n	8006028 <_printf_i+0x160>
 80060da:	2301      	movs	r3, #1
 80060dc:	4632      	mov	r2, r6
 80060de:	4649      	mov	r1, r9
 80060e0:	4640      	mov	r0, r8
 80060e2:	47d0      	blx	sl
 80060e4:	3001      	adds	r0, #1
 80060e6:	d09d      	beq.n	8006024 <_printf_i+0x15c>
 80060e8:	3501      	adds	r5, #1
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	9903      	ldr	r1, [sp, #12]
 80060ee:	1a5b      	subs	r3, r3, r1
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	dcf2      	bgt.n	80060da <_printf_i+0x212>
 80060f4:	e7eb      	b.n	80060ce <_printf_i+0x206>
 80060f6:	2500      	movs	r5, #0
 80060f8:	f104 0619 	add.w	r6, r4, #25
 80060fc:	e7f5      	b.n	80060ea <_printf_i+0x222>
 80060fe:	bf00      	nop
 8006100:	08007181 	.word	0x08007181
 8006104:	08007192 	.word	0x08007192

08006108 <memmove>:
 8006108:	4288      	cmp	r0, r1
 800610a:	b510      	push	{r4, lr}
 800610c:	eb01 0402 	add.w	r4, r1, r2
 8006110:	d902      	bls.n	8006118 <memmove+0x10>
 8006112:	4284      	cmp	r4, r0
 8006114:	4623      	mov	r3, r4
 8006116:	d807      	bhi.n	8006128 <memmove+0x20>
 8006118:	1e43      	subs	r3, r0, #1
 800611a:	42a1      	cmp	r1, r4
 800611c:	d008      	beq.n	8006130 <memmove+0x28>
 800611e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006122:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006126:	e7f8      	b.n	800611a <memmove+0x12>
 8006128:	4402      	add	r2, r0
 800612a:	4601      	mov	r1, r0
 800612c:	428a      	cmp	r2, r1
 800612e:	d100      	bne.n	8006132 <memmove+0x2a>
 8006130:	bd10      	pop	{r4, pc}
 8006132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800613a:	e7f7      	b.n	800612c <memmove+0x24>

0800613c <_sbrk_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4d06      	ldr	r5, [pc, #24]	@ (8006158 <_sbrk_r+0x1c>)
 8006140:	2300      	movs	r3, #0
 8006142:	4604      	mov	r4, r0
 8006144:	4608      	mov	r0, r1
 8006146:	602b      	str	r3, [r5, #0]
 8006148:	f7fb fc7c 	bl	8001a44 <_sbrk>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_sbrk_r+0x1a>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_sbrk_r+0x1a>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	200003f0 	.word	0x200003f0

0800615c <memcpy>:
 800615c:	440a      	add	r2, r1
 800615e:	4291      	cmp	r1, r2
 8006160:	f100 33ff 	add.w	r3, r0, #4294967295
 8006164:	d100      	bne.n	8006168 <memcpy+0xc>
 8006166:	4770      	bx	lr
 8006168:	b510      	push	{r4, lr}
 800616a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006172:	4291      	cmp	r1, r2
 8006174:	d1f9      	bne.n	800616a <memcpy+0xe>
 8006176:	bd10      	pop	{r4, pc}

08006178 <_realloc_r>:
 8006178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800617c:	4680      	mov	r8, r0
 800617e:	4615      	mov	r5, r2
 8006180:	460c      	mov	r4, r1
 8006182:	b921      	cbnz	r1, 800618e <_realloc_r+0x16>
 8006184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006188:	4611      	mov	r1, r2
 800618a:	f7ff bc4b 	b.w	8005a24 <_malloc_r>
 800618e:	b92a      	cbnz	r2, 800619c <_realloc_r+0x24>
 8006190:	f7ff fbdc 	bl	800594c <_free_r>
 8006194:	2400      	movs	r4, #0
 8006196:	4620      	mov	r0, r4
 8006198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800619c:	f000 f81a 	bl	80061d4 <_malloc_usable_size_r>
 80061a0:	4285      	cmp	r5, r0
 80061a2:	4606      	mov	r6, r0
 80061a4:	d802      	bhi.n	80061ac <_realloc_r+0x34>
 80061a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80061aa:	d8f4      	bhi.n	8006196 <_realloc_r+0x1e>
 80061ac:	4629      	mov	r1, r5
 80061ae:	4640      	mov	r0, r8
 80061b0:	f7ff fc38 	bl	8005a24 <_malloc_r>
 80061b4:	4607      	mov	r7, r0
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d0ec      	beq.n	8006194 <_realloc_r+0x1c>
 80061ba:	42b5      	cmp	r5, r6
 80061bc:	462a      	mov	r2, r5
 80061be:	4621      	mov	r1, r4
 80061c0:	bf28      	it	cs
 80061c2:	4632      	movcs	r2, r6
 80061c4:	f7ff ffca 	bl	800615c <memcpy>
 80061c8:	4621      	mov	r1, r4
 80061ca:	4640      	mov	r0, r8
 80061cc:	f7ff fbbe 	bl	800594c <_free_r>
 80061d0:	463c      	mov	r4, r7
 80061d2:	e7e0      	b.n	8006196 <_realloc_r+0x1e>

080061d4 <_malloc_usable_size_r>:
 80061d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061d8:	1f18      	subs	r0, r3, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bfbc      	itt	lt
 80061de:	580b      	ldrlt	r3, [r1, r0]
 80061e0:	18c0      	addlt	r0, r0, r3
 80061e2:	4770      	bx	lr

080061e4 <pow>:
 80061e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e6:	ed2d 8b02 	vpush	{d8}
 80061ea:	eeb0 8a40 	vmov.f32	s16, s0
 80061ee:	eef0 8a60 	vmov.f32	s17, s1
 80061f2:	ec55 4b11 	vmov	r4, r5, d1
 80061f6:	f000 f873 	bl	80062e0 <__ieee754_pow>
 80061fa:	4622      	mov	r2, r4
 80061fc:	462b      	mov	r3, r5
 80061fe:	4620      	mov	r0, r4
 8006200:	4629      	mov	r1, r5
 8006202:	ec57 6b10 	vmov	r6, r7, d0
 8006206:	f7fa fc91 	bl	8000b2c <__aeabi_dcmpun>
 800620a:	2800      	cmp	r0, #0
 800620c:	d13b      	bne.n	8006286 <pow+0xa2>
 800620e:	ec51 0b18 	vmov	r0, r1, d8
 8006212:	2200      	movs	r2, #0
 8006214:	2300      	movs	r3, #0
 8006216:	f7fa fc57 	bl	8000ac8 <__aeabi_dcmpeq>
 800621a:	b1b8      	cbz	r0, 800624c <pow+0x68>
 800621c:	2200      	movs	r2, #0
 800621e:	2300      	movs	r3, #0
 8006220:	4620      	mov	r0, r4
 8006222:	4629      	mov	r1, r5
 8006224:	f7fa fc50 	bl	8000ac8 <__aeabi_dcmpeq>
 8006228:	2800      	cmp	r0, #0
 800622a:	d146      	bne.n	80062ba <pow+0xd6>
 800622c:	ec45 4b10 	vmov	d0, r4, r5
 8006230:	f000 f848 	bl	80062c4 <finite>
 8006234:	b338      	cbz	r0, 8006286 <pow+0xa2>
 8006236:	2200      	movs	r2, #0
 8006238:	2300      	movs	r3, #0
 800623a:	4620      	mov	r0, r4
 800623c:	4629      	mov	r1, r5
 800623e:	f7fa fc4d 	bl	8000adc <__aeabi_dcmplt>
 8006242:	b300      	cbz	r0, 8006286 <pow+0xa2>
 8006244:	f7ff fb56 	bl	80058f4 <__errno>
 8006248:	2322      	movs	r3, #34	@ 0x22
 800624a:	e01b      	b.n	8006284 <pow+0xa0>
 800624c:	ec47 6b10 	vmov	d0, r6, r7
 8006250:	f000 f838 	bl	80062c4 <finite>
 8006254:	b9e0      	cbnz	r0, 8006290 <pow+0xac>
 8006256:	eeb0 0a48 	vmov.f32	s0, s16
 800625a:	eef0 0a68 	vmov.f32	s1, s17
 800625e:	f000 f831 	bl	80062c4 <finite>
 8006262:	b1a8      	cbz	r0, 8006290 <pow+0xac>
 8006264:	ec45 4b10 	vmov	d0, r4, r5
 8006268:	f000 f82c 	bl	80062c4 <finite>
 800626c:	b180      	cbz	r0, 8006290 <pow+0xac>
 800626e:	4632      	mov	r2, r6
 8006270:	463b      	mov	r3, r7
 8006272:	4630      	mov	r0, r6
 8006274:	4639      	mov	r1, r7
 8006276:	f7fa fc59 	bl	8000b2c <__aeabi_dcmpun>
 800627a:	2800      	cmp	r0, #0
 800627c:	d0e2      	beq.n	8006244 <pow+0x60>
 800627e:	f7ff fb39 	bl	80058f4 <__errno>
 8006282:	2321      	movs	r3, #33	@ 0x21
 8006284:	6003      	str	r3, [r0, #0]
 8006286:	ecbd 8b02 	vpop	{d8}
 800628a:	ec47 6b10 	vmov	d0, r6, r7
 800628e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006290:	2200      	movs	r2, #0
 8006292:	2300      	movs	r3, #0
 8006294:	4630      	mov	r0, r6
 8006296:	4639      	mov	r1, r7
 8006298:	f7fa fc16 	bl	8000ac8 <__aeabi_dcmpeq>
 800629c:	2800      	cmp	r0, #0
 800629e:	d0f2      	beq.n	8006286 <pow+0xa2>
 80062a0:	eeb0 0a48 	vmov.f32	s0, s16
 80062a4:	eef0 0a68 	vmov.f32	s1, s17
 80062a8:	f000 f80c 	bl	80062c4 <finite>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d0ea      	beq.n	8006286 <pow+0xa2>
 80062b0:	ec45 4b10 	vmov	d0, r4, r5
 80062b4:	f000 f806 	bl	80062c4 <finite>
 80062b8:	e7c3      	b.n	8006242 <pow+0x5e>
 80062ba:	4f01      	ldr	r7, [pc, #4]	@ (80062c0 <pow+0xdc>)
 80062bc:	2600      	movs	r6, #0
 80062be:	e7e2      	b.n	8006286 <pow+0xa2>
 80062c0:	3ff00000 	.word	0x3ff00000

080062c4 <finite>:
 80062c4:	b082      	sub	sp, #8
 80062c6:	ed8d 0b00 	vstr	d0, [sp]
 80062ca:	9801      	ldr	r0, [sp, #4]
 80062cc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80062d0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80062d4:	0fc0      	lsrs	r0, r0, #31
 80062d6:	b002      	add	sp, #8
 80062d8:	4770      	bx	lr
 80062da:	0000      	movs	r0, r0
 80062dc:	0000      	movs	r0, r0
	...

080062e0 <__ieee754_pow>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	b091      	sub	sp, #68	@ 0x44
 80062e6:	ed8d 1b00 	vstr	d1, [sp]
 80062ea:	e9dd 1900 	ldrd	r1, r9, [sp]
 80062ee:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80062f2:	ea5a 0001 	orrs.w	r0, sl, r1
 80062f6:	ec57 6b10 	vmov	r6, r7, d0
 80062fa:	d113      	bne.n	8006324 <__ieee754_pow+0x44>
 80062fc:	19b3      	adds	r3, r6, r6
 80062fe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006302:	4152      	adcs	r2, r2
 8006304:	4298      	cmp	r0, r3
 8006306:	4b98      	ldr	r3, [pc, #608]	@ (8006568 <__ieee754_pow+0x288>)
 8006308:	4193      	sbcs	r3, r2
 800630a:	f080 84ea 	bcs.w	8006ce2 <__ieee754_pow+0xa02>
 800630e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006312:	4630      	mov	r0, r6
 8006314:	4639      	mov	r1, r7
 8006316:	f7f9 ffb9 	bl	800028c <__adddf3>
 800631a:	ec41 0b10 	vmov	d0, r0, r1
 800631e:	b011      	add	sp, #68	@ 0x44
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006324:	4a91      	ldr	r2, [pc, #580]	@ (800656c <__ieee754_pow+0x28c>)
 8006326:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800632a:	4590      	cmp	r8, r2
 800632c:	463d      	mov	r5, r7
 800632e:	4633      	mov	r3, r6
 8006330:	d806      	bhi.n	8006340 <__ieee754_pow+0x60>
 8006332:	d101      	bne.n	8006338 <__ieee754_pow+0x58>
 8006334:	2e00      	cmp	r6, #0
 8006336:	d1ea      	bne.n	800630e <__ieee754_pow+0x2e>
 8006338:	4592      	cmp	sl, r2
 800633a:	d801      	bhi.n	8006340 <__ieee754_pow+0x60>
 800633c:	d10e      	bne.n	800635c <__ieee754_pow+0x7c>
 800633e:	b169      	cbz	r1, 800635c <__ieee754_pow+0x7c>
 8006340:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006344:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006348:	431d      	orrs	r5, r3
 800634a:	d1e0      	bne.n	800630e <__ieee754_pow+0x2e>
 800634c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006350:	18db      	adds	r3, r3, r3
 8006352:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006356:	4152      	adcs	r2, r2
 8006358:	429d      	cmp	r5, r3
 800635a:	e7d4      	b.n	8006306 <__ieee754_pow+0x26>
 800635c:	2d00      	cmp	r5, #0
 800635e:	46c3      	mov	fp, r8
 8006360:	da3a      	bge.n	80063d8 <__ieee754_pow+0xf8>
 8006362:	4a83      	ldr	r2, [pc, #524]	@ (8006570 <__ieee754_pow+0x290>)
 8006364:	4592      	cmp	sl, r2
 8006366:	d84d      	bhi.n	8006404 <__ieee754_pow+0x124>
 8006368:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800636c:	4592      	cmp	sl, r2
 800636e:	f240 84c7 	bls.w	8006d00 <__ieee754_pow+0xa20>
 8006372:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006376:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800637a:	2a14      	cmp	r2, #20
 800637c:	dd0f      	ble.n	800639e <__ieee754_pow+0xbe>
 800637e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006382:	fa21 f402 	lsr.w	r4, r1, r2
 8006386:	fa04 f202 	lsl.w	r2, r4, r2
 800638a:	428a      	cmp	r2, r1
 800638c:	f040 84b8 	bne.w	8006d00 <__ieee754_pow+0xa20>
 8006390:	f004 0401 	and.w	r4, r4, #1
 8006394:	f1c4 0402 	rsb	r4, r4, #2
 8006398:	2900      	cmp	r1, #0
 800639a:	d158      	bne.n	800644e <__ieee754_pow+0x16e>
 800639c:	e00e      	b.n	80063bc <__ieee754_pow+0xdc>
 800639e:	2900      	cmp	r1, #0
 80063a0:	d154      	bne.n	800644c <__ieee754_pow+0x16c>
 80063a2:	f1c2 0214 	rsb	r2, r2, #20
 80063a6:	fa4a f402 	asr.w	r4, sl, r2
 80063aa:	fa04 f202 	lsl.w	r2, r4, r2
 80063ae:	4552      	cmp	r2, sl
 80063b0:	f040 84a3 	bne.w	8006cfa <__ieee754_pow+0xa1a>
 80063b4:	f004 0401 	and.w	r4, r4, #1
 80063b8:	f1c4 0402 	rsb	r4, r4, #2
 80063bc:	4a6d      	ldr	r2, [pc, #436]	@ (8006574 <__ieee754_pow+0x294>)
 80063be:	4592      	cmp	sl, r2
 80063c0:	d12e      	bne.n	8006420 <__ieee754_pow+0x140>
 80063c2:	f1b9 0f00 	cmp.w	r9, #0
 80063c6:	f280 8494 	bge.w	8006cf2 <__ieee754_pow+0xa12>
 80063ca:	496a      	ldr	r1, [pc, #424]	@ (8006574 <__ieee754_pow+0x294>)
 80063cc:	4632      	mov	r2, r6
 80063ce:	463b      	mov	r3, r7
 80063d0:	2000      	movs	r0, #0
 80063d2:	f7fa fa3b 	bl	800084c <__aeabi_ddiv>
 80063d6:	e7a0      	b.n	800631a <__ieee754_pow+0x3a>
 80063d8:	2400      	movs	r4, #0
 80063da:	bbc1      	cbnz	r1, 800644e <__ieee754_pow+0x16e>
 80063dc:	4a63      	ldr	r2, [pc, #396]	@ (800656c <__ieee754_pow+0x28c>)
 80063de:	4592      	cmp	sl, r2
 80063e0:	d1ec      	bne.n	80063bc <__ieee754_pow+0xdc>
 80063e2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80063e6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80063ea:	431a      	orrs	r2, r3
 80063ec:	f000 8479 	beq.w	8006ce2 <__ieee754_pow+0xa02>
 80063f0:	4b61      	ldr	r3, [pc, #388]	@ (8006578 <__ieee754_pow+0x298>)
 80063f2:	4598      	cmp	r8, r3
 80063f4:	d908      	bls.n	8006408 <__ieee754_pow+0x128>
 80063f6:	f1b9 0f00 	cmp.w	r9, #0
 80063fa:	f2c0 8476 	blt.w	8006cea <__ieee754_pow+0xa0a>
 80063fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006402:	e78a      	b.n	800631a <__ieee754_pow+0x3a>
 8006404:	2402      	movs	r4, #2
 8006406:	e7e8      	b.n	80063da <__ieee754_pow+0xfa>
 8006408:	f1b9 0f00 	cmp.w	r9, #0
 800640c:	f04f 0000 	mov.w	r0, #0
 8006410:	f04f 0100 	mov.w	r1, #0
 8006414:	da81      	bge.n	800631a <__ieee754_pow+0x3a>
 8006416:	e9dd 0300 	ldrd	r0, r3, [sp]
 800641a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800641e:	e77c      	b.n	800631a <__ieee754_pow+0x3a>
 8006420:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006424:	d106      	bne.n	8006434 <__ieee754_pow+0x154>
 8006426:	4632      	mov	r2, r6
 8006428:	463b      	mov	r3, r7
 800642a:	4630      	mov	r0, r6
 800642c:	4639      	mov	r1, r7
 800642e:	f7fa f8e3 	bl	80005f8 <__aeabi_dmul>
 8006432:	e772      	b.n	800631a <__ieee754_pow+0x3a>
 8006434:	4a51      	ldr	r2, [pc, #324]	@ (800657c <__ieee754_pow+0x29c>)
 8006436:	4591      	cmp	r9, r2
 8006438:	d109      	bne.n	800644e <__ieee754_pow+0x16e>
 800643a:	2d00      	cmp	r5, #0
 800643c:	db07      	blt.n	800644e <__ieee754_pow+0x16e>
 800643e:	ec47 6b10 	vmov	d0, r6, r7
 8006442:	b011      	add	sp, #68	@ 0x44
 8006444:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006448:	f000 bd52 	b.w	8006ef0 <__ieee754_sqrt>
 800644c:	2400      	movs	r4, #0
 800644e:	ec47 6b10 	vmov	d0, r6, r7
 8006452:	9302      	str	r3, [sp, #8]
 8006454:	f000 fc88 	bl	8006d68 <fabs>
 8006458:	9b02      	ldr	r3, [sp, #8]
 800645a:	ec51 0b10 	vmov	r0, r1, d0
 800645e:	bb53      	cbnz	r3, 80064b6 <__ieee754_pow+0x1d6>
 8006460:	4b44      	ldr	r3, [pc, #272]	@ (8006574 <__ieee754_pow+0x294>)
 8006462:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8006466:	429a      	cmp	r2, r3
 8006468:	d002      	beq.n	8006470 <__ieee754_pow+0x190>
 800646a:	f1b8 0f00 	cmp.w	r8, #0
 800646e:	d122      	bne.n	80064b6 <__ieee754_pow+0x1d6>
 8006470:	f1b9 0f00 	cmp.w	r9, #0
 8006474:	da05      	bge.n	8006482 <__ieee754_pow+0x1a2>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	2000      	movs	r0, #0
 800647c:	493d      	ldr	r1, [pc, #244]	@ (8006574 <__ieee754_pow+0x294>)
 800647e:	f7fa f9e5 	bl	800084c <__aeabi_ddiv>
 8006482:	2d00      	cmp	r5, #0
 8006484:	f6bf af49 	bge.w	800631a <__ieee754_pow+0x3a>
 8006488:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800648c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006490:	ea58 0804 	orrs.w	r8, r8, r4
 8006494:	d108      	bne.n	80064a8 <__ieee754_pow+0x1c8>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4610      	mov	r0, r2
 800649c:	4619      	mov	r1, r3
 800649e:	f7f9 fef3 	bl	8000288 <__aeabi_dsub>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	e794      	b.n	80063d2 <__ieee754_pow+0xf2>
 80064a8:	2c01      	cmp	r4, #1
 80064aa:	f47f af36 	bne.w	800631a <__ieee754_pow+0x3a>
 80064ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80064b2:	4619      	mov	r1, r3
 80064b4:	e731      	b.n	800631a <__ieee754_pow+0x3a>
 80064b6:	0feb      	lsrs	r3, r5, #31
 80064b8:	3b01      	subs	r3, #1
 80064ba:	ea53 0204 	orrs.w	r2, r3, r4
 80064be:	d102      	bne.n	80064c6 <__ieee754_pow+0x1e6>
 80064c0:	4632      	mov	r2, r6
 80064c2:	463b      	mov	r3, r7
 80064c4:	e7e9      	b.n	800649a <__ieee754_pow+0x1ba>
 80064c6:	3c01      	subs	r4, #1
 80064c8:	431c      	orrs	r4, r3
 80064ca:	d016      	beq.n	80064fa <__ieee754_pow+0x21a>
 80064cc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8006558 <__ieee754_pow+0x278>
 80064d0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80064d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80064d8:	f240 8112 	bls.w	8006700 <__ieee754_pow+0x420>
 80064dc:	4b28      	ldr	r3, [pc, #160]	@ (8006580 <__ieee754_pow+0x2a0>)
 80064de:	459a      	cmp	sl, r3
 80064e0:	4b25      	ldr	r3, [pc, #148]	@ (8006578 <__ieee754_pow+0x298>)
 80064e2:	d916      	bls.n	8006512 <__ieee754_pow+0x232>
 80064e4:	4598      	cmp	r8, r3
 80064e6:	d80b      	bhi.n	8006500 <__ieee754_pow+0x220>
 80064e8:	f1b9 0f00 	cmp.w	r9, #0
 80064ec:	da0b      	bge.n	8006506 <__ieee754_pow+0x226>
 80064ee:	2000      	movs	r0, #0
 80064f0:	b011      	add	sp, #68	@ 0x44
 80064f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f6:	f000 bcf3 	b.w	8006ee0 <__math_oflow>
 80064fa:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8006560 <__ieee754_pow+0x280>
 80064fe:	e7e7      	b.n	80064d0 <__ieee754_pow+0x1f0>
 8006500:	f1b9 0f00 	cmp.w	r9, #0
 8006504:	dcf3      	bgt.n	80064ee <__ieee754_pow+0x20e>
 8006506:	2000      	movs	r0, #0
 8006508:	b011      	add	sp, #68	@ 0x44
 800650a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650e:	f000 bcdf 	b.w	8006ed0 <__math_uflow>
 8006512:	4598      	cmp	r8, r3
 8006514:	d20c      	bcs.n	8006530 <__ieee754_pow+0x250>
 8006516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800651a:	2200      	movs	r2, #0
 800651c:	2300      	movs	r3, #0
 800651e:	f7fa fadd 	bl	8000adc <__aeabi_dcmplt>
 8006522:	3800      	subs	r0, #0
 8006524:	bf18      	it	ne
 8006526:	2001      	movne	r0, #1
 8006528:	f1b9 0f00 	cmp.w	r9, #0
 800652c:	daec      	bge.n	8006508 <__ieee754_pow+0x228>
 800652e:	e7df      	b.n	80064f0 <__ieee754_pow+0x210>
 8006530:	4b10      	ldr	r3, [pc, #64]	@ (8006574 <__ieee754_pow+0x294>)
 8006532:	4598      	cmp	r8, r3
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	d924      	bls.n	8006584 <__ieee754_pow+0x2a4>
 800653a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800653e:	2300      	movs	r3, #0
 8006540:	f7fa facc 	bl	8000adc <__aeabi_dcmplt>
 8006544:	3800      	subs	r0, #0
 8006546:	bf18      	it	ne
 8006548:	2001      	movne	r0, #1
 800654a:	f1b9 0f00 	cmp.w	r9, #0
 800654e:	dccf      	bgt.n	80064f0 <__ieee754_pow+0x210>
 8006550:	e7da      	b.n	8006508 <__ieee754_pow+0x228>
 8006552:	bf00      	nop
 8006554:	f3af 8000 	nop.w
 8006558:	00000000 	.word	0x00000000
 800655c:	3ff00000 	.word	0x3ff00000
 8006560:	00000000 	.word	0x00000000
 8006564:	bff00000 	.word	0xbff00000
 8006568:	fff00000 	.word	0xfff00000
 800656c:	7ff00000 	.word	0x7ff00000
 8006570:	433fffff 	.word	0x433fffff
 8006574:	3ff00000 	.word	0x3ff00000
 8006578:	3fefffff 	.word	0x3fefffff
 800657c:	3fe00000 	.word	0x3fe00000
 8006580:	43f00000 	.word	0x43f00000
 8006584:	4b5a      	ldr	r3, [pc, #360]	@ (80066f0 <__ieee754_pow+0x410>)
 8006586:	f7f9 fe7f 	bl	8000288 <__aeabi_dsub>
 800658a:	a351      	add	r3, pc, #324	@ (adr r3, 80066d0 <__ieee754_pow+0x3f0>)
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	4604      	mov	r4, r0
 8006592:	460d      	mov	r5, r1
 8006594:	f7fa f830 	bl	80005f8 <__aeabi_dmul>
 8006598:	a34f      	add	r3, pc, #316	@ (adr r3, 80066d8 <__ieee754_pow+0x3f8>)
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	4606      	mov	r6, r0
 80065a0:	460f      	mov	r7, r1
 80065a2:	4620      	mov	r0, r4
 80065a4:	4629      	mov	r1, r5
 80065a6:	f7fa f827 	bl	80005f8 <__aeabi_dmul>
 80065aa:	4b52      	ldr	r3, [pc, #328]	@ (80066f4 <__ieee754_pow+0x414>)
 80065ac:	4682      	mov	sl, r0
 80065ae:	468b      	mov	fp, r1
 80065b0:	2200      	movs	r2, #0
 80065b2:	4620      	mov	r0, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	f7fa f81f 	bl	80005f8 <__aeabi_dmul>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	a148      	add	r1, pc, #288	@ (adr r1, 80066e0 <__ieee754_pow+0x400>)
 80065c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065c4:	f7f9 fe60 	bl	8000288 <__aeabi_dsub>
 80065c8:	4622      	mov	r2, r4
 80065ca:	462b      	mov	r3, r5
 80065cc:	f7fa f814 	bl	80005f8 <__aeabi_dmul>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	2000      	movs	r0, #0
 80065d6:	4948      	ldr	r1, [pc, #288]	@ (80066f8 <__ieee754_pow+0x418>)
 80065d8:	f7f9 fe56 	bl	8000288 <__aeabi_dsub>
 80065dc:	4622      	mov	r2, r4
 80065de:	4680      	mov	r8, r0
 80065e0:	4689      	mov	r9, r1
 80065e2:	462b      	mov	r3, r5
 80065e4:	4620      	mov	r0, r4
 80065e6:	4629      	mov	r1, r5
 80065e8:	f7fa f806 	bl	80005f8 <__aeabi_dmul>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4640      	mov	r0, r8
 80065f2:	4649      	mov	r1, r9
 80065f4:	f7fa f800 	bl	80005f8 <__aeabi_dmul>
 80065f8:	a33b      	add	r3, pc, #236	@ (adr r3, 80066e8 <__ieee754_pow+0x408>)
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f7f9 fffb 	bl	80005f8 <__aeabi_dmul>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4650      	mov	r0, sl
 8006608:	4659      	mov	r1, fp
 800660a:	f7f9 fe3d 	bl	8000288 <__aeabi_dsub>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4680      	mov	r8, r0
 8006614:	4689      	mov	r9, r1
 8006616:	4630      	mov	r0, r6
 8006618:	4639      	mov	r1, r7
 800661a:	f7f9 fe37 	bl	800028c <__adddf3>
 800661e:	2400      	movs	r4, #0
 8006620:	4632      	mov	r2, r6
 8006622:	463b      	mov	r3, r7
 8006624:	4620      	mov	r0, r4
 8006626:	460d      	mov	r5, r1
 8006628:	f7f9 fe2e 	bl	8000288 <__aeabi_dsub>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4640      	mov	r0, r8
 8006632:	4649      	mov	r1, r9
 8006634:	f7f9 fe28 	bl	8000288 <__aeabi_dsub>
 8006638:	e9dd 2300 	ldrd	r2, r3, [sp]
 800663c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006640:	2300      	movs	r3, #0
 8006642:	9304      	str	r3, [sp, #16]
 8006644:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006648:	4606      	mov	r6, r0
 800664a:	460f      	mov	r7, r1
 800664c:	4652      	mov	r2, sl
 800664e:	465b      	mov	r3, fp
 8006650:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006654:	f7f9 fe18 	bl	8000288 <__aeabi_dsub>
 8006658:	4622      	mov	r2, r4
 800665a:	462b      	mov	r3, r5
 800665c:	f7f9 ffcc 	bl	80005f8 <__aeabi_dmul>
 8006660:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006664:	4680      	mov	r8, r0
 8006666:	4689      	mov	r9, r1
 8006668:	4630      	mov	r0, r6
 800666a:	4639      	mov	r1, r7
 800666c:	f7f9 ffc4 	bl	80005f8 <__aeabi_dmul>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4640      	mov	r0, r8
 8006676:	4649      	mov	r1, r9
 8006678:	f7f9 fe08 	bl	800028c <__adddf3>
 800667c:	4652      	mov	r2, sl
 800667e:	465b      	mov	r3, fp
 8006680:	4606      	mov	r6, r0
 8006682:	460f      	mov	r7, r1
 8006684:	4620      	mov	r0, r4
 8006686:	4629      	mov	r1, r5
 8006688:	f7f9 ffb6 	bl	80005f8 <__aeabi_dmul>
 800668c:	460b      	mov	r3, r1
 800668e:	4602      	mov	r2, r0
 8006690:	4680      	mov	r8, r0
 8006692:	4689      	mov	r9, r1
 8006694:	4630      	mov	r0, r6
 8006696:	4639      	mov	r1, r7
 8006698:	f7f9 fdf8 	bl	800028c <__adddf3>
 800669c:	4b17      	ldr	r3, [pc, #92]	@ (80066fc <__ieee754_pow+0x41c>)
 800669e:	4299      	cmp	r1, r3
 80066a0:	4604      	mov	r4, r0
 80066a2:	460d      	mov	r5, r1
 80066a4:	468a      	mov	sl, r1
 80066a6:	468b      	mov	fp, r1
 80066a8:	f340 82ef 	ble.w	8006c8a <__ieee754_pow+0x9aa>
 80066ac:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80066b0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80066b4:	4303      	orrs	r3, r0
 80066b6:	f000 81e8 	beq.w	8006a8a <__ieee754_pow+0x7aa>
 80066ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066be:	2200      	movs	r2, #0
 80066c0:	2300      	movs	r3, #0
 80066c2:	f7fa fa0b 	bl	8000adc <__aeabi_dcmplt>
 80066c6:	3800      	subs	r0, #0
 80066c8:	bf18      	it	ne
 80066ca:	2001      	movne	r0, #1
 80066cc:	e710      	b.n	80064f0 <__ieee754_pow+0x210>
 80066ce:	bf00      	nop
 80066d0:	60000000 	.word	0x60000000
 80066d4:	3ff71547 	.word	0x3ff71547
 80066d8:	f85ddf44 	.word	0xf85ddf44
 80066dc:	3e54ae0b 	.word	0x3e54ae0b
 80066e0:	55555555 	.word	0x55555555
 80066e4:	3fd55555 	.word	0x3fd55555
 80066e8:	652b82fe 	.word	0x652b82fe
 80066ec:	3ff71547 	.word	0x3ff71547
 80066f0:	3ff00000 	.word	0x3ff00000
 80066f4:	3fd00000 	.word	0x3fd00000
 80066f8:	3fe00000 	.word	0x3fe00000
 80066fc:	408fffff 	.word	0x408fffff
 8006700:	4bd5      	ldr	r3, [pc, #852]	@ (8006a58 <__ieee754_pow+0x778>)
 8006702:	402b      	ands	r3, r5
 8006704:	2200      	movs	r2, #0
 8006706:	b92b      	cbnz	r3, 8006714 <__ieee754_pow+0x434>
 8006708:	4bd4      	ldr	r3, [pc, #848]	@ (8006a5c <__ieee754_pow+0x77c>)
 800670a:	f7f9 ff75 	bl	80005f8 <__aeabi_dmul>
 800670e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8006712:	468b      	mov	fp, r1
 8006714:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006718:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800671c:	4413      	add	r3, r2
 800671e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006720:	4bcf      	ldr	r3, [pc, #828]	@ (8006a60 <__ieee754_pow+0x780>)
 8006722:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8006726:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800672a:	459b      	cmp	fp, r3
 800672c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006730:	dd08      	ble.n	8006744 <__ieee754_pow+0x464>
 8006732:	4bcc      	ldr	r3, [pc, #816]	@ (8006a64 <__ieee754_pow+0x784>)
 8006734:	459b      	cmp	fp, r3
 8006736:	f340 81a5 	ble.w	8006a84 <__ieee754_pow+0x7a4>
 800673a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800673c:	3301      	adds	r3, #1
 800673e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006740:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006744:	f04f 0a00 	mov.w	sl, #0
 8006748:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800674c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800674e:	4bc6      	ldr	r3, [pc, #792]	@ (8006a68 <__ieee754_pow+0x788>)
 8006750:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006754:	ed93 7b00 	vldr	d7, [r3]
 8006758:	4629      	mov	r1, r5
 800675a:	ec53 2b17 	vmov	r2, r3, d7
 800675e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006762:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006766:	f7f9 fd8f 	bl	8000288 <__aeabi_dsub>
 800676a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800676e:	4606      	mov	r6, r0
 8006770:	460f      	mov	r7, r1
 8006772:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006776:	f7f9 fd89 	bl	800028c <__adddf3>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	2000      	movs	r0, #0
 8006780:	49ba      	ldr	r1, [pc, #744]	@ (8006a6c <__ieee754_pow+0x78c>)
 8006782:	f7fa f863 	bl	800084c <__aeabi_ddiv>
 8006786:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4630      	mov	r0, r6
 8006790:	4639      	mov	r1, r7
 8006792:	f7f9 ff31 	bl	80005f8 <__aeabi_dmul>
 8006796:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800679a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800679e:	106d      	asrs	r5, r5, #1
 80067a0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80067a4:	f04f 0b00 	mov.w	fp, #0
 80067a8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80067ac:	4661      	mov	r1, ip
 80067ae:	2200      	movs	r2, #0
 80067b0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80067b4:	4658      	mov	r0, fp
 80067b6:	46e1      	mov	r9, ip
 80067b8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80067bc:	4614      	mov	r4, r2
 80067be:	461d      	mov	r5, r3
 80067c0:	f7f9 ff1a 	bl	80005f8 <__aeabi_dmul>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4630      	mov	r0, r6
 80067ca:	4639      	mov	r1, r7
 80067cc:	f7f9 fd5c 	bl	8000288 <__aeabi_dsub>
 80067d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067d4:	4606      	mov	r6, r0
 80067d6:	460f      	mov	r7, r1
 80067d8:	4620      	mov	r0, r4
 80067da:	4629      	mov	r1, r5
 80067dc:	f7f9 fd54 	bl	8000288 <__aeabi_dsub>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067e8:	f7f9 fd4e 	bl	8000288 <__aeabi_dsub>
 80067ec:	465a      	mov	r2, fp
 80067ee:	464b      	mov	r3, r9
 80067f0:	f7f9 ff02 	bl	80005f8 <__aeabi_dmul>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4630      	mov	r0, r6
 80067fa:	4639      	mov	r1, r7
 80067fc:	f7f9 fd44 	bl	8000288 <__aeabi_dsub>
 8006800:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006804:	f7f9 fef8 	bl	80005f8 <__aeabi_dmul>
 8006808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800680c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006810:	4610      	mov	r0, r2
 8006812:	4619      	mov	r1, r3
 8006814:	f7f9 fef0 	bl	80005f8 <__aeabi_dmul>
 8006818:	a37d      	add	r3, pc, #500	@ (adr r3, 8006a10 <__ieee754_pow+0x730>)
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	4604      	mov	r4, r0
 8006820:	460d      	mov	r5, r1
 8006822:	f7f9 fee9 	bl	80005f8 <__aeabi_dmul>
 8006826:	a37c      	add	r3, pc, #496	@ (adr r3, 8006a18 <__ieee754_pow+0x738>)
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f7f9 fd2e 	bl	800028c <__adddf3>
 8006830:	4622      	mov	r2, r4
 8006832:	462b      	mov	r3, r5
 8006834:	f7f9 fee0 	bl	80005f8 <__aeabi_dmul>
 8006838:	a379      	add	r3, pc, #484	@ (adr r3, 8006a20 <__ieee754_pow+0x740>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 fd25 	bl	800028c <__adddf3>
 8006842:	4622      	mov	r2, r4
 8006844:	462b      	mov	r3, r5
 8006846:	f7f9 fed7 	bl	80005f8 <__aeabi_dmul>
 800684a:	a377      	add	r3, pc, #476	@ (adr r3, 8006a28 <__ieee754_pow+0x748>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f7f9 fd1c 	bl	800028c <__adddf3>
 8006854:	4622      	mov	r2, r4
 8006856:	462b      	mov	r3, r5
 8006858:	f7f9 fece 	bl	80005f8 <__aeabi_dmul>
 800685c:	a374      	add	r3, pc, #464	@ (adr r3, 8006a30 <__ieee754_pow+0x750>)
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	f7f9 fd13 	bl	800028c <__adddf3>
 8006866:	4622      	mov	r2, r4
 8006868:	462b      	mov	r3, r5
 800686a:	f7f9 fec5 	bl	80005f8 <__aeabi_dmul>
 800686e:	a372      	add	r3, pc, #456	@ (adr r3, 8006a38 <__ieee754_pow+0x758>)
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f7f9 fd0a 	bl	800028c <__adddf3>
 8006878:	4622      	mov	r2, r4
 800687a:	4606      	mov	r6, r0
 800687c:	460f      	mov	r7, r1
 800687e:	462b      	mov	r3, r5
 8006880:	4620      	mov	r0, r4
 8006882:	4629      	mov	r1, r5
 8006884:	f7f9 feb8 	bl	80005f8 <__aeabi_dmul>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4630      	mov	r0, r6
 800688e:	4639      	mov	r1, r7
 8006890:	f7f9 feb2 	bl	80005f8 <__aeabi_dmul>
 8006894:	465a      	mov	r2, fp
 8006896:	4604      	mov	r4, r0
 8006898:	460d      	mov	r5, r1
 800689a:	464b      	mov	r3, r9
 800689c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068a0:	f7f9 fcf4 	bl	800028c <__adddf3>
 80068a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068a8:	f7f9 fea6 	bl	80005f8 <__aeabi_dmul>
 80068ac:	4622      	mov	r2, r4
 80068ae:	462b      	mov	r3, r5
 80068b0:	f7f9 fcec 	bl	800028c <__adddf3>
 80068b4:	465a      	mov	r2, fp
 80068b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068ba:	464b      	mov	r3, r9
 80068bc:	4658      	mov	r0, fp
 80068be:	4649      	mov	r1, r9
 80068c0:	f7f9 fe9a 	bl	80005f8 <__aeabi_dmul>
 80068c4:	4b6a      	ldr	r3, [pc, #424]	@ (8006a70 <__ieee754_pow+0x790>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	4606      	mov	r6, r0
 80068ca:	460f      	mov	r7, r1
 80068cc:	f7f9 fcde 	bl	800028c <__adddf3>
 80068d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068d4:	f7f9 fcda 	bl	800028c <__adddf3>
 80068d8:	46d8      	mov	r8, fp
 80068da:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80068de:	460d      	mov	r5, r1
 80068e0:	465a      	mov	r2, fp
 80068e2:	460b      	mov	r3, r1
 80068e4:	4640      	mov	r0, r8
 80068e6:	4649      	mov	r1, r9
 80068e8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80068ec:	f7f9 fe84 	bl	80005f8 <__aeabi_dmul>
 80068f0:	465c      	mov	r4, fp
 80068f2:	4680      	mov	r8, r0
 80068f4:	4689      	mov	r9, r1
 80068f6:	4b5e      	ldr	r3, [pc, #376]	@ (8006a70 <__ieee754_pow+0x790>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	4620      	mov	r0, r4
 80068fc:	4629      	mov	r1, r5
 80068fe:	f7f9 fcc3 	bl	8000288 <__aeabi_dsub>
 8006902:	4632      	mov	r2, r6
 8006904:	463b      	mov	r3, r7
 8006906:	f7f9 fcbf 	bl	8000288 <__aeabi_dsub>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006912:	f7f9 fcb9 	bl	8000288 <__aeabi_dsub>
 8006916:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800691a:	f7f9 fe6d 	bl	80005f8 <__aeabi_dmul>
 800691e:	4622      	mov	r2, r4
 8006920:	4606      	mov	r6, r0
 8006922:	460f      	mov	r7, r1
 8006924:	462b      	mov	r3, r5
 8006926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800692a:	f7f9 fe65 	bl	80005f8 <__aeabi_dmul>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4630      	mov	r0, r6
 8006934:	4639      	mov	r1, r7
 8006936:	f7f9 fca9 	bl	800028c <__adddf3>
 800693a:	4606      	mov	r6, r0
 800693c:	460f      	mov	r7, r1
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4640      	mov	r0, r8
 8006944:	4649      	mov	r1, r9
 8006946:	f7f9 fca1 	bl	800028c <__adddf3>
 800694a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800694e:	a33c      	add	r3, pc, #240	@ (adr r3, 8006a40 <__ieee754_pow+0x760>)
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	4658      	mov	r0, fp
 8006956:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800695a:	460d      	mov	r5, r1
 800695c:	f7f9 fe4c 	bl	80005f8 <__aeabi_dmul>
 8006960:	465c      	mov	r4, fp
 8006962:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006966:	4642      	mov	r2, r8
 8006968:	464b      	mov	r3, r9
 800696a:	4620      	mov	r0, r4
 800696c:	4629      	mov	r1, r5
 800696e:	f7f9 fc8b 	bl	8000288 <__aeabi_dsub>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4630      	mov	r0, r6
 8006978:	4639      	mov	r1, r7
 800697a:	f7f9 fc85 	bl	8000288 <__aeabi_dsub>
 800697e:	a332      	add	r3, pc, #200	@ (adr r3, 8006a48 <__ieee754_pow+0x768>)
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f7f9 fe38 	bl	80005f8 <__aeabi_dmul>
 8006988:	a331      	add	r3, pc, #196	@ (adr r3, 8006a50 <__ieee754_pow+0x770>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	4606      	mov	r6, r0
 8006990:	460f      	mov	r7, r1
 8006992:	4620      	mov	r0, r4
 8006994:	4629      	mov	r1, r5
 8006996:	f7f9 fe2f 	bl	80005f8 <__aeabi_dmul>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4630      	mov	r0, r6
 80069a0:	4639      	mov	r1, r7
 80069a2:	f7f9 fc73 	bl	800028c <__adddf3>
 80069a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80069a8:	4b32      	ldr	r3, [pc, #200]	@ (8006a74 <__ieee754_pow+0x794>)
 80069aa:	4413      	add	r3, r2
 80069ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b0:	f7f9 fc6c 	bl	800028c <__adddf3>
 80069b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80069ba:	f7f9 fdb3 	bl	8000524 <__aeabi_i2d>
 80069be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80069c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006a78 <__ieee754_pow+0x798>)
 80069c2:	4413      	add	r3, r2
 80069c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069c8:	4606      	mov	r6, r0
 80069ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069ce:	460f      	mov	r7, r1
 80069d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069d4:	f7f9 fc5a 	bl	800028c <__adddf3>
 80069d8:	4642      	mov	r2, r8
 80069da:	464b      	mov	r3, r9
 80069dc:	f7f9 fc56 	bl	800028c <__adddf3>
 80069e0:	4632      	mov	r2, r6
 80069e2:	463b      	mov	r3, r7
 80069e4:	f7f9 fc52 	bl	800028c <__adddf3>
 80069e8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80069ec:	4632      	mov	r2, r6
 80069ee:	463b      	mov	r3, r7
 80069f0:	4658      	mov	r0, fp
 80069f2:	460d      	mov	r5, r1
 80069f4:	f7f9 fc48 	bl	8000288 <__aeabi_dsub>
 80069f8:	4642      	mov	r2, r8
 80069fa:	464b      	mov	r3, r9
 80069fc:	f7f9 fc44 	bl	8000288 <__aeabi_dsub>
 8006a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a04:	f7f9 fc40 	bl	8000288 <__aeabi_dsub>
 8006a08:	465c      	mov	r4, fp
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	e036      	b.n	8006a7c <__ieee754_pow+0x79c>
 8006a0e:	bf00      	nop
 8006a10:	4a454eef 	.word	0x4a454eef
 8006a14:	3fca7e28 	.word	0x3fca7e28
 8006a18:	93c9db65 	.word	0x93c9db65
 8006a1c:	3fcd864a 	.word	0x3fcd864a
 8006a20:	a91d4101 	.word	0xa91d4101
 8006a24:	3fd17460 	.word	0x3fd17460
 8006a28:	518f264d 	.word	0x518f264d
 8006a2c:	3fd55555 	.word	0x3fd55555
 8006a30:	db6fabff 	.word	0xdb6fabff
 8006a34:	3fdb6db6 	.word	0x3fdb6db6
 8006a38:	33333303 	.word	0x33333303
 8006a3c:	3fe33333 	.word	0x3fe33333
 8006a40:	e0000000 	.word	0xe0000000
 8006a44:	3feec709 	.word	0x3feec709
 8006a48:	dc3a03fd 	.word	0xdc3a03fd
 8006a4c:	3feec709 	.word	0x3feec709
 8006a50:	145b01f5 	.word	0x145b01f5
 8006a54:	be3e2fe0 	.word	0xbe3e2fe0
 8006a58:	7ff00000 	.word	0x7ff00000
 8006a5c:	43400000 	.word	0x43400000
 8006a60:	0003988e 	.word	0x0003988e
 8006a64:	000bb679 	.word	0x000bb679
 8006a68:	080071c8 	.word	0x080071c8
 8006a6c:	3ff00000 	.word	0x3ff00000
 8006a70:	40080000 	.word	0x40080000
 8006a74:	080071a8 	.word	0x080071a8
 8006a78:	080071b8 	.word	0x080071b8
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a82:	e5d7      	b.n	8006634 <__ieee754_pow+0x354>
 8006a84:	f04f 0a01 	mov.w	sl, #1
 8006a88:	e65e      	b.n	8006748 <__ieee754_pow+0x468>
 8006a8a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8006d5c <__ieee754_pow+0xa7c>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	4630      	mov	r0, r6
 8006a92:	4639      	mov	r1, r7
 8006a94:	f7f9 fbfa 	bl	800028c <__adddf3>
 8006a98:	4642      	mov	r2, r8
 8006a9a:	e9cd 0100 	strd	r0, r1, [sp]
 8006a9e:	464b      	mov	r3, r9
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	f7f9 fbf0 	bl	8000288 <__aeabi_dsub>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ab0:	f7fa f832 	bl	8000b18 <__aeabi_dcmpgt>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	f47f ae00 	bne.w	80066ba <__ieee754_pow+0x3da>
 8006aba:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006abe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006ac2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006ac6:	fa43 fa0a 	asr.w	sl, r3, sl
 8006aca:	44da      	add	sl, fp
 8006acc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006ad0:	489d      	ldr	r0, [pc, #628]	@ (8006d48 <__ieee754_pow+0xa68>)
 8006ad2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006ad6:	4108      	asrs	r0, r1
 8006ad8:	ea00 030a 	and.w	r3, r0, sl
 8006adc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006ae0:	f1c1 0114 	rsb	r1, r1, #20
 8006ae4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006ae8:	fa4a fa01 	asr.w	sl, sl, r1
 8006aec:	f1bb 0f00 	cmp.w	fp, #0
 8006af0:	4640      	mov	r0, r8
 8006af2:	4649      	mov	r1, r9
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	bfb8      	it	lt
 8006afa:	f1ca 0a00 	rsblt	sl, sl, #0
 8006afe:	f7f9 fbc3 	bl	8000288 <__aeabi_dsub>
 8006b02:	4680      	mov	r8, r0
 8006b04:	4689      	mov	r9, r1
 8006b06:	4632      	mov	r2, r6
 8006b08:	463b      	mov	r3, r7
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	f7f9 fbbd 	bl	800028c <__adddf3>
 8006b12:	2400      	movs	r4, #0
 8006b14:	a37c      	add	r3, pc, #496	@ (adr r3, 8006d08 <__ieee754_pow+0xa28>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	460d      	mov	r5, r1
 8006b1e:	f7f9 fd6b 	bl	80005f8 <__aeabi_dmul>
 8006b22:	4642      	mov	r2, r8
 8006b24:	e9cd 0100 	strd	r0, r1, [sp]
 8006b28:	464b      	mov	r3, r9
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f7f9 fbab 	bl	8000288 <__aeabi_dsub>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4630      	mov	r0, r6
 8006b38:	4639      	mov	r1, r7
 8006b3a:	f7f9 fba5 	bl	8000288 <__aeabi_dsub>
 8006b3e:	a374      	add	r3, pc, #464	@ (adr r3, 8006d10 <__ieee754_pow+0xa30>)
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	f7f9 fd58 	bl	80005f8 <__aeabi_dmul>
 8006b48:	a373      	add	r3, pc, #460	@ (adr r3, 8006d18 <__ieee754_pow+0xa38>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	4680      	mov	r8, r0
 8006b50:	4689      	mov	r9, r1
 8006b52:	4620      	mov	r0, r4
 8006b54:	4629      	mov	r1, r5
 8006b56:	f7f9 fd4f 	bl	80005f8 <__aeabi_dmul>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4640      	mov	r0, r8
 8006b60:	4649      	mov	r1, r9
 8006b62:	f7f9 fb93 	bl	800028c <__adddf3>
 8006b66:	4604      	mov	r4, r0
 8006b68:	460d      	mov	r5, r1
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b72:	f7f9 fb8b 	bl	800028c <__adddf3>
 8006b76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b7a:	4680      	mov	r8, r0
 8006b7c:	4689      	mov	r9, r1
 8006b7e:	f7f9 fb83 	bl	8000288 <__aeabi_dsub>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4620      	mov	r0, r4
 8006b88:	4629      	mov	r1, r5
 8006b8a:	f7f9 fb7d 	bl	8000288 <__aeabi_dsub>
 8006b8e:	4642      	mov	r2, r8
 8006b90:	4606      	mov	r6, r0
 8006b92:	460f      	mov	r7, r1
 8006b94:	464b      	mov	r3, r9
 8006b96:	4640      	mov	r0, r8
 8006b98:	4649      	mov	r1, r9
 8006b9a:	f7f9 fd2d 	bl	80005f8 <__aeabi_dmul>
 8006b9e:	a360      	add	r3, pc, #384	@ (adr r3, 8006d20 <__ieee754_pow+0xa40>)
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	460d      	mov	r5, r1
 8006ba8:	f7f9 fd26 	bl	80005f8 <__aeabi_dmul>
 8006bac:	a35e      	add	r3, pc, #376	@ (adr r3, 8006d28 <__ieee754_pow+0xa48>)
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	f7f9 fb69 	bl	8000288 <__aeabi_dsub>
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	462b      	mov	r3, r5
 8006bba:	f7f9 fd1d 	bl	80005f8 <__aeabi_dmul>
 8006bbe:	a35c      	add	r3, pc, #368	@ (adr r3, 8006d30 <__ieee754_pow+0xa50>)
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f7f9 fb62 	bl	800028c <__adddf3>
 8006bc8:	4622      	mov	r2, r4
 8006bca:	462b      	mov	r3, r5
 8006bcc:	f7f9 fd14 	bl	80005f8 <__aeabi_dmul>
 8006bd0:	a359      	add	r3, pc, #356	@ (adr r3, 8006d38 <__ieee754_pow+0xa58>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f7f9 fb57 	bl	8000288 <__aeabi_dsub>
 8006bda:	4622      	mov	r2, r4
 8006bdc:	462b      	mov	r3, r5
 8006bde:	f7f9 fd0b 	bl	80005f8 <__aeabi_dmul>
 8006be2:	a357      	add	r3, pc, #348	@ (adr r3, 8006d40 <__ieee754_pow+0xa60>)
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f7f9 fb50 	bl	800028c <__adddf3>
 8006bec:	4622      	mov	r2, r4
 8006bee:	462b      	mov	r3, r5
 8006bf0:	f7f9 fd02 	bl	80005f8 <__aeabi_dmul>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	f7f9 fb44 	bl	8000288 <__aeabi_dsub>
 8006c00:	4604      	mov	r4, r0
 8006c02:	460d      	mov	r5, r1
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4640      	mov	r0, r8
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	f7f9 fcf4 	bl	80005f8 <__aeabi_dmul>
 8006c10:	2200      	movs	r2, #0
 8006c12:	e9cd 0100 	strd	r0, r1, [sp]
 8006c16:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	f7f9 fb33 	bl	8000288 <__aeabi_dsub>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c2a:	f7f9 fe0f 	bl	800084c <__aeabi_ddiv>
 8006c2e:	4632      	mov	r2, r6
 8006c30:	4604      	mov	r4, r0
 8006c32:	460d      	mov	r5, r1
 8006c34:	463b      	mov	r3, r7
 8006c36:	4640      	mov	r0, r8
 8006c38:	4649      	mov	r1, r9
 8006c3a:	f7f9 fcdd 	bl	80005f8 <__aeabi_dmul>
 8006c3e:	4632      	mov	r2, r6
 8006c40:	463b      	mov	r3, r7
 8006c42:	f7f9 fb23 	bl	800028c <__adddf3>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	f7f9 fb1b 	bl	8000288 <__aeabi_dsub>
 8006c52:	4642      	mov	r2, r8
 8006c54:	464b      	mov	r3, r9
 8006c56:	f7f9 fb17 	bl	8000288 <__aeabi_dsub>
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	493b      	ldr	r1, [pc, #236]	@ (8006d4c <__ieee754_pow+0xa6c>)
 8006c60:	2000      	movs	r0, #0
 8006c62:	f7f9 fb11 	bl	8000288 <__aeabi_dsub>
 8006c66:	ec41 0b10 	vmov	d0, r0, r1
 8006c6a:	ee10 3a90 	vmov	r3, s1
 8006c6e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006c72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c76:	da30      	bge.n	8006cda <__ieee754_pow+0x9fa>
 8006c78:	4650      	mov	r0, sl
 8006c7a:	f000 f87d 	bl	8006d78 <scalbn>
 8006c7e:	ec51 0b10 	vmov	r0, r1, d0
 8006c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c86:	f7ff bbd2 	b.w	800642e <__ieee754_pow+0x14e>
 8006c8a:	4c31      	ldr	r4, [pc, #196]	@ (8006d50 <__ieee754_pow+0xa70>)
 8006c8c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006c90:	42a3      	cmp	r3, r4
 8006c92:	d91a      	bls.n	8006cca <__ieee754_pow+0x9ea>
 8006c94:	4b2f      	ldr	r3, [pc, #188]	@ (8006d54 <__ieee754_pow+0xa74>)
 8006c96:	440b      	add	r3, r1
 8006c98:	4303      	orrs	r3, r0
 8006c9a:	d009      	beq.n	8006cb0 <__ieee754_pow+0x9d0>
 8006c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f7f9 ff1a 	bl	8000adc <__aeabi_dcmplt>
 8006ca8:	3800      	subs	r0, #0
 8006caa:	bf18      	it	ne
 8006cac:	2001      	movne	r0, #1
 8006cae:	e42b      	b.n	8006508 <__ieee754_pow+0x228>
 8006cb0:	4642      	mov	r2, r8
 8006cb2:	464b      	mov	r3, r9
 8006cb4:	f7f9 fae8 	bl	8000288 <__aeabi_dsub>
 8006cb8:	4632      	mov	r2, r6
 8006cba:	463b      	mov	r3, r7
 8006cbc:	f7f9 ff22 	bl	8000b04 <__aeabi_dcmpge>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d1eb      	bne.n	8006c9c <__ieee754_pow+0x9bc>
 8006cc4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8006d64 <__ieee754_pow+0xa84>
 8006cc8:	e6f7      	b.n	8006aba <__ieee754_pow+0x7da>
 8006cca:	469a      	mov	sl, r3
 8006ccc:	4b22      	ldr	r3, [pc, #136]	@ (8006d58 <__ieee754_pow+0xa78>)
 8006cce:	459a      	cmp	sl, r3
 8006cd0:	f63f aef3 	bhi.w	8006aba <__ieee754_pow+0x7da>
 8006cd4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006cd8:	e715      	b.n	8006b06 <__ieee754_pow+0x826>
 8006cda:	ec51 0b10 	vmov	r0, r1, d0
 8006cde:	4619      	mov	r1, r3
 8006ce0:	e7cf      	b.n	8006c82 <__ieee754_pow+0x9a2>
 8006ce2:	491a      	ldr	r1, [pc, #104]	@ (8006d4c <__ieee754_pow+0xa6c>)
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f7ff bb18 	b.w	800631a <__ieee754_pow+0x3a>
 8006cea:	2000      	movs	r0, #0
 8006cec:	2100      	movs	r1, #0
 8006cee:	f7ff bb14 	b.w	800631a <__ieee754_pow+0x3a>
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	f7ff bb10 	b.w	800631a <__ieee754_pow+0x3a>
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	f7ff bb5e 	b.w	80063bc <__ieee754_pow+0xdc>
 8006d00:	2400      	movs	r4, #0
 8006d02:	f7ff bb49 	b.w	8006398 <__ieee754_pow+0xb8>
 8006d06:	bf00      	nop
 8006d08:	00000000 	.word	0x00000000
 8006d0c:	3fe62e43 	.word	0x3fe62e43
 8006d10:	fefa39ef 	.word	0xfefa39ef
 8006d14:	3fe62e42 	.word	0x3fe62e42
 8006d18:	0ca86c39 	.word	0x0ca86c39
 8006d1c:	be205c61 	.word	0xbe205c61
 8006d20:	72bea4d0 	.word	0x72bea4d0
 8006d24:	3e663769 	.word	0x3e663769
 8006d28:	c5d26bf1 	.word	0xc5d26bf1
 8006d2c:	3ebbbd41 	.word	0x3ebbbd41
 8006d30:	af25de2c 	.word	0xaf25de2c
 8006d34:	3f11566a 	.word	0x3f11566a
 8006d38:	16bebd93 	.word	0x16bebd93
 8006d3c:	3f66c16c 	.word	0x3f66c16c
 8006d40:	5555553e 	.word	0x5555553e
 8006d44:	3fc55555 	.word	0x3fc55555
 8006d48:	fff00000 	.word	0xfff00000
 8006d4c:	3ff00000 	.word	0x3ff00000
 8006d50:	4090cbff 	.word	0x4090cbff
 8006d54:	3f6f3400 	.word	0x3f6f3400
 8006d58:	3fe00000 	.word	0x3fe00000
 8006d5c:	652b82fe 	.word	0x652b82fe
 8006d60:	3c971547 	.word	0x3c971547
 8006d64:	4090cc00 	.word	0x4090cc00

08006d68 <fabs>:
 8006d68:	ec51 0b10 	vmov	r0, r1, d0
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006d72:	ec43 2b10 	vmov	d0, r2, r3
 8006d76:	4770      	bx	lr

08006d78 <scalbn>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	ec55 4b10 	vmov	r4, r5, d0
 8006d7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006d82:	4606      	mov	r6, r0
 8006d84:	462b      	mov	r3, r5
 8006d86:	b991      	cbnz	r1, 8006dae <scalbn+0x36>
 8006d88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006d8c:	4323      	orrs	r3, r4
 8006d8e:	d03d      	beq.n	8006e0c <scalbn+0x94>
 8006d90:	4b35      	ldr	r3, [pc, #212]	@ (8006e68 <scalbn+0xf0>)
 8006d92:	4620      	mov	r0, r4
 8006d94:	4629      	mov	r1, r5
 8006d96:	2200      	movs	r2, #0
 8006d98:	f7f9 fc2e 	bl	80005f8 <__aeabi_dmul>
 8006d9c:	4b33      	ldr	r3, [pc, #204]	@ (8006e6c <scalbn+0xf4>)
 8006d9e:	429e      	cmp	r6, r3
 8006da0:	4604      	mov	r4, r0
 8006da2:	460d      	mov	r5, r1
 8006da4:	da0f      	bge.n	8006dc6 <scalbn+0x4e>
 8006da6:	a328      	add	r3, pc, #160	@ (adr r3, 8006e48 <scalbn+0xd0>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	e01e      	b.n	8006dec <scalbn+0x74>
 8006dae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006db2:	4291      	cmp	r1, r2
 8006db4:	d10b      	bne.n	8006dce <scalbn+0x56>
 8006db6:	4622      	mov	r2, r4
 8006db8:	4620      	mov	r0, r4
 8006dba:	4629      	mov	r1, r5
 8006dbc:	f7f9 fa66 	bl	800028c <__adddf3>
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	e022      	b.n	8006e0c <scalbn+0x94>
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006dcc:	3936      	subs	r1, #54	@ 0x36
 8006dce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006dd2:	4296      	cmp	r6, r2
 8006dd4:	dd0d      	ble.n	8006df2 <scalbn+0x7a>
 8006dd6:	2d00      	cmp	r5, #0
 8006dd8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006e50 <scalbn+0xd8>)
 8006dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dde:	da02      	bge.n	8006de6 <scalbn+0x6e>
 8006de0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006e58 <scalbn+0xe0>)
 8006de2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006de6:	a31a      	add	r3, pc, #104	@ (adr r3, 8006e50 <scalbn+0xd8>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f7f9 fc04 	bl	80005f8 <__aeabi_dmul>
 8006df0:	e7e6      	b.n	8006dc0 <scalbn+0x48>
 8006df2:	1872      	adds	r2, r6, r1
 8006df4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006df8:	428a      	cmp	r2, r1
 8006dfa:	dcec      	bgt.n	8006dd6 <scalbn+0x5e>
 8006dfc:	2a00      	cmp	r2, #0
 8006dfe:	dd08      	ble.n	8006e12 <scalbn+0x9a>
 8006e00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006e04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006e08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006e0c:	ec45 4b10 	vmov	d0, r4, r5
 8006e10:	bd70      	pop	{r4, r5, r6, pc}
 8006e12:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006e16:	da08      	bge.n	8006e2a <scalbn+0xb2>
 8006e18:	2d00      	cmp	r5, #0
 8006e1a:	a10b      	add	r1, pc, #44	@ (adr r1, 8006e48 <scalbn+0xd0>)
 8006e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e20:	dac1      	bge.n	8006da6 <scalbn+0x2e>
 8006e22:	a10f      	add	r1, pc, #60	@ (adr r1, 8006e60 <scalbn+0xe8>)
 8006e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e28:	e7bd      	b.n	8006da6 <scalbn+0x2e>
 8006e2a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006e2e:	3236      	adds	r2, #54	@ 0x36
 8006e30:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006e34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006e38:	4620      	mov	r0, r4
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <scalbn+0xf8>)
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	2200      	movs	r2, #0
 8006e40:	e7d4      	b.n	8006dec <scalbn+0x74>
 8006e42:	bf00      	nop
 8006e44:	f3af 8000 	nop.w
 8006e48:	c2f8f359 	.word	0xc2f8f359
 8006e4c:	01a56e1f 	.word	0x01a56e1f
 8006e50:	8800759c 	.word	0x8800759c
 8006e54:	7e37e43c 	.word	0x7e37e43c
 8006e58:	8800759c 	.word	0x8800759c
 8006e5c:	fe37e43c 	.word	0xfe37e43c
 8006e60:	c2f8f359 	.word	0xc2f8f359
 8006e64:	81a56e1f 	.word	0x81a56e1f
 8006e68:	43500000 	.word	0x43500000
 8006e6c:	ffff3cb0 	.word	0xffff3cb0
 8006e70:	3c900000 	.word	0x3c900000

08006e74 <with_errno>:
 8006e74:	b510      	push	{r4, lr}
 8006e76:	ed2d 8b02 	vpush	{d8}
 8006e7a:	eeb0 8a40 	vmov.f32	s16, s0
 8006e7e:	eef0 8a60 	vmov.f32	s17, s1
 8006e82:	4604      	mov	r4, r0
 8006e84:	f7fe fd36 	bl	80058f4 <__errno>
 8006e88:	eeb0 0a48 	vmov.f32	s0, s16
 8006e8c:	eef0 0a68 	vmov.f32	s1, s17
 8006e90:	ecbd 8b02 	vpop	{d8}
 8006e94:	6004      	str	r4, [r0, #0]
 8006e96:	bd10      	pop	{r4, pc}

08006e98 <xflow>:
 8006e98:	4603      	mov	r3, r0
 8006e9a:	b507      	push	{r0, r1, r2, lr}
 8006e9c:	ec51 0b10 	vmov	r0, r1, d0
 8006ea0:	b183      	cbz	r3, 8006ec4 <xflow+0x2c>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ea8:	e9cd 2300 	strd	r2, r3, [sp]
 8006eac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eb0:	f7f9 fba2 	bl	80005f8 <__aeabi_dmul>
 8006eb4:	ec41 0b10 	vmov	d0, r0, r1
 8006eb8:	2022      	movs	r0, #34	@ 0x22
 8006eba:	b003      	add	sp, #12
 8006ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec0:	f7ff bfd8 	b.w	8006e74 <with_errno>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	e7ee      	b.n	8006ea8 <xflow+0x10>
 8006eca:	0000      	movs	r0, r0
 8006ecc:	0000      	movs	r0, r0
	...

08006ed0 <__math_uflow>:
 8006ed0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006ed8 <__math_uflow+0x8>
 8006ed4:	f7ff bfe0 	b.w	8006e98 <xflow>
 8006ed8:	00000000 	.word	0x00000000
 8006edc:	10000000 	.word	0x10000000

08006ee0 <__math_oflow>:
 8006ee0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006ee8 <__math_oflow+0x8>
 8006ee4:	f7ff bfd8 	b.w	8006e98 <xflow>
 8006ee8:	00000000 	.word	0x00000000
 8006eec:	70000000 	.word	0x70000000

08006ef0 <__ieee754_sqrt>:
 8006ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	4a68      	ldr	r2, [pc, #416]	@ (8007098 <__ieee754_sqrt+0x1a8>)
 8006ef6:	ec55 4b10 	vmov	r4, r5, d0
 8006efa:	43aa      	bics	r2, r5
 8006efc:	462b      	mov	r3, r5
 8006efe:	4621      	mov	r1, r4
 8006f00:	d110      	bne.n	8006f24 <__ieee754_sqrt+0x34>
 8006f02:	4622      	mov	r2, r4
 8006f04:	4620      	mov	r0, r4
 8006f06:	4629      	mov	r1, r5
 8006f08:	f7f9 fb76 	bl	80005f8 <__aeabi_dmul>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4620      	mov	r0, r4
 8006f12:	4629      	mov	r1, r5
 8006f14:	f7f9 f9ba 	bl	800028c <__adddf3>
 8006f18:	4604      	mov	r4, r0
 8006f1a:	460d      	mov	r5, r1
 8006f1c:	ec45 4b10 	vmov	d0, r4, r5
 8006f20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f24:	2d00      	cmp	r5, #0
 8006f26:	dc0e      	bgt.n	8006f46 <__ieee754_sqrt+0x56>
 8006f28:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006f2c:	4322      	orrs	r2, r4
 8006f2e:	d0f5      	beq.n	8006f1c <__ieee754_sqrt+0x2c>
 8006f30:	b19d      	cbz	r5, 8006f5a <__ieee754_sqrt+0x6a>
 8006f32:	4622      	mov	r2, r4
 8006f34:	4620      	mov	r0, r4
 8006f36:	4629      	mov	r1, r5
 8006f38:	f7f9 f9a6 	bl	8000288 <__aeabi_dsub>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	f7f9 fc84 	bl	800084c <__aeabi_ddiv>
 8006f44:	e7e8      	b.n	8006f18 <__ieee754_sqrt+0x28>
 8006f46:	152a      	asrs	r2, r5, #20
 8006f48:	d115      	bne.n	8006f76 <__ieee754_sqrt+0x86>
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	e009      	b.n	8006f62 <__ieee754_sqrt+0x72>
 8006f4e:	0acb      	lsrs	r3, r1, #11
 8006f50:	3a15      	subs	r2, #21
 8006f52:	0549      	lsls	r1, r1, #21
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0fa      	beq.n	8006f4e <__ieee754_sqrt+0x5e>
 8006f58:	e7f7      	b.n	8006f4a <__ieee754_sqrt+0x5a>
 8006f5a:	462a      	mov	r2, r5
 8006f5c:	e7fa      	b.n	8006f54 <__ieee754_sqrt+0x64>
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	3001      	adds	r0, #1
 8006f62:	02dc      	lsls	r4, r3, #11
 8006f64:	d5fb      	bpl.n	8006f5e <__ieee754_sqrt+0x6e>
 8006f66:	1e44      	subs	r4, r0, #1
 8006f68:	1b12      	subs	r2, r2, r4
 8006f6a:	f1c0 0420 	rsb	r4, r0, #32
 8006f6e:	fa21 f404 	lsr.w	r4, r1, r4
 8006f72:	4323      	orrs	r3, r4
 8006f74:	4081      	lsls	r1, r0
 8006f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f7a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f82:	07d2      	lsls	r2, r2, #31
 8006f84:	bf5c      	itt	pl
 8006f86:	005b      	lslpl	r3, r3, #1
 8006f88:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006f8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f90:	bf58      	it	pl
 8006f92:	0049      	lslpl	r1, r1, #1
 8006f94:	2600      	movs	r6, #0
 8006f96:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006f9a:	106d      	asrs	r5, r5, #1
 8006f9c:	0049      	lsls	r1, r1, #1
 8006f9e:	2016      	movs	r0, #22
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006fa6:	1917      	adds	r7, r2, r4
 8006fa8:	429f      	cmp	r7, r3
 8006faa:	bfde      	ittt	le
 8006fac:	193a      	addle	r2, r7, r4
 8006fae:	1bdb      	suble	r3, r3, r7
 8006fb0:	1936      	addle	r6, r6, r4
 8006fb2:	0fcf      	lsrs	r7, r1, #31
 8006fb4:	3801      	subs	r0, #1
 8006fb6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006fba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006fbe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006fc2:	d1f0      	bne.n	8006fa6 <__ieee754_sqrt+0xb6>
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	2720      	movs	r7, #32
 8006fc8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	eb00 0e0c 	add.w	lr, r0, ip
 8006fd2:	db02      	blt.n	8006fda <__ieee754_sqrt+0xea>
 8006fd4:	d113      	bne.n	8006ffe <__ieee754_sqrt+0x10e>
 8006fd6:	458e      	cmp	lr, r1
 8006fd8:	d811      	bhi.n	8006ffe <__ieee754_sqrt+0x10e>
 8006fda:	f1be 0f00 	cmp.w	lr, #0
 8006fde:	eb0e 000c 	add.w	r0, lr, ip
 8006fe2:	da42      	bge.n	800706a <__ieee754_sqrt+0x17a>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	db40      	blt.n	800706a <__ieee754_sqrt+0x17a>
 8006fe8:	f102 0801 	add.w	r8, r2, #1
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	458e      	cmp	lr, r1
 8006ff0:	bf88      	it	hi
 8006ff2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006ff6:	eba1 010e 	sub.w	r1, r1, lr
 8006ffa:	4464      	add	r4, ip
 8006ffc:	4642      	mov	r2, r8
 8006ffe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007002:	3f01      	subs	r7, #1
 8007004:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007008:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800700c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007010:	d1dc      	bne.n	8006fcc <__ieee754_sqrt+0xdc>
 8007012:	4319      	orrs	r1, r3
 8007014:	d01b      	beq.n	800704e <__ieee754_sqrt+0x15e>
 8007016:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800709c <__ieee754_sqrt+0x1ac>
 800701a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80070a0 <__ieee754_sqrt+0x1b0>
 800701e:	e9da 0100 	ldrd	r0, r1, [sl]
 8007022:	e9db 2300 	ldrd	r2, r3, [fp]
 8007026:	f7f9 f92f 	bl	8000288 <__aeabi_dsub>
 800702a:	e9da 8900 	ldrd	r8, r9, [sl]
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4640      	mov	r0, r8
 8007034:	4649      	mov	r1, r9
 8007036:	f7f9 fd5b 	bl	8000af0 <__aeabi_dcmple>
 800703a:	b140      	cbz	r0, 800704e <__ieee754_sqrt+0x15e>
 800703c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007040:	e9da 0100 	ldrd	r0, r1, [sl]
 8007044:	e9db 2300 	ldrd	r2, r3, [fp]
 8007048:	d111      	bne.n	800706e <__ieee754_sqrt+0x17e>
 800704a:	3601      	adds	r6, #1
 800704c:	463c      	mov	r4, r7
 800704e:	1072      	asrs	r2, r6, #1
 8007050:	0863      	lsrs	r3, r4, #1
 8007052:	07f1      	lsls	r1, r6, #31
 8007054:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007058:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800705c:	bf48      	it	mi
 800705e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007062:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007066:	4618      	mov	r0, r3
 8007068:	e756      	b.n	8006f18 <__ieee754_sqrt+0x28>
 800706a:	4690      	mov	r8, r2
 800706c:	e7be      	b.n	8006fec <__ieee754_sqrt+0xfc>
 800706e:	f7f9 f90d 	bl	800028c <__adddf3>
 8007072:	e9da 8900 	ldrd	r8, r9, [sl]
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	4640      	mov	r0, r8
 800707c:	4649      	mov	r1, r9
 800707e:	f7f9 fd2d 	bl	8000adc <__aeabi_dcmplt>
 8007082:	b120      	cbz	r0, 800708e <__ieee754_sqrt+0x19e>
 8007084:	1ca0      	adds	r0, r4, #2
 8007086:	bf08      	it	eq
 8007088:	3601      	addeq	r6, #1
 800708a:	3402      	adds	r4, #2
 800708c:	e7df      	b.n	800704e <__ieee754_sqrt+0x15e>
 800708e:	1c63      	adds	r3, r4, #1
 8007090:	f023 0401 	bic.w	r4, r3, #1
 8007094:	e7db      	b.n	800704e <__ieee754_sqrt+0x15e>
 8007096:	bf00      	nop
 8007098:	7ff00000 	.word	0x7ff00000
 800709c:	20000068 	.word	0x20000068
 80070a0:	20000060 	.word	0x20000060

080070a4 <_init>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	bf00      	nop
 80070a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070aa:	bc08      	pop	{r3}
 80070ac:	469e      	mov	lr, r3
 80070ae:	4770      	bx	lr

080070b0 <_fini>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	bf00      	nop
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr
