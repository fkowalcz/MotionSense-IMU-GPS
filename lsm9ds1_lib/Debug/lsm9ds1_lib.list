
lsm9ds1_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004bec  08004bec  00005bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c70  08004c70  00006088  2**0
                  CONTENTS
  4 .ARM          00000008  08004c70  08004c70  00005c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c78  08004c78  00006088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c7c  08004c7c  00005c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08004c80  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000088  08004d08  00006088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004d08  0000633c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138b7  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b4  00000000  00000000  0001996f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0001c228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd9  00000000  00000000  0001d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027253  00000000  00000000  0001e1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170ac  00000000  00000000  00045404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f61a7  00000000  00000000  0005c4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f58  00000000  00000000  0015269c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001575f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bd4 	.word	0x08004bd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08004bd4 	.word	0x08004bd4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a2a      	ldr	r2, [pc, #168]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f000 fe9b 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <MX_GPIO_Init+0xc8>)
 80005fa:	f000 fce3 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005fe:	2320      	movs	r3, #32
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000618:	f000 fcd4 	bl	8000fc4 <HAL_GPIO_Init>

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	@ 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000800 	.word	0x48000800

0800062c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000632:	4a1c      	ldr	r2, [pc, #112]	@ (80006a4 <MX_I2C1_Init+0x78>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000636:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000638:	4a1b      	ldr	r2, [pc, #108]	@ (80006a8 <MX_I2C1_Init+0x7c>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800063c:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000644:	2201      	movs	r2, #1
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000648:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064e:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000654:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000666:	480e      	ldr	r0, [pc, #56]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000668:	f000 fe88 	bl	800137c <HAL_I2C_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000672:	f000 f95b 	bl	800092c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000676:	2100      	movs	r1, #0
 8000678:	4809      	ldr	r0, [pc, #36]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800067a:	f001 f963 	bl	8001944 <HAL_I2CEx_ConfigAnalogFilter>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000684:	f000 f952 	bl	800092c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000688:	2100      	movs	r1, #0
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800068c:	f001 f9a5 	bl	80019da <HAL_I2CEx_ConfigDigitalFilter>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 f949 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000a4 	.word	0x200000a4
 80006a4:	40005400 	.word	0x40005400
 80006a8:	10d19ce4 	.word	0x10d19ce4

080006ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0ac      	sub	sp, #176	@ 0xb0
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2288      	movs	r2, #136	@ 0x88
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 fe01 	bl	80042d4 <memset>
  if(i2cHandle->Instance==I2C1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a21      	ldr	r2, [pc, #132]	@ (800075c <HAL_I2C_MspInit+0xb0>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d13a      	bne.n	8000752 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006dc:	2340      	movs	r3, #64	@ 0x40
 80006de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 f827 	bl	800273c <HAL_RCCEx_PeriphCLKConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006f4:	f000 f91a 	bl	800092c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fc:	4a18      	ldr	r2, [pc, #96]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000708:	f003 0302 	and.w	r3, r3, #2
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000710:	23c0      	movs	r3, #192	@ 0xc0
 8000712:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000716:	2312      	movs	r3, #18
 8000718:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000728:	2304      	movs	r3, #4
 800072a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000732:	4619      	mov	r1, r3
 8000734:	480b      	ldr	r0, [pc, #44]	@ (8000764 <HAL_I2C_MspInit+0xb8>)
 8000736:	f000 fc45 	bl	8000fc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073e:	4a08      	ldr	r2, [pc, #32]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 8000740:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000744:	6593      	str	r3, [r2, #88]	@ 0x58
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800074a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000752:	bf00      	nop
 8000754:	37b0      	adds	r7, #176	@ 0xb0
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40005400 	.word	0x40005400
 8000760:	40021000 	.word	0x40021000
 8000764:	48000400 	.word	0x48000400

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fa9c 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f874 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f7ff fef4 	bl	8000560 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000778:	f000 f9e0 	bl	8000b3c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800077c:	f7ff ff56 	bl	800062c <MX_I2C1_Init>
  MX_TIM6_Init();
 8000780:	f000 f980 	bl	8000a84 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000784:	482a      	ldr	r0, [pc, #168]	@ (8000830 <main+0xc8>)
 8000786:	f002 fced 	bl	8003164 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /*-[ I2C Bus Scanning ]-*/
  HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 800078a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800078e:	221a      	movs	r2, #26
 8000790:	4928      	ldr	r1, [pc, #160]	@ (8000834 <main+0xcc>)
 8000792:	4829      	ldr	r0, [pc, #164]	@ (8000838 <main+0xd0>)
 8000794:	f003 f820 	bl	80037d8 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 8000798:	4b28      	ldr	r3, [pc, #160]	@ (800083c <main+0xd4>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e034      	b.n	800080a <main+0xa2>
  {
      ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80007a0:	4b26      	ldr	r3, [pc, #152]	@ (800083c <main+0xd4>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	b299      	uxth	r1, r3
 80007a8:	2305      	movs	r3, #5
 80007aa:	2203      	movs	r2, #3
 80007ac:	4824      	ldr	r0, [pc, #144]	@ (8000840 <main+0xd8>)
 80007ae:	f000 fe80 	bl	80014b2 <HAL_I2C_IsDeviceReady>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <main+0xdc>)
 80007b8:	701a      	strb	r2, [r3, #0]
      if (ret != HAL_OK) /* No ACK Received At That Address */
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <main+0xdc>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d007      	beq.n	80007d2 <main+0x6a>
      {
          HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 80007c2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80007c6:	2204      	movs	r2, #4
 80007c8:	491f      	ldr	r1, [pc, #124]	@ (8000848 <main+0xe0>)
 80007ca:	481b      	ldr	r0, [pc, #108]	@ (8000838 <main+0xd0>)
 80007cc:	f003 f804 	bl	80037d8 <HAL_UART_Transmit>
 80007d0:	e015      	b.n	80007fe <main+0x96>
      }
      else if(ret == HAL_OK)
 80007d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <main+0xdc>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d111      	bne.n	80007fe <main+0x96>
      {
          sprintf(Buffer, "0x%X", i);
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <main+0xd4>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	491a      	ldr	r1, [pc, #104]	@ (800084c <main+0xe4>)
 80007e2:	481b      	ldr	r0, [pc, #108]	@ (8000850 <main+0xe8>)
 80007e4:	f003 fd56 	bl	8004294 <siprintf>
          check = i;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <main+0xd4>)
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <main+0xec>)
 80007ee:	701a      	strb	r2, [r3, #0]
          HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 80007f0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80007f4:	2219      	movs	r2, #25
 80007f6:	4916      	ldr	r1, [pc, #88]	@ (8000850 <main+0xe8>)
 80007f8:	480f      	ldr	r0, [pc, #60]	@ (8000838 <main+0xd0>)
 80007fa:	f002 ffed 	bl	80037d8 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 80007fe:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <main+0xd4>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <main+0xd4>)
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <main+0xd4>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b25b      	sxtb	r3, r3
 8000810:	2b00      	cmp	r3, #0
 8000812:	dac5      	bge.n	80007a0 <main+0x38>
      }
  }
  HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 8000814:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000818:	220b      	movs	r2, #11
 800081a:	490f      	ldr	r1, [pc, #60]	@ (8000858 <main+0xf0>)
 800081c:	4806      	ldr	r0, [pc, #24]	@ (8000838 <main+0xd0>)
 800081e:	f002 ffdb 	bl	80037d8 <HAL_UART_Transmit>
  /*--[ Scanning Done ]--*/
    HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8000822:	2120      	movs	r1, #32
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f000 fd8e 	bl	8001348 <HAL_GPIO_TogglePin>
//  while(LSM9DS1_Init_AccelGyro(&hi2c1) != 0)
//  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
//
//  check = LSM9DS1_Init_AccelGyro(&hi2c1);

  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <main+0xc4>
 8000830:	2000011c 	.word	0x2000011c
 8000834:	20000004 	.word	0x20000004
 8000838:	20000168 	.word	0x20000168
 800083c:	20000115 	.word	0x20000115
 8000840:	200000a4 	.word	0x200000a4
 8000844:	20000116 	.word	0x20000116
 8000848:	20000000 	.word	0x20000000
 800084c:	08004bec 	.word	0x08004bec
 8000850:	200000fc 	.word	0x200000fc
 8000854:	200000f9 	.word	0x200000f9
 8000858:	20000020 	.word	0x20000020

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b096      	sub	sp, #88	@ 0x58
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2244      	movs	r2, #68	@ 0x44
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f003 fd32 	bl	80042d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800087e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000882:	f001 f905 	bl	8001a90 <HAL_PWREx_ControlVoltageScaling>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800088c:	f000 f84e 	bl	800092c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000890:	2302      	movs	r3, #2
 8000892:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000898:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089a:	2310      	movs	r3, #16
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a2:	2302      	movs	r3, #2
 80008a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008aa:	230a      	movs	r3, #10
 80008ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008ae:	2307      	movs	r3, #7
 80008b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 f93c 	bl	8001b3c <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008ca:	f000 f82f 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	230f      	movs	r3, #15
 80008d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2303      	movs	r3, #3
 80008d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e2:	463b      	mov	r3, r7
 80008e4:	2104      	movs	r1, #4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fd04 	bl	80022f4 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008f2:	f000 f81b 	bl	800092c <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3758      	adds	r7, #88	@ 0x58
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
    if(htim == &htim6)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d102      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        IMU_flag=1;
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
    }
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	2000011c 	.word	0x2000011c
 8000928:	200000f8 	.word	0x200000f8

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <HAL_MspInit+0x44>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000942:	4a0e      	ldr	r2, [pc, #56]	@ (800097c <HAL_MspInit+0x44>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6613      	str	r3, [r2, #96]	@ 0x60
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <HAL_MspInit+0x44>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <HAL_MspInit+0x44>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095a:	4a08      	ldr	r2, [pc, #32]	@ (800097c <HAL_MspInit+0x44>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	6593      	str	r3, [r2, #88]	@ 0x58
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_MspInit+0x44>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <NMI_Handler+0x4>

08000988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <MemManage_Handler+0x4>

08000998 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d6:	f000 f9c3 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009e4:	4802      	ldr	r0, [pc, #8]	@ (80009f0 <TIM6_DAC_IRQHandler+0x10>)
 80009e6:	f002 fc2d 	bl	8003244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000011c 	.word	0x2000011c

080009f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009fc:	4a14      	ldr	r2, [pc, #80]	@ (8000a50 <_sbrk+0x5c>)
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <_sbrk+0x60>)
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a08:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <_sbrk+0x64>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	@ (8000a5c <_sbrk+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d207      	bcs.n	8000a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a24:	f003 fc5e 	bl	80042e4 <__errno>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	e009      	b.n	8000a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3a:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a05      	ldr	r2, [pc, #20]	@ (8000a58 <_sbrk+0x64>)
 8000a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20018000 	.word	0x20018000
 8000a54:	00000400 	.word	0x00000400
 8000a58:	20000118 	.word	0x20000118
 8000a5c:	20000340 	.word	0x20000340

08000a60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	@ (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000a96:	4a15      	ldr	r2, [pc, #84]	@ (8000aec <MX_TIM6_Init+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000aa8:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000aac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ab4:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000ab6:	f002 fafd 	bl	80030b4 <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ac0:	f7ff ff34 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000ad2:	f002 fd8d 	bl	80035f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000adc:	f7ff ff26 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2000011c 	.word	0x2000011c
 8000aec:	40001000 	.word	0x40001000

08000af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <HAL_TIM_Base_MspInit+0x44>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d113      	bne.n	8000b2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <HAL_TIM_Base_MspInit+0x48>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b06:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <HAL_TIM_Base_MspInit+0x48>)
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_TIM_Base_MspInit+0x48>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2036      	movs	r0, #54	@ 0x36
 8000b20:	f000 fa19 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b24:	2036      	movs	r0, #54	@ 0x36
 8000b26:	f000 fa32 	bl	8000f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40001000 	.word	0x40001000
 8000b38:	40021000 	.word	0x40021000

08000b3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b40:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b42:	4a15      	ldr	r2, [pc, #84]	@ (8000b98 <MX_USART2_UART_Init+0x5c>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b80:	f002 fddc 	bl	800373c <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b8a:	f7ff fecf 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000168 	.word	0x20000168
 8000b98:	40004400 	.word	0x40004400

08000b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0ac      	sub	sp, #176	@ 0xb0
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2288      	movs	r2, #136	@ 0x88
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 fb89 	bl	80042d4 <memset>
  if(uartHandle->Instance==USART2)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a21      	ldr	r2, [pc, #132]	@ (8000c4c <HAL_UART_MspInit+0xb0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d13b      	bne.n	8000c44 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 fdaf 	bl	800273c <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be4:	f7ff fea2 	bl	800092c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be8:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <HAL_UART_MspInit+0xb4>)
 8000bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bec:	4a18      	ldr	r2, [pc, #96]	@ (8000c50 <HAL_UART_MspInit+0xb4>)
 8000bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <HAL_UART_MspInit+0xb4>)
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <HAL_UART_MspInit+0xb4>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c04:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <HAL_UART_MspInit+0xb4>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0c:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <HAL_UART_MspInit+0xb4>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c30:	2307      	movs	r3, #7
 8000c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c40:	f000 f9c0 	bl	8000fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c44:	bf00      	nop
 8000c46:	37b0      	adds	r7, #176	@ 0xb0
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	40021000 	.word	0x40021000

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff ff02 	bl	8000a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f003 fb35 	bl	80042f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fd6f 	bl	8000768 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c98:	08004c80 	.word	0x08004c80
  ldr r2, =_sbss
 8000c9c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000ca0:	2000033c 	.word	0x2000033c

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_Init+0x3c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce4 <HAL_Init+0x3c>)
 8000cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	f000 f93e 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 f80f 	bl	8000ce8 <HAL_InitTick>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	e001      	b.n	8000cda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd6:	f7ff fe2f 	bl	8000938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40022000 	.word	0x40022000

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cf4:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <HAL_InitTick+0x6c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d023      	beq.n	8000d44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_InitTick+0x70>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <HAL_InitTick+0x6c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f949 	bl	8000faa <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10f      	bne.n	8000d3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d809      	bhi.n	8000d38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f000 f913 	bl	8000f56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d30:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <HAL_InitTick+0x74>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e007      	b.n	8000d48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	e004      	b.n	8000d48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e001      	b.n	8000d48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000034 	.word	0x20000034
 8000d58:	2000002c 	.word	0x2000002c
 8000d5c:	20000030 	.word	0x20000030

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000034 	.word	0x20000034
 8000d84:	200001f0 	.word	0x200001f0

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200001f0 	.word	0x200001f0

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	@ (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	@ (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	@ (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	@ 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	@ 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f7ff ff8e 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff29 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff3e 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff8e 	bl	8000e94 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5d 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff31 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffa2 	bl	8000efc <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	e17f      	b.n	80012d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8171 	beq.w	80012ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d005      	beq.n	8001004 <HAL_GPIO_Init+0x40>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d130      	bne.n	8001066 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800103a:	2201      	movs	r2, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	f003 0201 	and.w	r2, r3, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b03      	cmp	r3, #3
 8001070:	d118      	bne.n	80010a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001078:	2201      	movs	r2, #1
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	08db      	lsrs	r3, r3, #3
 800108e:	f003 0201 	and.w	r2, r3, #1
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d017      	beq.n	80010e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d123      	bne.n	8001134 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	08da      	lsrs	r2, r3, #3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3208      	adds	r2, #8
 80010f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	6939      	ldr	r1, [r7, #16]
 8001130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0203 	and.w	r2, r3, #3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80ac 	beq.w	80012ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	4b5f      	ldr	r3, [pc, #380]	@ (80012f4 <HAL_GPIO_Init+0x330>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117a:	4a5e      	ldr	r2, [pc, #376]	@ (80012f4 <HAL_GPIO_Init+0x330>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6613      	str	r3, [r2, #96]	@ 0x60
 8001182:	4b5c      	ldr	r3, [pc, #368]	@ (80012f4 <HAL_GPIO_Init+0x330>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800118e:	4a5a      	ldr	r2, [pc, #360]	@ (80012f8 <HAL_GPIO_Init+0x334>)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011b8:	d025      	beq.n	8001206 <HAL_GPIO_Init+0x242>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4f      	ldr	r2, [pc, #316]	@ (80012fc <HAL_GPIO_Init+0x338>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01f      	beq.n	8001202 <HAL_GPIO_Init+0x23e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001300 <HAL_GPIO_Init+0x33c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0x23a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001304 <HAL_GPIO_Init+0x340>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0x236>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001308 <HAL_GPIO_Init+0x344>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00d      	beq.n	80011f6 <HAL_GPIO_Init+0x232>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4b      	ldr	r2, [pc, #300]	@ (800130c <HAL_GPIO_Init+0x348>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x22e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001310 <HAL_GPIO_Init+0x34c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_GPIO_Init+0x22a>
 80011ea:	2306      	movs	r3, #6
 80011ec:	e00c      	b.n	8001208 <HAL_GPIO_Init+0x244>
 80011ee:	2307      	movs	r3, #7
 80011f0:	e00a      	b.n	8001208 <HAL_GPIO_Init+0x244>
 80011f2:	2305      	movs	r3, #5
 80011f4:	e008      	b.n	8001208 <HAL_GPIO_Init+0x244>
 80011f6:	2304      	movs	r3, #4
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x244>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x244>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x244>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x244>
 8001206:	2300      	movs	r3, #0
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	f002 0203 	and.w	r2, r2, #3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001218:	4937      	ldr	r1, [pc, #220]	@ (80012f8 <HAL_GPIO_Init+0x334>)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001226:	4b3b      	ldr	r3, [pc, #236]	@ (8001314 <HAL_GPIO_Init+0x350>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800124a:	4a32      	ldr	r2, [pc, #200]	@ (8001314 <HAL_GPIO_Init+0x350>)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001250:	4b30      	ldr	r3, [pc, #192]	@ (8001314 <HAL_GPIO_Init+0x350>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001274:	4a27      	ldr	r2, [pc, #156]	@ (8001314 <HAL_GPIO_Init+0x350>)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800127a:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <HAL_GPIO_Init+0x350>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800129e:	4a1d      	ldr	r2, [pc, #116]	@ (8001314 <HAL_GPIO_Init+0x350>)
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <HAL_GPIO_Init+0x350>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012c8:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <HAL_GPIO_Init+0x350>)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa22 f303 	lsr.w	r3, r2, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f47f ae78 	bne.w	8000fd4 <HAL_GPIO_Init+0x10>
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010000 	.word	0x40010000
 80012fc:	48000400 	.word	0x48000400
 8001300:	48000800 	.word	0x48000800
 8001304:	48000c00 	.word	0x48000c00
 8001308:	48001000 	.word	0x48001000
 800130c:	48001400 	.word	0x48001400
 8001310:	48001800 	.word	0x48001800
 8001314:	40010400 	.word	0x40010400

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001334:	e002      	b.n	800133c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4013      	ands	r3, r2
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43d9      	mvns	r1, r3
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	400b      	ands	r3, r1
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e08d      	b.n	80014aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff f982 	bl	80006ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2224      	movs	r2, #36	@ 0x24
 80013ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	e006      	b.n	8001404 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001402:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d108      	bne.n	800141e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	e007      	b.n	800142e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800142c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800143c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001440:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001450:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69d9      	ldr	r1, [r3, #28]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1a      	ldr	r2, [r3, #32]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2220      	movs	r2, #32
 8001496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b08a      	sub	sp, #40	@ 0x28
 80014b6:	af02      	add	r7, sp, #8
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	460b      	mov	r3, r1
 80014c0:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	f040 80d6 	bne.w	8001680 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014e2:	d101      	bne.n	80014e8 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80014e4:	2302      	movs	r3, #2
 80014e6:	e0cc      	b.n	8001682 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_I2C_IsDeviceReady+0x44>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e0c5      	b.n	8001682 <HAL_I2C_IsDeviceReady+0x1d0>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2224      	movs	r2, #36	@ 0x24
 8001502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d107      	bne.n	8001524 <HAL_I2C_IsDeviceReady+0x72>
 8001514:	897b      	ldrh	r3, [r7, #10]
 8001516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800151a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800151e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001522:	e006      	b.n	8001532 <HAL_I2C_IsDeviceReady+0x80>
 8001524:	897b      	ldrh	r3, [r7, #10]
 8001526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800152a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800152e:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001538:	f7ff fc26 	bl	8000d88 <HAL_GetTick>
 800153c:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0320 	and.w	r3, r3, #32
 8001548:	2b20      	cmp	r3, #32
 800154a:	bf0c      	ite	eq
 800154c:	2301      	moveq	r3, #1
 800154e:	2300      	movne	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	2b10      	cmp	r3, #16
 8001560:	bf0c      	ite	eq
 8001562:	2301      	moveq	r3, #1
 8001564:	2300      	movne	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800156a:	e034      	b.n	80015d6 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001572:	d01a      	beq.n	80015aa <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001574:	f7ff fc08 	bl	8000d88 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d302      	bcc.n	800158a <HAL_I2C_IsDeviceReady+0xd8>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10f      	bne.n	80015aa <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2220      	movs	r2, #32
 800158e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	f043 0220 	orr.w	r2, r3, #32
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e06b      	b.n	8001682 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0320 	and.w	r3, r3, #32
 80015b4:	2b20      	cmp	r3, #32
 80015b6:	bf0c      	ite	eq
 80015b8:	2301      	moveq	r3, #1
 80015ba:	2300      	movne	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b10      	cmp	r3, #16
 80015cc:	bf0c      	ite	eq
 80015ce:	2301      	moveq	r3, #1
 80015d0:	2300      	movne	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80015d6:	7ffb      	ldrb	r3, [r7, #31]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <HAL_I2C_IsDeviceReady+0x130>
 80015dc:	7fbb      	ldrb	r3, [r7, #30]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0c4      	beq.n	800156c <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b10      	cmp	r3, #16
 80015ee:	d01a      	beq.n	8001626 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	2120      	movs	r1, #32
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 f869 	bl	80016d2 <I2C_WaitOnFlagUntilTimeout>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e03b      	b.n	8001682 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2220      	movs	r2, #32
 8001610:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2220      	movs	r2, #32
 8001616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e02d      	b.n	8001682 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	2120      	movs	r1, #32
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 f84e 	bl	80016d2 <I2C_WaitOnFlagUntilTimeout>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e020      	b.n	8001682 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2210      	movs	r2, #16
 8001646:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2220      	movs	r2, #32
 800164e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	f63f af56 	bhi.w	800150c <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2220      	movs	r2, #32
 8001664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166c:	f043 0220 	orr.w	r2, r3, #32
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001680:	2302      	movs	r3, #2
  }
}
 8001682:	4618      	mov	r0, r3
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b02      	cmp	r3, #2
 800169e:	d103      	bne.n	80016a8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d007      	beq.n	80016c6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	699a      	ldr	r2, [r3, #24]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0201 	orr.w	r2, r2, #1
 80016c4:	619a      	str	r2, [r3, #24]
  }
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b084      	sub	sp, #16
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4613      	mov	r3, r2
 80016e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016e2:	e03b      	b.n	800175c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	6839      	ldr	r1, [r7, #0]
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 f84b 	bl	8001784 <I2C_IsErrorOccurred>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e041      	b.n	800177c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fe:	d02d      	beq.n	800175c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001700:	f7ff fb42 	bl	8000d88 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d302      	bcc.n	8001716 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d122      	bne.n	800175c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	699a      	ldr	r2, [r3, #24]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4013      	ands	r3, r2
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	429a      	cmp	r2, r3
 8001724:	bf0c      	ite	eq
 8001726:	2301      	moveq	r3, #1
 8001728:	2300      	movne	r3, #0
 800172a:	b2db      	uxtb	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	429a      	cmp	r2, r3
 8001732:	d113      	bne.n	800175c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001738:	f043 0220 	orr.w	r2, r3, #32
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2220      	movs	r2, #32
 8001744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e00f      	b.n	800177c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699a      	ldr	r2, [r3, #24]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	4013      	ands	r3, r2
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	429a      	cmp	r2, r3
 800176a:	bf0c      	ite	eq
 800176c:	2301      	moveq	r3, #1
 800176e:	2300      	movne	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	429a      	cmp	r2, r3
 8001778:	d0b4      	beq.n	80016e4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	@ 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d068      	beq.n	8001882 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2210      	movs	r2, #16
 80017b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017b8:	e049      	b.n	800184e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d045      	beq.n	800184e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017c2:	f7ff fae1 	bl	8000d88 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d302      	bcc.n	80017d8 <I2C_IsErrorOccurred+0x54>
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d13a      	bne.n	800184e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017fa:	d121      	bne.n	8001840 <I2C_IsErrorOccurred+0xbc>
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001802:	d01d      	beq.n	8001840 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001804:	7cfb      	ldrb	r3, [r7, #19]
 8001806:	2b20      	cmp	r3, #32
 8001808:	d01a      	beq.n	8001840 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001818:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800181a:	f7ff fab5 	bl	8000d88 <HAL_GetTick>
 800181e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001820:	e00e      	b.n	8001840 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001822:	f7ff fab1 	bl	8000d88 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b19      	cmp	r3, #25
 800182e:	d907      	bls.n	8001840 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	f043 0320 	orr.w	r3, r3, #32
 8001836:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800183e:	e006      	b.n	800184e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b20      	cmp	r3, #32
 800184c:	d1e9      	bne.n	8001822 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0320 	and.w	r3, r3, #32
 8001858:	2b20      	cmp	r3, #32
 800185a:	d003      	beq.n	8001864 <I2C_IsErrorOccurred+0xe0>
 800185c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0aa      	beq.n	80017ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001868:	2b00      	cmp	r3, #0
 800186a:	d103      	bne.n	8001874 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2220      	movs	r2, #32
 8001872:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00b      	beq.n	80018ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00b      	beq.n	80018f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80018f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01c      	beq.n	8001932 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff fec6 	bl	800168a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <I2C_IsErrorOccurred+0x1bc>)
 800190a:	400b      	ands	r3, r1
 800190c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	431a      	orrs	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2220      	movs	r2, #32
 800191e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001932:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001936:	4618      	mov	r0, r3
 8001938:	3728      	adds	r7, #40	@ 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	fe00e800 	.word	0xfe00e800

08001944 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b20      	cmp	r3, #32
 8001958:	d138      	bne.n	80019cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001964:	2302      	movs	r3, #2
 8001966:	e032      	b.n	80019ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2224      	movs	r2, #36	@ 0x24
 8001974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001996:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6819      	ldr	r1, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2220      	movs	r2, #32
 80019bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e000      	b.n	80019ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019cc:	2302      	movs	r3, #2
  }
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019da:	b480      	push	{r7}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b20      	cmp	r3, #32
 80019ee:	d139      	bne.n	8001a64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e033      	b.n	8001a66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2224      	movs	r2, #36	@ 0x24
 8001a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0201 	bic.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2220      	movs	r2, #32
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e000      	b.n	8001a66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a64:	2302      	movs	r3, #2
  }
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a78:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <HAL_PWREx_GetVoltageRange+0x18>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40007000 	.word	0x40007000

08001a90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a9e:	d130      	bne.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa0:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001aac:	d038      	beq.n	8001b20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aae:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001abc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001abe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2232      	movs	r2, #50	@ 0x32
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0c9b      	lsrs	r3, r3, #18
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad4:	e002      	b.n	8001adc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ae8:	d102      	bne.n	8001af0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f2      	bne.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001af0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001afc:	d110      	bne.n	8001b20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e00f      	b.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b02:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b0e:	d007      	beq.n	8001b20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b10:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b18:	4a05      	ldr	r2, [pc, #20]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40007000 	.word	0x40007000
 8001b34:	2000002c 	.word	0x2000002c
 8001b38:	431bde83 	.word	0x431bde83

08001b3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e3ca      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4e:	4b97      	ldr	r3, [pc, #604]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b58:	4b94      	ldr	r3, [pc, #592]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80e4 	beq.w	8001d38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <HAL_RCC_OscConfig+0x4a>
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	f040 808b 	bne.w	8001c94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	f040 8087 	bne.w	8001c94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b86:	4b89      	ldr	r3, [pc, #548]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_RCC_OscConfig+0x62>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e3a2      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1a      	ldr	r2, [r3, #32]
 8001ba2:	4b82      	ldr	r3, [pc, #520]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d004      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x7c>
 8001bae:	4b7f      	ldr	r3, [pc, #508]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bb6:	e005      	b.n	8001bc4 <HAL_RCC_OscConfig+0x88>
 8001bb8:	4b7c      	ldr	r3, [pc, #496]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d223      	bcs.n	8001c10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fd55 	bl	800267c <RCC_SetFlashLatencyFromMSIRange>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e383      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bdc:	4b73      	ldr	r3, [pc, #460]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a72      	ldr	r2, [pc, #456]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001be2:	f043 0308 	orr.w	r3, r3, #8
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b70      	ldr	r3, [pc, #448]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	496d      	ldr	r1, [pc, #436]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bfa:	4b6c      	ldr	r3, [pc, #432]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	4968      	ldr	r1, [pc, #416]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
 8001c0e:	e025      	b.n	8001c5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c10:	4b66      	ldr	r3, [pc, #408]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a65      	ldr	r2, [pc, #404]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c16:	f043 0308 	orr.w	r3, r3, #8
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b63      	ldr	r3, [pc, #396]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4960      	ldr	r1, [pc, #384]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	495b      	ldr	r1, [pc, #364]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fd15 	bl	800267c <RCC_SetFlashLatencyFromMSIRange>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e343      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c5c:	f000 fc4a 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b52      	ldr	r3, [pc, #328]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	091b      	lsrs	r3, r3, #4
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	4950      	ldr	r1, [pc, #320]	@ (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001c6e:	5ccb      	ldrb	r3, [r1, r3]
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
 8001c78:	4a4e      	ldr	r2, [pc, #312]	@ (8001db4 <HAL_RCC_OscConfig+0x278>)
 8001c7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c7c:	4b4e      	ldr	r3, [pc, #312]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f831 	bl	8000ce8 <HAL_InitTick>
 8001c86:	4603      	mov	r3, r0
 8001c88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d052      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	e327      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d032      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c9c:	4b43      	ldr	r3, [pc, #268]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a42      	ldr	r2, [pc, #264]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f86e 	bl	8000d88 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f86a 	bl	8000d88 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e310      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cce:	4b37      	ldr	r3, [pc, #220]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a36      	ldr	r2, [pc, #216]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cd4:	f043 0308 	orr.w	r3, r3, #8
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b34      	ldr	r3, [pc, #208]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4931      	ldr	r1, [pc, #196]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cec:	4b2f      	ldr	r3, [pc, #188]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	492c      	ldr	r1, [pc, #176]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
 8001d00:	e01a      	b.n	8001d38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d02:	4b2a      	ldr	r3, [pc, #168]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a29      	ldr	r2, [pc, #164]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff f83b 	bl	8000d88 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d16:	f7ff f837 	bl	8000d88 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e2dd      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d28:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x1da>
 8001d34:	e000      	b.n	8001d38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d074      	beq.n	8001e2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d005      	beq.n	8001d56 <HAL_RCC_OscConfig+0x21a>
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	d10e      	bne.n	8001d6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d10b      	bne.n	8001d6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d064      	beq.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d160      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e2ba      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x24a>
 8001d78:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	e026      	b.n	8001dd4 <HAL_RCC_OscConfig+0x298>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d8e:	d115      	bne.n	8001dbc <HAL_RCC_OscConfig+0x280>
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b03      	ldr	r3, [pc, #12]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a02      	ldr	r2, [pc, #8]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001da2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	e014      	b.n	8001dd4 <HAL_RCC_OscConfig+0x298>
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	08004bf4 	.word	0x08004bf4
 8001db4:	2000002c 	.word	0x2000002c
 8001db8:	20000030 	.word	0x20000030
 8001dbc:	4ba0      	ldr	r3, [pc, #640]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a9f      	ldr	r2, [pc, #636]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b9d      	ldr	r3, [pc, #628]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a9c      	ldr	r2, [pc, #624]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7fe ffd4 	bl	8000d88 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de4:	f7fe ffd0 	bl	8000d88 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	@ 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e276      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df6:	4b92      	ldr	r3, [pc, #584]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x2a8>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7fe ffc0 	bl	8000d88 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7fe ffbc 	bl	8000d88 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	@ 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e262      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e1e:	4b88      	ldr	r3, [pc, #544]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2d0>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d060      	beq.n	8001efc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_OscConfig+0x310>
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d119      	bne.n	8001e7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d116      	bne.n	8001e7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e4c:	4b7c      	ldr	r3, [pc, #496]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_OscConfig+0x328>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e23f      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	4b76      	ldr	r3, [pc, #472]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	4973      	ldr	r1, [pc, #460]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e78:	e040      	b.n	8001efc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d023      	beq.n	8001eca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e82:	4b6f      	ldr	r3, [pc, #444]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a6e      	ldr	r2, [pc, #440]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7fe ff7b 	bl	8000d88 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e96:	f7fe ff77 	bl	8000d88 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e21d      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea8:	4b65      	ldr	r3, [pc, #404]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b62      	ldr	r3, [pc, #392]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	495f      	ldr	r1, [pc, #380]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
 8001ec8:	e018      	b.n	8001efc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eca:	4b5d      	ldr	r3, [pc, #372]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a5c      	ldr	r2, [pc, #368]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7fe ff57 	bl	8000d88 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ede:	f7fe ff53 	bl	8000d88 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e1f9      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef0:	4b53      	ldr	r3, [pc, #332]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d03c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01c      	beq.n	8001f4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f10:	4b4b      	ldr	r3, [pc, #300]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f16:	4a4a      	ldr	r2, [pc, #296]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7fe ff32 	bl	8000d88 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f28:	f7fe ff2e 	bl	8000d88 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1d4      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f3a:	4b41      	ldr	r3, [pc, #260]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ef      	beq.n	8001f28 <HAL_RCC_OscConfig+0x3ec>
 8001f48:	e01b      	b.n	8001f82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f50:	4a3b      	ldr	r2, [pc, #236]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7fe ff15 	bl	8000d88 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f62:	f7fe ff11 	bl	8000d88 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e1b7      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f74:	4b32      	ldr	r3, [pc, #200]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1ef      	bne.n	8001f62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80a6 	beq.w	80020dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f90:	2300      	movs	r3, #0
 8001f92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f94:	4b2a      	ldr	r3, [pc, #168]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10d      	bne.n	8001fbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa0:	4b27      	ldr	r3, [pc, #156]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa4:	4a26      	ldr	r2, [pc, #152]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fac:	4b24      	ldr	r3, [pc, #144]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fbc:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <HAL_RCC_OscConfig+0x508>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d118      	bne.n	8001ffa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002044 <HAL_RCC_OscConfig+0x508>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8002044 <HAL_RCC_OscConfig+0x508>)
 8001fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd4:	f7fe fed8 	bl	8000d88 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fdc:	f7fe fed4 	bl	8000d88 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e17a      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_RCC_OscConfig+0x508>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d108      	bne.n	8002014 <HAL_RCC_OscConfig+0x4d8>
 8002002:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002008:	4a0d      	ldr	r2, [pc, #52]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002012:	e029      	b.n	8002068 <HAL_RCC_OscConfig+0x52c>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d115      	bne.n	8002048 <HAL_RCC_OscConfig+0x50c>
 800201c:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002022:	4a07      	ldr	r2, [pc, #28]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800202c:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002032:	4a03      	ldr	r2, [pc, #12]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800203c:	e014      	b.n	8002068 <HAL_RCC_OscConfig+0x52c>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	40007000 	.word	0x40007000
 8002048:	4b9c      	ldr	r3, [pc, #624]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204e:	4a9b      	ldr	r2, [pc, #620]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002058:	4b98      	ldr	r3, [pc, #608]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205e:	4a97      	ldr	r2, [pc, #604]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d016      	beq.n	800209e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7fe fe8a 	bl	8000d88 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002076:	e00a      	b.n	800208e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7fe fe86 	bl	8000d88 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e12a      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208e:	4b8b      	ldr	r3, [pc, #556]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0ed      	beq.n	8002078 <HAL_RCC_OscConfig+0x53c>
 800209c:	e015      	b.n	80020ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7fe fe73 	bl	8000d88 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7fe fe6f 	bl	8000d88 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e113      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020bc:	4b7f      	ldr	r3, [pc, #508]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ed      	bne.n	80020a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ca:	7ffb      	ldrb	r3, [r7, #31]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d105      	bne.n	80020dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d0:	4b7a      	ldr	r3, [pc, #488]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d4:	4a79      	ldr	r2, [pc, #484]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 80020d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020da:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80fe 	beq.w	80022e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	f040 80d0 	bne.w	8002290 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020f0:	4b72      	ldr	r3, [pc, #456]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f003 0203 	and.w	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002100:	429a      	cmp	r2, r3
 8002102:	d130      	bne.n	8002166 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	3b01      	subs	r3, #1
 8002110:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d127      	bne.n	8002166 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002120:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d11f      	bne.n	8002166 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002130:	2a07      	cmp	r2, #7
 8002132:	bf14      	ite	ne
 8002134:	2201      	movne	r2, #1
 8002136:	2200      	moveq	r2, #0
 8002138:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800213a:	4293      	cmp	r3, r2
 800213c:	d113      	bne.n	8002166 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002148:	085b      	lsrs	r3, r3, #1
 800214a:	3b01      	subs	r3, #1
 800214c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d109      	bne.n	8002166 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	3b01      	subs	r3, #1
 8002160:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d06e      	beq.n	8002244 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b0c      	cmp	r3, #12
 800216a:	d069      	beq.n	8002240 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800216c:	4b53      	ldr	r3, [pc, #332]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002178:	4b50      	ldr	r3, [pc, #320]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0ad      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002188:	4b4c      	ldr	r3, [pc, #304]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a4b      	ldr	r2, [pc, #300]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 800218e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002192:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002194:	f7fe fdf8 	bl	8000d88 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7fe fdf4 	bl	8000d88 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e09a      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ae:	4b43      	ldr	r3, [pc, #268]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ba:	4b40      	ldr	r3, [pc, #256]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	4b40      	ldr	r3, [pc, #256]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021ca:	3a01      	subs	r2, #1
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	4311      	orrs	r1, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021d4:	0212      	lsls	r2, r2, #8
 80021d6:	4311      	orrs	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021dc:	0852      	lsrs	r2, r2, #1
 80021de:	3a01      	subs	r2, #1
 80021e0:	0552      	lsls	r2, r2, #21
 80021e2:	4311      	orrs	r1, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021e8:	0852      	lsrs	r2, r2, #1
 80021ea:	3a01      	subs	r2, #1
 80021ec:	0652      	lsls	r2, r2, #25
 80021ee:	4311      	orrs	r1, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021f4:	0912      	lsrs	r2, r2, #4
 80021f6:	0452      	lsls	r2, r2, #17
 80021f8:	430a      	orrs	r2, r1
 80021fa:	4930      	ldr	r1, [pc, #192]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002200:	4b2e      	ldr	r3, [pc, #184]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a2d      	ldr	r2, [pc, #180]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 8002206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800220c:	4b2b      	ldr	r3, [pc, #172]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a2a      	ldr	r2, [pc, #168]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 8002212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002216:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002218:	f7fe fdb6 	bl	8000d88 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe fdb2 	bl	8000d88 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e058      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002232:	4b22      	ldr	r3, [pc, #136]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800223e:	e050      	b.n	80022e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e04f      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002244:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d148      	bne.n	80022e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002250:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a19      	ldr	r2, [pc, #100]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 8002256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800225a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800225c:	4b17      	ldr	r3, [pc, #92]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 8002262:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002266:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002268:	f7fe fd8e 	bl	8000d88 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe fd8a 	bl	8000d88 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e030      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002282:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x734>
 800228e:	e028      	b.n	80022e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d023      	beq.n	80022de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a08      	ldr	r2, [pc, #32]	@ (80022bc <HAL_RCC_OscConfig+0x780>)
 800229c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7fe fd71 	bl	8000d88 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a8:	e00c      	b.n	80022c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022aa:	f7fe fd6d 	bl	8000d88 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d905      	bls.n	80022c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e013      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
 80022bc:	40021000 	.word	0x40021000
 80022c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c4:	4b09      	ldr	r3, [pc, #36]	@ (80022ec <HAL_RCC_OscConfig+0x7b0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1ec      	bne.n	80022aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022d0:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_RCC_OscConfig+0x7b0>)
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	4905      	ldr	r1, [pc, #20]	@ (80022ec <HAL_RCC_OscConfig+0x7b0>)
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_RCC_OscConfig+0x7b4>)
 80022d8:	4013      	ands	r3, r2
 80022da:	60cb      	str	r3, [r1, #12]
 80022dc:	e001      	b.n	80022e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	feeefffc 	.word	0xfeeefffc

080022f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0e7      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002308:	4b75      	ldr	r3, [pc, #468]	@ (80024e0 <HAL_RCC_ClockConfig+0x1ec>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d910      	bls.n	8002338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b72      	ldr	r3, [pc, #456]	@ (80024e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 0207 	bic.w	r2, r3, #7
 800231e:	4970      	ldr	r1, [pc, #448]	@ (80024e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b6e      	ldr	r3, [pc, #440]	@ (80024e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0cf      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d010      	beq.n	8002366 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	4b66      	ldr	r3, [pc, #408]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002350:	429a      	cmp	r2, r3
 8002352:	d908      	bls.n	8002366 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002354:	4b63      	ldr	r3, [pc, #396]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4960      	ldr	r1, [pc, #384]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d04c      	beq.n	800240c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237a:	4b5a      	ldr	r3, [pc, #360]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d121      	bne.n	80023ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e0a6      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002392:	4b54      	ldr	r3, [pc, #336]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d115      	bne.n	80023ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e09a      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023aa:	4b4e      	ldr	r3, [pc, #312]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e08e      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ba:	4b4a      	ldr	r3, [pc, #296]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e086      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ca:	4b46      	ldr	r3, [pc, #280]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f023 0203 	bic.w	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4943      	ldr	r1, [pc, #268]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023dc:	f7fe fcd4 	bl	8000d88 <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe fcd0 	bl	8000d88 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e06e      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	4b3a      	ldr	r3, [pc, #232]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 020c 	and.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	429a      	cmp	r2, r3
 800240a:	d1eb      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d010      	beq.n	800243a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	4b31      	ldr	r3, [pc, #196]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002424:	429a      	cmp	r2, r3
 8002426:	d208      	bcs.n	800243a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b2e      	ldr	r3, [pc, #184]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	492b      	ldr	r1, [pc, #172]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800243a:	4b29      	ldr	r3, [pc, #164]	@ (80024e0 <HAL_RCC_ClockConfig+0x1ec>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d210      	bcs.n	800246a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002448:	4b25      	ldr	r3, [pc, #148]	@ (80024e0 <HAL_RCC_ClockConfig+0x1ec>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 0207 	bic.w	r2, r3, #7
 8002450:	4923      	ldr	r1, [pc, #140]	@ (80024e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	4313      	orrs	r3, r2
 8002456:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002458:	4b21      	ldr	r3, [pc, #132]	@ (80024e0 <HAL_RCC_ClockConfig+0x1ec>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e036      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002476:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	4918      	ldr	r1, [pc, #96]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	4313      	orrs	r3, r2
 8002486:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d009      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002494:	4b13      	ldr	r3, [pc, #76]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4910      	ldr	r1, [pc, #64]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024a8:	f000 f824 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b0d      	ldr	r3, [pc, #52]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	490b      	ldr	r1, [pc, #44]	@ (80024e8 <HAL_RCC_ClockConfig+0x1f4>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
 80024c4:	4a09      	ldr	r2, [pc, #36]	@ (80024ec <HAL_RCC_ClockConfig+0x1f8>)
 80024c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024c8:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <HAL_RCC_ClockConfig+0x1fc>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe fc0b 	bl	8000ce8 <HAL_InitTick>
 80024d2:	4603      	mov	r3, r0
 80024d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80024d6:	7afb      	ldrb	r3, [r7, #11]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08004bf4 	.word	0x08004bf4
 80024ec:	2000002c 	.word	0x2000002c
 80024f0:	20000030 	.word	0x20000030

080024f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	@ 0x24
 80024f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002502:	4b3e      	ldr	r3, [pc, #248]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800250c:	4b3b      	ldr	r3, [pc, #236]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x108>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x34>
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d121      	bne.n	8002566 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d11e      	bne.n	8002566 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002528:	4b34      	ldr	r3, [pc, #208]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x108>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002534:	4b31      	ldr	r3, [pc, #196]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002536:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	e005      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002544:	4b2d      	ldr	r3, [pc, #180]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002550:	4a2b      	ldr	r2, [pc, #172]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002558:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10d      	bne.n	800257c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002564:	e00a      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d102      	bne.n	8002572 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800256c:	4b25      	ldr	r3, [pc, #148]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x110>)
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	e004      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d101      	bne.n	800257c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002578:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x114>)
 800257a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	2b0c      	cmp	r3, #12
 8002580:	d134      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002582:	4b1e      	ldr	r3, [pc, #120]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d003      	beq.n	800259a <HAL_RCC_GetSysClockFreq+0xa6>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d003      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0xac>
 8002598:	e005      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800259a:	4b1a      	ldr	r3, [pc, #104]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x110>)
 800259c:	617b      	str	r3, [r7, #20]
      break;
 800259e:	e005      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025a0:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x114>)
 80025a2:	617b      	str	r3, [r7, #20]
      break;
 80025a4:	e002      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	617b      	str	r3, [r7, #20]
      break;
 80025aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025ac:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x108>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	3301      	adds	r3, #1
 80025b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025ba:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x108>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	fb03 f202 	mul.w	r2, r3, r2
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025d2:	4b0a      	ldr	r3, [pc, #40]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x108>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	0e5b      	lsrs	r3, r3, #25
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	3301      	adds	r3, #1
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025ec:	69bb      	ldr	r3, [r7, #24]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3724      	adds	r7, #36	@ 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	08004c0c 	.word	0x08004c0c
 8002604:	00f42400 	.word	0x00f42400
 8002608:	007a1200 	.word	0x007a1200

0800260c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002610:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <HAL_RCC_GetHCLKFreq+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	2000002c 	.word	0x2000002c

08002624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002628:	f7ff fff0 	bl	800260c <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4904      	ldr	r1, [pc, #16]	@ (800264c <HAL_RCC_GetPCLK1Freq+0x28>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	08004c04 	.word	0x08004c04

08002650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002654:	f7ff ffda 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	0adb      	lsrs	r3, r3, #11
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	4904      	ldr	r1, [pc, #16]	@ (8002678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	08004c04 	.word	0x08004c04

0800267c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002688:	4b2a      	ldr	r3, [pc, #168]	@ (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002694:	f7ff f9ee 	bl	8001a74 <HAL_PWREx_GetVoltageRange>
 8002698:	6178      	str	r0, [r7, #20]
 800269a:	e014      	b.n	80026c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800269c:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a0:	4a24      	ldr	r2, [pc, #144]	@ (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026a8:	4b22      	ldr	r3, [pc, #136]	@ (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026b4:	f7ff f9de 	bl	8001a74 <HAL_PWREx_GetVoltageRange>
 80026b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026be:	4a1d      	ldr	r2, [pc, #116]	@ (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026cc:	d10b      	bne.n	80026e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b80      	cmp	r3, #128	@ 0x80
 80026d2:	d919      	bls.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80026d8:	d902      	bls.n	80026e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026da:	2302      	movs	r3, #2
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	e013      	b.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026e0:	2301      	movs	r3, #1
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	e010      	b.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b80      	cmp	r3, #128	@ 0x80
 80026ea:	d902      	bls.n	80026f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026ec:	2303      	movs	r3, #3
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	e00a      	b.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b80      	cmp	r3, #128	@ 0x80
 80026f6:	d102      	bne.n	80026fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026f8:	2302      	movs	r3, #2
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	e004      	b.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b70      	cmp	r3, #112	@ 0x70
 8002702:	d101      	bne.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002704:	2301      	movs	r3, #1
 8002706:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f023 0207 	bic.w	r2, r3, #7
 8002710:	4909      	ldr	r1, [pc, #36]	@ (8002738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002718:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	429a      	cmp	r2, r3
 8002724:	d001      	beq.n	800272a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	40022000 	.word	0x40022000

0800273c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002744:	2300      	movs	r3, #0
 8002746:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002748:	2300      	movs	r3, #0
 800274a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002754:	2b00      	cmp	r3, #0
 8002756:	d041      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800275c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002760:	d02a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002762:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002766:	d824      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002768:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800276c:	d008      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800276e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002772:	d81e      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800277c:	d010      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800277e:	e018      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002780:	4b86      	ldr	r3, [pc, #536]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a85      	ldr	r2, [pc, #532]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800278c:	e015      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fabb 	bl	8002d10 <RCCEx_PLLSAI1_Config>
 800279a:	4603      	mov	r3, r0
 800279c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800279e:	e00c      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3320      	adds	r3, #32
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fba6 	bl	8002ef8 <RCCEx_PLLSAI2_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027b0:	e003      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	74fb      	strb	r3, [r7, #19]
      break;
 80027b6:	e000      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027c0:	4b76      	ldr	r3, [pc, #472]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027ce:	4973      	ldr	r1, [pc, #460]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80027d6:	e001      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d041      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027f0:	d02a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027f6:	d824      	bhi.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027fc:	d008      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002802:	d81e      	bhi.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800280c:	d010      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800280e:	e018      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002810:	4b62      	ldr	r3, [pc, #392]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a61      	ldr	r2, [pc, #388]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800281a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800281c:	e015      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3304      	adds	r3, #4
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fa73 	bl	8002d10 <RCCEx_PLLSAI1_Config>
 800282a:	4603      	mov	r3, r0
 800282c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800282e:	e00c      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3320      	adds	r3, #32
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fb5e 	bl	8002ef8 <RCCEx_PLLSAI2_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002840:	e003      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	74fb      	strb	r3, [r7, #19]
      break;
 8002846:	e000      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002850:	4b52      	ldr	r3, [pc, #328]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002856:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800285e:	494f      	ldr	r1, [pc, #316]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002866:	e001      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80a0 	beq.w	80029ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800287e:	4b47      	ldr	r3, [pc, #284]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800288e:	2300      	movs	r3, #0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00d      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002894:	4b41      	ldr	r3, [pc, #260]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002898:	4a40      	ldr	r2, [pc, #256]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289e:	6593      	str	r3, [r2, #88]	@ 0x58
 80028a0:	4b3e      	ldr	r3, [pc, #248]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ac:	2301      	movs	r3, #1
 80028ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b0:	4b3b      	ldr	r3, [pc, #236]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a3a      	ldr	r2, [pc, #232]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028bc:	f7fe fa64 	bl	8000d88 <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028c2:	e009      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c4:	f7fe fa60 	bl	8000d88 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d902      	bls.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	74fb      	strb	r3, [r7, #19]
        break;
 80028d6:	e005      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028d8:	4b31      	ldr	r3, [pc, #196]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ef      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d15c      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028ea:	4b2c      	ldr	r3, [pc, #176]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01f      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	429a      	cmp	r2, r3
 8002906:	d019      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002908:	4b24      	ldr	r3, [pc, #144]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002912:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002914:	4b21      	ldr	r3, [pc, #132]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291a:	4a20      	ldr	r2, [pc, #128]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002924:	4b1d      	ldr	r3, [pc, #116]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292a:	4a1c      	ldr	r2, [pc, #112]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002934:	4a19      	ldr	r2, [pc, #100]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7fe fa1f 	bl	8000d88 <HAL_GetTick>
 800294a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294c:	e00b      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe fa1b 	bl	8000d88 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d902      	bls.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	74fb      	strb	r3, [r7, #19]
            break;
 8002964:	e006      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002966:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ec      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10c      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002980:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800298a:	4904      	ldr	r1, [pc, #16]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002992:	e009      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	74bb      	strb	r3, [r7, #18]
 8002998:	e006      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a8:	7c7b      	ldrb	r3, [r7, #17]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d105      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ae:	4b9e      	ldr	r3, [pc, #632]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b2:	4a9d      	ldr	r2, [pc, #628]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029c6:	4b98      	ldr	r3, [pc, #608]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029cc:	f023 0203 	bic.w	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d4:	4994      	ldr	r1, [pc, #592]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ee:	f023 020c 	bic.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f6:	498c      	ldr	r1, [pc, #560]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a0a:	4b87      	ldr	r3, [pc, #540]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a10:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	4983      	ldr	r1, [pc, #524]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3a:	497b      	ldr	r1, [pc, #492]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a4e:	4b76      	ldr	r3, [pc, #472]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a5c:	4972      	ldr	r1, [pc, #456]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a70:	4b6d      	ldr	r3, [pc, #436]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	496a      	ldr	r1, [pc, #424]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a92:	4b65      	ldr	r3, [pc, #404]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa0:	4961      	ldr	r1, [pc, #388]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ab4:	4b5c      	ldr	r3, [pc, #368]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac2:	4959      	ldr	r1, [pc, #356]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ad6:	4b54      	ldr	r3, [pc, #336]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002adc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae4:	4950      	ldr	r1, [pc, #320]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002af8:	4b4b      	ldr	r3, [pc, #300]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b06:	4948      	ldr	r1, [pc, #288]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b1a:	4b43      	ldr	r3, [pc, #268]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b28:	493f      	ldr	r1, [pc, #252]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d028      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b4a:	4937      	ldr	r1, [pc, #220]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b5c:	4b32      	ldr	r3, [pc, #200]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a31      	ldr	r2, [pc, #196]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b66:	60d3      	str	r3, [r2, #12]
 8002b68:	e011      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b72:	d10c      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	2101      	movs	r1, #1
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f8c8 	bl	8002d10 <RCCEx_PLLSAI1_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d028      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b9a:	4b23      	ldr	r3, [pc, #140]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba8:	491f      	ldr	r1, [pc, #124]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bba:	4b1b      	ldr	r3, [pc, #108]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bc4:	60d3      	str	r3, [r2, #12]
 8002bc6:	e011      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f899 	bl	8002d10 <RCCEx_PLLSAI1_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d02b      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c06:	4908      	ldr	r1, [pc, #32]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c16:	d109      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c18:	4b03      	ldr	r3, [pc, #12]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4a02      	ldr	r2, [pc, #8]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c22:	60d3      	str	r3, [r2, #12]
 8002c24:	e014      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f867 	bl	8002d10 <RCCEx_PLLSAI1_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d02f      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c6a:	4928      	ldr	r1, [pc, #160]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c7a:	d10d      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	2102      	movs	r1, #2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f844 	bl	8002d10 <RCCEx_PLLSAI1_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d014      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	74bb      	strb	r3, [r7, #18]
 8002c96:	e011      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3320      	adds	r3, #32
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 f925 	bl	8002ef8 <RCCEx_PLLSAI2_Config>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cc8:	4b10      	ldr	r3, [pc, #64]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cce:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cd6:	490d      	ldr	r1, [pc, #52]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cea:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cfa:	4904      	ldr	r1, [pc, #16]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d02:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000

08002d10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d1e:	4b75      	ldr	r3, [pc, #468]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d018      	beq.n	8002d5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d2a:	4b72      	ldr	r3, [pc, #456]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0203 	and.w	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d10d      	bne.n	8002d56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d42:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
       ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d047      	beq.n	8002de6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
 8002d5a:	e044      	b.n	8002de6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d018      	beq.n	8002d96 <RCCEx_PLLSAI1_Config+0x86>
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d825      	bhi.n	8002db4 <RCCEx_PLLSAI1_Config+0xa4>
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d002      	beq.n	8002d72 <RCCEx_PLLSAI1_Config+0x62>
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d009      	beq.n	8002d84 <RCCEx_PLLSAI1_Config+0x74>
 8002d70:	e020      	b.n	8002db4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d72:	4b60      	ldr	r3, [pc, #384]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d11d      	bne.n	8002dba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d82:	e01a      	b.n	8002dba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d84:	4b5b      	ldr	r3, [pc, #364]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d116      	bne.n	8002dbe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d94:	e013      	b.n	8002dbe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d96:	4b57      	ldr	r3, [pc, #348]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10f      	bne.n	8002dc2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002da2:	4b54      	ldr	r3, [pc, #336]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002db2:	e006      	b.n	8002dc2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
      break;
 8002db8:	e004      	b.n	8002dc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dba:	bf00      	nop
 8002dbc:	e002      	b.n	8002dc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e000      	b.n	8002dc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10d      	bne.n	8002de6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dca:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6819      	ldr	r1, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	430b      	orrs	r3, r1
 8002de0:	4944      	ldr	r1, [pc, #272]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d17d      	bne.n	8002ee8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002dec:	4b41      	ldr	r3, [pc, #260]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a40      	ldr	r2, [pc, #256]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df8:	f7fd ffc6 	bl	8000d88 <HAL_GetTick>
 8002dfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dfe:	e009      	b.n	8002e14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e00:	f7fd ffc2 	bl	8000d88 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d902      	bls.n	8002e14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	73fb      	strb	r3, [r7, #15]
        break;
 8002e12:	e005      	b.n	8002e20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e14:	4b37      	ldr	r3, [pc, #220]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ef      	bne.n	8002e00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d160      	bne.n	8002ee8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d111      	bne.n	8002e50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e2c:	4b31      	ldr	r3, [pc, #196]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6892      	ldr	r2, [r2, #8]
 8002e3c:	0211      	lsls	r1, r2, #8
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68d2      	ldr	r2, [r2, #12]
 8002e42:	0912      	lsrs	r2, r2, #4
 8002e44:	0452      	lsls	r2, r2, #17
 8002e46:	430a      	orrs	r2, r1
 8002e48:	492a      	ldr	r1, [pc, #168]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	610b      	str	r3, [r1, #16]
 8002e4e:	e027      	b.n	8002ea0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d112      	bne.n	8002e7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e56:	4b27      	ldr	r3, [pc, #156]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002e5e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6892      	ldr	r2, [r2, #8]
 8002e66:	0211      	lsls	r1, r2, #8
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6912      	ldr	r2, [r2, #16]
 8002e6c:	0852      	lsrs	r2, r2, #1
 8002e6e:	3a01      	subs	r2, #1
 8002e70:	0552      	lsls	r2, r2, #21
 8002e72:	430a      	orrs	r2, r1
 8002e74:	491f      	ldr	r1, [pc, #124]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	610b      	str	r3, [r1, #16]
 8002e7a:	e011      	b.n	8002ea0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6892      	ldr	r2, [r2, #8]
 8002e8c:	0211      	lsls	r1, r2, #8
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6952      	ldr	r2, [r2, #20]
 8002e92:	0852      	lsrs	r2, r2, #1
 8002e94:	3a01      	subs	r2, #1
 8002e96:	0652      	lsls	r2, r2, #25
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	4916      	ldr	r1, [pc, #88]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ea0:	4b14      	ldr	r3, [pc, #80]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a13      	ldr	r2, [pc, #76]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002eaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fd ff6c 	bl	8000d88 <HAL_GetTick>
 8002eb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eb2:	e009      	b.n	8002ec8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eb4:	f7fd ff68 	bl	8000d88 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d902      	bls.n	8002ec8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ec6:	e005      	b.n	8002ed4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0ef      	beq.n	8002eb4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002eda:	4b06      	ldr	r3, [pc, #24]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	4904      	ldr	r1, [pc, #16]	@ (8002ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f06:	4b6a      	ldr	r3, [pc, #424]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d018      	beq.n	8002f44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f12:	4b67      	ldr	r3, [pc, #412]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0203 	and.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d10d      	bne.n	8002f3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
       ||
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f2a:	4b61      	ldr	r3, [pc, #388]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
       ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d047      	beq.n	8002fce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
 8002f42:	e044      	b.n	8002fce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d018      	beq.n	8002f7e <RCCEx_PLLSAI2_Config+0x86>
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d825      	bhi.n	8002f9c <RCCEx_PLLSAI2_Config+0xa4>
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d002      	beq.n	8002f5a <RCCEx_PLLSAI2_Config+0x62>
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d009      	beq.n	8002f6c <RCCEx_PLLSAI2_Config+0x74>
 8002f58:	e020      	b.n	8002f9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f5a:	4b55      	ldr	r3, [pc, #340]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11d      	bne.n	8002fa2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6a:	e01a      	b.n	8002fa2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f6c:	4b50      	ldr	r3, [pc, #320]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d116      	bne.n	8002fa6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f7c:	e013      	b.n	8002fa6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f7e:	4b4c      	ldr	r3, [pc, #304]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10f      	bne.n	8002faa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f8a:	4b49      	ldr	r3, [pc, #292]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f9a:	e006      	b.n	8002faa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa0:	e004      	b.n	8002fac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e002      	b.n	8002fac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e000      	b.n	8002fac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002faa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10d      	bne.n	8002fce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6819      	ldr	r1, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	4939      	ldr	r1, [pc, #228]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d167      	bne.n	80030a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fd4:	4b36      	ldr	r3, [pc, #216]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a35      	ldr	r2, [pc, #212]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe0:	f7fd fed2 	bl	8000d88 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fe6:	e009      	b.n	8002ffc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fe8:	f7fd fece 	bl	8000d88 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d902      	bls.n	8002ffc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	73fb      	strb	r3, [r7, #15]
        break;
 8002ffa:	e005      	b.n	8003008 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ef      	bne.n	8002fe8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d14a      	bne.n	80030a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d111      	bne.n	8003038 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003014:	4b26      	ldr	r3, [pc, #152]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800301c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6892      	ldr	r2, [r2, #8]
 8003024:	0211      	lsls	r1, r2, #8
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68d2      	ldr	r2, [r2, #12]
 800302a:	0912      	lsrs	r2, r2, #4
 800302c:	0452      	lsls	r2, r2, #17
 800302e:	430a      	orrs	r2, r1
 8003030:	491f      	ldr	r1, [pc, #124]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003032:	4313      	orrs	r3, r2
 8003034:	614b      	str	r3, [r1, #20]
 8003036:	e011      	b.n	800305c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003038:	4b1d      	ldr	r3, [pc, #116]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003040:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6892      	ldr	r2, [r2, #8]
 8003048:	0211      	lsls	r1, r2, #8
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6912      	ldr	r2, [r2, #16]
 800304e:	0852      	lsrs	r2, r2, #1
 8003050:	3a01      	subs	r2, #1
 8003052:	0652      	lsls	r2, r2, #25
 8003054:	430a      	orrs	r2, r1
 8003056:	4916      	ldr	r1, [pc, #88]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003058:	4313      	orrs	r3, r2
 800305a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800305c:	4b14      	ldr	r3, [pc, #80]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a13      	ldr	r2, [pc, #76]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003066:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7fd fe8e 	bl	8000d88 <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800306e:	e009      	b.n	8003084 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003070:	f7fd fe8a 	bl	8000d88 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d902      	bls.n	8003084 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	73fb      	strb	r3, [r7, #15]
          break;
 8003082:	e005      	b.n	8003090 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003084:	4b0a      	ldr	r3, [pc, #40]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0ef      	beq.n	8003070 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	4904      	ldr	r1, [pc, #16]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000

080030b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e049      	b.n	800315a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fd08 	bl	8000af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3304      	adds	r3, #4
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f000 f9d6 	bl	80034a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d001      	beq.n	800317c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e04f      	b.n	800321c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a23      	ldr	r2, [pc, #140]	@ (8003228 <HAL_TIM_Base_Start_IT+0xc4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01d      	beq.n	80031da <HAL_TIM_Base_Start_IT+0x76>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a6:	d018      	beq.n	80031da <HAL_TIM_Base_Start_IT+0x76>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1f      	ldr	r2, [pc, #124]	@ (800322c <HAL_TIM_Base_Start_IT+0xc8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_TIM_Base_Start_IT+0x76>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003230 <HAL_TIM_Base_Start_IT+0xcc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00e      	beq.n	80031da <HAL_TIM_Base_Start_IT+0x76>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003234 <HAL_TIM_Base_Start_IT+0xd0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d009      	beq.n	80031da <HAL_TIM_Base_Start_IT+0x76>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003238 <HAL_TIM_Base_Start_IT+0xd4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_TIM_Base_Start_IT+0x76>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a19      	ldr	r2, [pc, #100]	@ (800323c <HAL_TIM_Base_Start_IT+0xd8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d115      	bne.n	8003206 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	4b17      	ldr	r3, [pc, #92]	@ (8003240 <HAL_TIM_Base_Start_IT+0xdc>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b06      	cmp	r3, #6
 80031ea:	d015      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0xb4>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f2:	d011      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003204:	e008      	b.n	8003218 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0201 	orr.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e000      	b.n	800321a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003218:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800
 8003234:	40000c00 	.word	0x40000c00
 8003238:	40013400 	.word	0x40013400
 800323c:	40014000 	.word	0x40014000
 8003240:	00010007 	.word	0x00010007

08003244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d020      	beq.n	80032a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01b      	beq.n	80032a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0202 	mvn.w	r2, #2
 8003278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f8e9 	bl	8003466 <HAL_TIM_IC_CaptureCallback>
 8003294:	e005      	b.n	80032a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8db 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f8ec 	bl	800347a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d020      	beq.n	80032f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01b      	beq.n	80032f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0204 	mvn.w	r2, #4
 80032c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f8c3 	bl	8003466 <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8b5 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f8c6 	bl	800347a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d020      	beq.n	8003340 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01b      	beq.n	8003340 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0208 	mvn.w	r2, #8
 8003310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2204      	movs	r2, #4
 8003316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f89d 	bl	8003466 <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f88f 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f8a0 	bl	800347a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b00      	cmp	r3, #0
 8003348:	d020      	beq.n	800338c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0210 	mvn.w	r2, #16
 800335c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2208      	movs	r2, #8
 8003362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f877 	bl	8003466 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f869 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f87a 	bl	800347a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00c      	beq.n	80033b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d007      	beq.n	80033b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0201 	mvn.w	r2, #1
 80033a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fd faa8 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d104      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00c      	beq.n	80033de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80033d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f99b 	bl	8003714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00c      	beq.n	8003402 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d007      	beq.n	8003402 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80033fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f993 	bl	8003728 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00c      	beq.n	8003426 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800341e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f834 	bl	800348e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00c      	beq.n	800344a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0220 	mvn.w	r2, #32
 8003442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f95b 	bl	8003700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a46      	ldr	r2, [pc, #280]	@ (80035d0 <TIM_Base_SetConfig+0x12c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d013      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c2:	d00f      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a43      	ldr	r2, [pc, #268]	@ (80035d4 <TIM_Base_SetConfig+0x130>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00b      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a42      	ldr	r2, [pc, #264]	@ (80035d8 <TIM_Base_SetConfig+0x134>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a41      	ldr	r2, [pc, #260]	@ (80035dc <TIM_Base_SetConfig+0x138>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a40      	ldr	r2, [pc, #256]	@ (80035e0 <TIM_Base_SetConfig+0x13c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a35      	ldr	r2, [pc, #212]	@ (80035d0 <TIM_Base_SetConfig+0x12c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01f      	beq.n	800353e <TIM_Base_SetConfig+0x9a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003504:	d01b      	beq.n	800353e <TIM_Base_SetConfig+0x9a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a32      	ldr	r2, [pc, #200]	@ (80035d4 <TIM_Base_SetConfig+0x130>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d017      	beq.n	800353e <TIM_Base_SetConfig+0x9a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a31      	ldr	r2, [pc, #196]	@ (80035d8 <TIM_Base_SetConfig+0x134>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d013      	beq.n	800353e <TIM_Base_SetConfig+0x9a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a30      	ldr	r2, [pc, #192]	@ (80035dc <TIM_Base_SetConfig+0x138>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00f      	beq.n	800353e <TIM_Base_SetConfig+0x9a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2f      	ldr	r2, [pc, #188]	@ (80035e0 <TIM_Base_SetConfig+0x13c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00b      	beq.n	800353e <TIM_Base_SetConfig+0x9a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2e      	ldr	r2, [pc, #184]	@ (80035e4 <TIM_Base_SetConfig+0x140>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d007      	beq.n	800353e <TIM_Base_SetConfig+0x9a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2d      	ldr	r2, [pc, #180]	@ (80035e8 <TIM_Base_SetConfig+0x144>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d003      	beq.n	800353e <TIM_Base_SetConfig+0x9a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2c      	ldr	r2, [pc, #176]	@ (80035ec <TIM_Base_SetConfig+0x148>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d108      	bne.n	8003550 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a16      	ldr	r2, [pc, #88]	@ (80035d0 <TIM_Base_SetConfig+0x12c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00f      	beq.n	800359c <TIM_Base_SetConfig+0xf8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a18      	ldr	r2, [pc, #96]	@ (80035e0 <TIM_Base_SetConfig+0x13c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00b      	beq.n	800359c <TIM_Base_SetConfig+0xf8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a17      	ldr	r2, [pc, #92]	@ (80035e4 <TIM_Base_SetConfig+0x140>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d007      	beq.n	800359c <TIM_Base_SetConfig+0xf8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a16      	ldr	r2, [pc, #88]	@ (80035e8 <TIM_Base_SetConfig+0x144>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d003      	beq.n	800359c <TIM_Base_SetConfig+0xf8>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a15      	ldr	r2, [pc, #84]	@ (80035ec <TIM_Base_SetConfig+0x148>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d103      	bne.n	80035a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d105      	bne.n	80035c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f023 0201 	bic.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	611a      	str	r2, [r3, #16]
  }
}
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800
 80035dc:	40000c00 	.word	0x40000c00
 80035e0:	40013400 	.word	0x40013400
 80035e4:	40014000 	.word	0x40014000
 80035e8:	40014400 	.word	0x40014400
 80035ec:	40014800 	.word	0x40014800

080035f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003604:	2302      	movs	r3, #2
 8003606:	e068      	b.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a2e      	ldr	r2, [pc, #184]	@ (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a2d      	ldr	r2, [pc, #180]	@ (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d108      	bne.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003642:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003654:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1e      	ldr	r2, [pc, #120]	@ (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d01d      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367a:	d018      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1a      	ldr	r2, [pc, #104]	@ (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a13      	ldr	r2, [pc, #76]	@ (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a14      	ldr	r2, [pc, #80]	@ (80036fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10c      	bne.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40013400 	.word	0x40013400
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40014000 	.word	0x40014000

08003700 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e040      	b.n	80037d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fd fa1c 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2224      	movs	r2, #36	@ 0x24
 8003768:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fb6a 	bl	8003e5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f8af 	bl	80038ec <UART_SetConfig>
 800378e:	4603      	mov	r3, r0
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e01b      	b.n	80037d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fbe9 	bl	8003fa0 <UART_CheckIdleState>
 80037ce:	4603      	mov	r3, r0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	@ 0x28
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d177      	bne.n	80038e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HAL_UART_Transmit+0x24>
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e070      	b.n	80038e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2221      	movs	r2, #33	@ 0x21
 800380c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800380e:	f7fd fabb 	bl	8000d88 <HAL_GetTick>
 8003812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	88fa      	ldrh	r2, [r7, #6]
 8003820:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800382c:	d108      	bne.n	8003840 <HAL_UART_Transmit+0x68>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d104      	bne.n	8003840 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	e003      	b.n	8003848 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003848:	e02f      	b.n	80038aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2200      	movs	r2, #0
 8003852:	2180      	movs	r1, #128	@ 0x80
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fc4b 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e03b      	b.n	80038e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10b      	bne.n	8003888 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	881a      	ldrh	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800387c:	b292      	uxth	r2, r2
 800387e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	3302      	adds	r3, #2
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	e007      	b.n	8003898 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3301      	adds	r3, #1
 8003896:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1c9      	bne.n	800384a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2200      	movs	r2, #0
 80038be:	2140      	movs	r1, #64	@ 0x40
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fc15 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e005      	b.n	80038e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	e000      	b.n	80038e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f0:	b08a      	sub	sp, #40	@ 0x28
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	431a      	orrs	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	431a      	orrs	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	4313      	orrs	r3, r2
 8003912:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4ba4      	ldr	r3, [pc, #656]	@ (8003bac <UART_SetConfig+0x2c0>)
 800391c:	4013      	ands	r3, r2
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003924:	430b      	orrs	r3, r1
 8003926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a99      	ldr	r2, [pc, #612]	@ (8003bb0 <UART_SetConfig+0x2c4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003954:	4313      	orrs	r3, r2
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a90      	ldr	r2, [pc, #576]	@ (8003bb4 <UART_SetConfig+0x2c8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d126      	bne.n	80039c4 <UART_SetConfig+0xd8>
 8003976:	4b90      	ldr	r3, [pc, #576]	@ (8003bb8 <UART_SetConfig+0x2cc>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b03      	cmp	r3, #3
 8003982:	d81b      	bhi.n	80039bc <UART_SetConfig+0xd0>
 8003984:	a201      	add	r2, pc, #4	@ (adr r2, 800398c <UART_SetConfig+0xa0>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	0800399d 	.word	0x0800399d
 8003990:	080039ad 	.word	0x080039ad
 8003994:	080039a5 	.word	0x080039a5
 8003998:	080039b5 	.word	0x080039b5
 800399c:	2301      	movs	r3, #1
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039a2:	e116      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 80039a4:	2302      	movs	r3, #2
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039aa:	e112      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 80039ac:	2304      	movs	r3, #4
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039b2:	e10e      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 80039b4:	2308      	movs	r3, #8
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ba:	e10a      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 80039bc:	2310      	movs	r3, #16
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039c2:	e106      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a7c      	ldr	r2, [pc, #496]	@ (8003bbc <UART_SetConfig+0x2d0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d138      	bne.n	8003a40 <UART_SetConfig+0x154>
 80039ce:	4b7a      	ldr	r3, [pc, #488]	@ (8003bb8 <UART_SetConfig+0x2cc>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b0c      	cmp	r3, #12
 80039da:	d82d      	bhi.n	8003a38 <UART_SetConfig+0x14c>
 80039dc:	a201      	add	r2, pc, #4	@ (adr r2, 80039e4 <UART_SetConfig+0xf8>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	08003a19 	.word	0x08003a19
 80039e8:	08003a39 	.word	0x08003a39
 80039ec:	08003a39 	.word	0x08003a39
 80039f0:	08003a39 	.word	0x08003a39
 80039f4:	08003a29 	.word	0x08003a29
 80039f8:	08003a39 	.word	0x08003a39
 80039fc:	08003a39 	.word	0x08003a39
 8003a00:	08003a39 	.word	0x08003a39
 8003a04:	08003a21 	.word	0x08003a21
 8003a08:	08003a39 	.word	0x08003a39
 8003a0c:	08003a39 	.word	0x08003a39
 8003a10:	08003a39 	.word	0x08003a39
 8003a14:	08003a31 	.word	0x08003a31
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a1e:	e0d8      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003a20:	2302      	movs	r3, #2
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a26:	e0d4      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a2e:	e0d0      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003a30:	2308      	movs	r3, #8
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a36:	e0cc      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a3e:	e0c8      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a5e      	ldr	r2, [pc, #376]	@ (8003bc0 <UART_SetConfig+0x2d4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d125      	bne.n	8003a96 <UART_SetConfig+0x1aa>
 8003a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8003bb8 <UART_SetConfig+0x2cc>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a54:	2b30      	cmp	r3, #48	@ 0x30
 8003a56:	d016      	beq.n	8003a86 <UART_SetConfig+0x19a>
 8003a58:	2b30      	cmp	r3, #48	@ 0x30
 8003a5a:	d818      	bhi.n	8003a8e <UART_SetConfig+0x1a2>
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d00a      	beq.n	8003a76 <UART_SetConfig+0x18a>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d814      	bhi.n	8003a8e <UART_SetConfig+0x1a2>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <UART_SetConfig+0x182>
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d008      	beq.n	8003a7e <UART_SetConfig+0x192>
 8003a6c:	e00f      	b.n	8003a8e <UART_SetConfig+0x1a2>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a74:	e0ad      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003a76:	2302      	movs	r3, #2
 8003a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a7c:	e0a9      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003a7e:	2304      	movs	r3, #4
 8003a80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a84:	e0a5      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003a86:	2308      	movs	r3, #8
 8003a88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8c:	e0a1      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003a8e:	2310      	movs	r3, #16
 8003a90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a94:	e09d      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a4a      	ldr	r2, [pc, #296]	@ (8003bc4 <UART_SetConfig+0x2d8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d125      	bne.n	8003aec <UART_SetConfig+0x200>
 8003aa0:	4b45      	ldr	r3, [pc, #276]	@ (8003bb8 <UART_SetConfig+0x2cc>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003aaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003aac:	d016      	beq.n	8003adc <UART_SetConfig+0x1f0>
 8003aae:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ab0:	d818      	bhi.n	8003ae4 <UART_SetConfig+0x1f8>
 8003ab2:	2b80      	cmp	r3, #128	@ 0x80
 8003ab4:	d00a      	beq.n	8003acc <UART_SetConfig+0x1e0>
 8003ab6:	2b80      	cmp	r3, #128	@ 0x80
 8003ab8:	d814      	bhi.n	8003ae4 <UART_SetConfig+0x1f8>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <UART_SetConfig+0x1d8>
 8003abe:	2b40      	cmp	r3, #64	@ 0x40
 8003ac0:	d008      	beq.n	8003ad4 <UART_SetConfig+0x1e8>
 8003ac2:	e00f      	b.n	8003ae4 <UART_SetConfig+0x1f8>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aca:	e082      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003acc:	2302      	movs	r3, #2
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad2:	e07e      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ada:	e07a      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003adc:	2308      	movs	r3, #8
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae2:	e076      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aea:	e072      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a35      	ldr	r2, [pc, #212]	@ (8003bc8 <UART_SetConfig+0x2dc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d12a      	bne.n	8003b4c <UART_SetConfig+0x260>
 8003af6:	4b30      	ldr	r3, [pc, #192]	@ (8003bb8 <UART_SetConfig+0x2cc>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b04:	d01a      	beq.n	8003b3c <UART_SetConfig+0x250>
 8003b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b0a:	d81b      	bhi.n	8003b44 <UART_SetConfig+0x258>
 8003b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b10:	d00c      	beq.n	8003b2c <UART_SetConfig+0x240>
 8003b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b16:	d815      	bhi.n	8003b44 <UART_SetConfig+0x258>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <UART_SetConfig+0x238>
 8003b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b20:	d008      	beq.n	8003b34 <UART_SetConfig+0x248>
 8003b22:	e00f      	b.n	8003b44 <UART_SetConfig+0x258>
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b2a:	e052      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b32:	e04e      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003b34:	2304      	movs	r3, #4
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3a:	e04a      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003b3c:	2308      	movs	r3, #8
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b42:	e046      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003b44:	2310      	movs	r3, #16
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4a:	e042      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a17      	ldr	r2, [pc, #92]	@ (8003bb0 <UART_SetConfig+0x2c4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d13a      	bne.n	8003bcc <UART_SetConfig+0x2e0>
 8003b56:	4b18      	ldr	r3, [pc, #96]	@ (8003bb8 <UART_SetConfig+0x2cc>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b64:	d01a      	beq.n	8003b9c <UART_SetConfig+0x2b0>
 8003b66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b6a:	d81b      	bhi.n	8003ba4 <UART_SetConfig+0x2b8>
 8003b6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b70:	d00c      	beq.n	8003b8c <UART_SetConfig+0x2a0>
 8003b72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b76:	d815      	bhi.n	8003ba4 <UART_SetConfig+0x2b8>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <UART_SetConfig+0x298>
 8003b7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b80:	d008      	beq.n	8003b94 <UART_SetConfig+0x2a8>
 8003b82:	e00f      	b.n	8003ba4 <UART_SetConfig+0x2b8>
 8003b84:	2300      	movs	r3, #0
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b8a:	e022      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b92:	e01e      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003b94:	2304      	movs	r3, #4
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9a:	e01a      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba2:	e016      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003baa:	e012      	b.n	8003bd2 <UART_SetConfig+0x2e6>
 8003bac:	efff69f3 	.word	0xefff69f3
 8003bb0:	40008000 	.word	0x40008000
 8003bb4:	40013800 	.word	0x40013800
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40004400 	.word	0x40004400
 8003bc0:	40004800 	.word	0x40004800
 8003bc4:	40004c00 	.word	0x40004c00
 8003bc8:	40005000 	.word	0x40005000
 8003bcc:	2310      	movs	r3, #16
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a9f      	ldr	r2, [pc, #636]	@ (8003e54 <UART_SetConfig+0x568>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d17a      	bne.n	8003cd2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d824      	bhi.n	8003c2e <UART_SetConfig+0x342>
 8003be4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bec <UART_SetConfig+0x300>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c2f 	.word	0x08003c2f
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c2f 	.word	0x08003c2f
 8003bfc:	08003c1f 	.word	0x08003c1f
 8003c00:	08003c2f 	.word	0x08003c2f
 8003c04:	08003c2f 	.word	0x08003c2f
 8003c08:	08003c2f 	.word	0x08003c2f
 8003c0c:	08003c27 	.word	0x08003c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c10:	f7fe fd08 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 8003c14:	61f8      	str	r0, [r7, #28]
        break;
 8003c16:	e010      	b.n	8003c3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c18:	4b8f      	ldr	r3, [pc, #572]	@ (8003e58 <UART_SetConfig+0x56c>)
 8003c1a:	61fb      	str	r3, [r7, #28]
        break;
 8003c1c:	e00d      	b.n	8003c3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1e:	f7fe fc69 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 8003c22:	61f8      	str	r0, [r7, #28]
        break;
 8003c24:	e009      	b.n	8003c3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c2a:	61fb      	str	r3, [r7, #28]
        break;
 8003c2c:	e005      	b.n	8003c3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80fb 	beq.w	8003e38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d305      	bcc.n	8003c5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d903      	bls.n	8003c66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c64:	e0e8      	b.n	8003e38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	461c      	mov	r4, r3
 8003c6c:	4615      	mov	r5, r2
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	022b      	lsls	r3, r5, #8
 8003c78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c7c:	0222      	lsls	r2, r4, #8
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	6849      	ldr	r1, [r1, #4]
 8003c82:	0849      	lsrs	r1, r1, #1
 8003c84:	2000      	movs	r0, #0
 8003c86:	4688      	mov	r8, r1
 8003c88:	4681      	mov	r9, r0
 8003c8a:	eb12 0a08 	adds.w	sl, r2, r8
 8003c8e:	eb43 0b09 	adc.w	fp, r3, r9
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ca0:	4650      	mov	r0, sl
 8003ca2:	4659      	mov	r1, fp
 8003ca4:	f7fc fae4 	bl	8000270 <__aeabi_uldivmod>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4613      	mov	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cb6:	d308      	bcc.n	8003cca <UART_SetConfig+0x3de>
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cbe:	d204      	bcs.n	8003cca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	60da      	str	r2, [r3, #12]
 8003cc8:	e0b6      	b.n	8003e38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cd0:	e0b2      	b.n	8003e38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cda:	d15e      	bne.n	8003d9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d828      	bhi.n	8003d36 <UART_SetConfig+0x44a>
 8003ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cec <UART_SetConfig+0x400>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003d11 	.word	0x08003d11
 8003cf0:	08003d19 	.word	0x08003d19
 8003cf4:	08003d21 	.word	0x08003d21
 8003cf8:	08003d37 	.word	0x08003d37
 8003cfc:	08003d27 	.word	0x08003d27
 8003d00:	08003d37 	.word	0x08003d37
 8003d04:	08003d37 	.word	0x08003d37
 8003d08:	08003d37 	.word	0x08003d37
 8003d0c:	08003d2f 	.word	0x08003d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d10:	f7fe fc88 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 8003d14:	61f8      	str	r0, [r7, #28]
        break;
 8003d16:	e014      	b.n	8003d42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d18:	f7fe fc9a 	bl	8002650 <HAL_RCC_GetPCLK2Freq>
 8003d1c:	61f8      	str	r0, [r7, #28]
        break;
 8003d1e:	e010      	b.n	8003d42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d20:	4b4d      	ldr	r3, [pc, #308]	@ (8003e58 <UART_SetConfig+0x56c>)
 8003d22:	61fb      	str	r3, [r7, #28]
        break;
 8003d24:	e00d      	b.n	8003d42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d26:	f7fe fbe5 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 8003d2a:	61f8      	str	r0, [r7, #28]
        break;
 8003d2c:	e009      	b.n	8003d42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d32:	61fb      	str	r3, [r7, #28]
        break;
 8003d34:	e005      	b.n	8003d42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d077      	beq.n	8003e38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	005a      	lsls	r2, r3, #1
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	441a      	add	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b0f      	cmp	r3, #15
 8003d62:	d916      	bls.n	8003d92 <UART_SetConfig+0x4a6>
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6a:	d212      	bcs.n	8003d92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f023 030f 	bic.w	r3, r3, #15
 8003d74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	8afb      	ldrh	r3, [r7, #22]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	8afa      	ldrh	r2, [r7, #22]
 8003d8e:	60da      	str	r2, [r3, #12]
 8003d90:	e052      	b.n	8003e38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d98:	e04e      	b.n	8003e38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d827      	bhi.n	8003df2 <UART_SetConfig+0x506>
 8003da2:	a201      	add	r2, pc, #4	@ (adr r2, 8003da8 <UART_SetConfig+0x4bc>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003dcd 	.word	0x08003dcd
 8003dac:	08003dd5 	.word	0x08003dd5
 8003db0:	08003ddd 	.word	0x08003ddd
 8003db4:	08003df3 	.word	0x08003df3
 8003db8:	08003de3 	.word	0x08003de3
 8003dbc:	08003df3 	.word	0x08003df3
 8003dc0:	08003df3 	.word	0x08003df3
 8003dc4:	08003df3 	.word	0x08003df3
 8003dc8:	08003deb 	.word	0x08003deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dcc:	f7fe fc2a 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 8003dd0:	61f8      	str	r0, [r7, #28]
        break;
 8003dd2:	e014      	b.n	8003dfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd4:	f7fe fc3c 	bl	8002650 <HAL_RCC_GetPCLK2Freq>
 8003dd8:	61f8      	str	r0, [r7, #28]
        break;
 8003dda:	e010      	b.n	8003dfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e58 <UART_SetConfig+0x56c>)
 8003dde:	61fb      	str	r3, [r7, #28]
        break;
 8003de0:	e00d      	b.n	8003dfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de2:	f7fe fb87 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 8003de6:	61f8      	str	r0, [r7, #28]
        break;
 8003de8:	e009      	b.n	8003dfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dee:	61fb      	str	r3, [r7, #28]
        break;
 8003df0:	e005      	b.n	8003dfe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003dfc:	bf00      	nop
    }

    if (pclk != 0U)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d019      	beq.n	8003e38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	085a      	lsrs	r2, r3, #1
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	441a      	add	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b0f      	cmp	r3, #15
 8003e1c:	d909      	bls.n	8003e32 <UART_SetConfig+0x546>
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e24:	d205      	bcs.n	8003e32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60da      	str	r2, [r3, #12]
 8003e30:	e002      	b.n	8003e38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e44:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3728      	adds	r7, #40	@ 0x28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e52:	bf00      	nop
 8003e54:	40008000 	.word	0x40008000
 8003e58:	00f42400 	.word	0x00f42400

08003e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01a      	beq.n	8003f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f5a:	d10a      	bne.n	8003f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
  }
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b098      	sub	sp, #96	@ 0x60
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fb0:	f7fc feea 	bl	8000d88 <HAL_GetTick>
 8003fb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d12e      	bne.n	8004022 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f88c 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d021      	beq.n	8004022 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ff2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ffe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004002:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004004:	e841 2300 	strex	r3, r2, [r1]
 8004008:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800400a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e6      	bne.n	8003fde <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e062      	b.n	80040e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b04      	cmp	r3, #4
 800402e:	d149      	bne.n	80040c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004030:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004038:	2200      	movs	r2, #0
 800403a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f856 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d03c      	beq.n	80040c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	623b      	str	r3, [r7, #32]
   return(result);
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800405e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004068:	633b      	str	r3, [r7, #48]	@ 0x30
 800406a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800406e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e6      	bne.n	800404a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3308      	adds	r3, #8
 8004082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	60fb      	str	r3, [r7, #12]
   return(result);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0301 	bic.w	r3, r3, #1
 8004092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3308      	adds	r3, #8
 800409a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800409c:	61fa      	str	r2, [r7, #28]
 800409e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	69b9      	ldr	r1, [r7, #24]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	617b      	str	r3, [r7, #20]
   return(result);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e5      	bne.n	800407c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e011      	b.n	80040e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3758      	adds	r7, #88	@ 0x58
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004100:	e04f      	b.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d04b      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410a:	f7fc fe3d 	bl	8000d88 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	429a      	cmp	r2, r3
 8004118:	d302      	bcc.n	8004120 <UART_WaitOnFlagUntilTimeout+0x30>
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e04e      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d037      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b80      	cmp	r3, #128	@ 0x80
 8004136:	d034      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	d031      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b08      	cmp	r3, #8
 800414a:	d110      	bne.n	800416e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2208      	movs	r2, #8
 8004152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f838 	bl	80041ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2208      	movs	r2, #8
 800415e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e029      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800417c:	d111      	bne.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f81e 	bl	80041ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e00f      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4013      	ands	r3, r2
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	bf0c      	ite	eq
 80041b2:	2301      	moveq	r3, #1
 80041b4:	2300      	movne	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d0a0      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b095      	sub	sp, #84	@ 0x54
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80041f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e6      	bne.n	80041d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3308      	adds	r3, #8
 800420a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	61fb      	str	r3, [r7, #28]
   return(result);
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3308      	adds	r3, #8
 8004222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004224:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800422a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e5      	bne.n	8004204 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423c:	2b01      	cmp	r3, #1
 800423e:	d118      	bne.n	8004272 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	60bb      	str	r3, [r7, #8]
   return(result);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f023 0310 	bic.w	r3, r3, #16
 8004254:	647b      	str	r3, [r7, #68]	@ 0x44
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800425e:	61bb      	str	r3, [r7, #24]
 8004260:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6979      	ldr	r1, [r7, #20]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	613b      	str	r3, [r7, #16]
   return(result);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e6      	bne.n	8004240 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004286:	bf00      	nop
 8004288:	3754      	adds	r7, #84	@ 0x54
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <siprintf>:
 8004294:	b40e      	push	{r1, r2, r3}
 8004296:	b500      	push	{lr}
 8004298:	b09c      	sub	sp, #112	@ 0x70
 800429a:	ab1d      	add	r3, sp, #116	@ 0x74
 800429c:	9002      	str	r0, [sp, #8]
 800429e:	9006      	str	r0, [sp, #24]
 80042a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80042a4:	4809      	ldr	r0, [pc, #36]	@ (80042cc <siprintf+0x38>)
 80042a6:	9107      	str	r1, [sp, #28]
 80042a8:	9104      	str	r1, [sp, #16]
 80042aa:	4909      	ldr	r1, [pc, #36]	@ (80042d0 <siprintf+0x3c>)
 80042ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80042b0:	9105      	str	r1, [sp, #20]
 80042b2:	6800      	ldr	r0, [r0, #0]
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	a902      	add	r1, sp, #8
 80042b8:	f000 f994 	bl	80045e4 <_svfiprintf_r>
 80042bc:	9b02      	ldr	r3, [sp, #8]
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
 80042c2:	b01c      	add	sp, #112	@ 0x70
 80042c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042c8:	b003      	add	sp, #12
 80042ca:	4770      	bx	lr
 80042cc:	20000038 	.word	0x20000038
 80042d0:	ffff0208 	.word	0xffff0208

080042d4 <memset>:
 80042d4:	4402      	add	r2, r0
 80042d6:	4603      	mov	r3, r0
 80042d8:	4293      	cmp	r3, r2
 80042da:	d100      	bne.n	80042de <memset+0xa>
 80042dc:	4770      	bx	lr
 80042de:	f803 1b01 	strb.w	r1, [r3], #1
 80042e2:	e7f9      	b.n	80042d8 <memset+0x4>

080042e4 <__errno>:
 80042e4:	4b01      	ldr	r3, [pc, #4]	@ (80042ec <__errno+0x8>)
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000038 	.word	0x20000038

080042f0 <__libc_init_array>:
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004328 <__libc_init_array+0x38>)
 80042f4:	4c0d      	ldr	r4, [pc, #52]	@ (800432c <__libc_init_array+0x3c>)
 80042f6:	1b64      	subs	r4, r4, r5
 80042f8:	10a4      	asrs	r4, r4, #2
 80042fa:	2600      	movs	r6, #0
 80042fc:	42a6      	cmp	r6, r4
 80042fe:	d109      	bne.n	8004314 <__libc_init_array+0x24>
 8004300:	4d0b      	ldr	r5, [pc, #44]	@ (8004330 <__libc_init_array+0x40>)
 8004302:	4c0c      	ldr	r4, [pc, #48]	@ (8004334 <__libc_init_array+0x44>)
 8004304:	f000 fc66 	bl	8004bd4 <_init>
 8004308:	1b64      	subs	r4, r4, r5
 800430a:	10a4      	asrs	r4, r4, #2
 800430c:	2600      	movs	r6, #0
 800430e:	42a6      	cmp	r6, r4
 8004310:	d105      	bne.n	800431e <__libc_init_array+0x2e>
 8004312:	bd70      	pop	{r4, r5, r6, pc}
 8004314:	f855 3b04 	ldr.w	r3, [r5], #4
 8004318:	4798      	blx	r3
 800431a:	3601      	adds	r6, #1
 800431c:	e7ee      	b.n	80042fc <__libc_init_array+0xc>
 800431e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004322:	4798      	blx	r3
 8004324:	3601      	adds	r6, #1
 8004326:	e7f2      	b.n	800430e <__libc_init_array+0x1e>
 8004328:	08004c78 	.word	0x08004c78
 800432c:	08004c78 	.word	0x08004c78
 8004330:	08004c78 	.word	0x08004c78
 8004334:	08004c7c 	.word	0x08004c7c

08004338 <__retarget_lock_acquire_recursive>:
 8004338:	4770      	bx	lr

0800433a <__retarget_lock_release_recursive>:
 800433a:	4770      	bx	lr

0800433c <_free_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4605      	mov	r5, r0
 8004340:	2900      	cmp	r1, #0
 8004342:	d041      	beq.n	80043c8 <_free_r+0x8c>
 8004344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004348:	1f0c      	subs	r4, r1, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	bfb8      	it	lt
 800434e:	18e4      	addlt	r4, r4, r3
 8004350:	f000 f8e0 	bl	8004514 <__malloc_lock>
 8004354:	4a1d      	ldr	r2, [pc, #116]	@ (80043cc <_free_r+0x90>)
 8004356:	6813      	ldr	r3, [r2, #0]
 8004358:	b933      	cbnz	r3, 8004368 <_free_r+0x2c>
 800435a:	6063      	str	r3, [r4, #4]
 800435c:	6014      	str	r4, [r2, #0]
 800435e:	4628      	mov	r0, r5
 8004360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004364:	f000 b8dc 	b.w	8004520 <__malloc_unlock>
 8004368:	42a3      	cmp	r3, r4
 800436a:	d908      	bls.n	800437e <_free_r+0x42>
 800436c:	6820      	ldr	r0, [r4, #0]
 800436e:	1821      	adds	r1, r4, r0
 8004370:	428b      	cmp	r3, r1
 8004372:	bf01      	itttt	eq
 8004374:	6819      	ldreq	r1, [r3, #0]
 8004376:	685b      	ldreq	r3, [r3, #4]
 8004378:	1809      	addeq	r1, r1, r0
 800437a:	6021      	streq	r1, [r4, #0]
 800437c:	e7ed      	b.n	800435a <_free_r+0x1e>
 800437e:	461a      	mov	r2, r3
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	b10b      	cbz	r3, 8004388 <_free_r+0x4c>
 8004384:	42a3      	cmp	r3, r4
 8004386:	d9fa      	bls.n	800437e <_free_r+0x42>
 8004388:	6811      	ldr	r1, [r2, #0]
 800438a:	1850      	adds	r0, r2, r1
 800438c:	42a0      	cmp	r0, r4
 800438e:	d10b      	bne.n	80043a8 <_free_r+0x6c>
 8004390:	6820      	ldr	r0, [r4, #0]
 8004392:	4401      	add	r1, r0
 8004394:	1850      	adds	r0, r2, r1
 8004396:	4283      	cmp	r3, r0
 8004398:	6011      	str	r1, [r2, #0]
 800439a:	d1e0      	bne.n	800435e <_free_r+0x22>
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	6053      	str	r3, [r2, #4]
 80043a2:	4408      	add	r0, r1
 80043a4:	6010      	str	r0, [r2, #0]
 80043a6:	e7da      	b.n	800435e <_free_r+0x22>
 80043a8:	d902      	bls.n	80043b0 <_free_r+0x74>
 80043aa:	230c      	movs	r3, #12
 80043ac:	602b      	str	r3, [r5, #0]
 80043ae:	e7d6      	b.n	800435e <_free_r+0x22>
 80043b0:	6820      	ldr	r0, [r4, #0]
 80043b2:	1821      	adds	r1, r4, r0
 80043b4:	428b      	cmp	r3, r1
 80043b6:	bf04      	itt	eq
 80043b8:	6819      	ldreq	r1, [r3, #0]
 80043ba:	685b      	ldreq	r3, [r3, #4]
 80043bc:	6063      	str	r3, [r4, #4]
 80043be:	bf04      	itt	eq
 80043c0:	1809      	addeq	r1, r1, r0
 80043c2:	6021      	streq	r1, [r4, #0]
 80043c4:	6054      	str	r4, [r2, #4]
 80043c6:	e7ca      	b.n	800435e <_free_r+0x22>
 80043c8:	bd38      	pop	{r3, r4, r5, pc}
 80043ca:	bf00      	nop
 80043cc:	20000338 	.word	0x20000338

080043d0 <sbrk_aligned>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	4e0f      	ldr	r6, [pc, #60]	@ (8004410 <sbrk_aligned+0x40>)
 80043d4:	460c      	mov	r4, r1
 80043d6:	6831      	ldr	r1, [r6, #0]
 80043d8:	4605      	mov	r5, r0
 80043da:	b911      	cbnz	r1, 80043e2 <sbrk_aligned+0x12>
 80043dc:	f000 fba6 	bl	8004b2c <_sbrk_r>
 80043e0:	6030      	str	r0, [r6, #0]
 80043e2:	4621      	mov	r1, r4
 80043e4:	4628      	mov	r0, r5
 80043e6:	f000 fba1 	bl	8004b2c <_sbrk_r>
 80043ea:	1c43      	adds	r3, r0, #1
 80043ec:	d103      	bne.n	80043f6 <sbrk_aligned+0x26>
 80043ee:	f04f 34ff 	mov.w	r4, #4294967295
 80043f2:	4620      	mov	r0, r4
 80043f4:	bd70      	pop	{r4, r5, r6, pc}
 80043f6:	1cc4      	adds	r4, r0, #3
 80043f8:	f024 0403 	bic.w	r4, r4, #3
 80043fc:	42a0      	cmp	r0, r4
 80043fe:	d0f8      	beq.n	80043f2 <sbrk_aligned+0x22>
 8004400:	1a21      	subs	r1, r4, r0
 8004402:	4628      	mov	r0, r5
 8004404:	f000 fb92 	bl	8004b2c <_sbrk_r>
 8004408:	3001      	adds	r0, #1
 800440a:	d1f2      	bne.n	80043f2 <sbrk_aligned+0x22>
 800440c:	e7ef      	b.n	80043ee <sbrk_aligned+0x1e>
 800440e:	bf00      	nop
 8004410:	20000334 	.word	0x20000334

08004414 <_malloc_r>:
 8004414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004418:	1ccd      	adds	r5, r1, #3
 800441a:	f025 0503 	bic.w	r5, r5, #3
 800441e:	3508      	adds	r5, #8
 8004420:	2d0c      	cmp	r5, #12
 8004422:	bf38      	it	cc
 8004424:	250c      	movcc	r5, #12
 8004426:	2d00      	cmp	r5, #0
 8004428:	4606      	mov	r6, r0
 800442a:	db01      	blt.n	8004430 <_malloc_r+0x1c>
 800442c:	42a9      	cmp	r1, r5
 800442e:	d904      	bls.n	800443a <_malloc_r+0x26>
 8004430:	230c      	movs	r3, #12
 8004432:	6033      	str	r3, [r6, #0]
 8004434:	2000      	movs	r0, #0
 8004436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800443a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004510 <_malloc_r+0xfc>
 800443e:	f000 f869 	bl	8004514 <__malloc_lock>
 8004442:	f8d8 3000 	ldr.w	r3, [r8]
 8004446:	461c      	mov	r4, r3
 8004448:	bb44      	cbnz	r4, 800449c <_malloc_r+0x88>
 800444a:	4629      	mov	r1, r5
 800444c:	4630      	mov	r0, r6
 800444e:	f7ff ffbf 	bl	80043d0 <sbrk_aligned>
 8004452:	1c43      	adds	r3, r0, #1
 8004454:	4604      	mov	r4, r0
 8004456:	d158      	bne.n	800450a <_malloc_r+0xf6>
 8004458:	f8d8 4000 	ldr.w	r4, [r8]
 800445c:	4627      	mov	r7, r4
 800445e:	2f00      	cmp	r7, #0
 8004460:	d143      	bne.n	80044ea <_malloc_r+0xd6>
 8004462:	2c00      	cmp	r4, #0
 8004464:	d04b      	beq.n	80044fe <_malloc_r+0xea>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	4639      	mov	r1, r7
 800446a:	4630      	mov	r0, r6
 800446c:	eb04 0903 	add.w	r9, r4, r3
 8004470:	f000 fb5c 	bl	8004b2c <_sbrk_r>
 8004474:	4581      	cmp	r9, r0
 8004476:	d142      	bne.n	80044fe <_malloc_r+0xea>
 8004478:	6821      	ldr	r1, [r4, #0]
 800447a:	1a6d      	subs	r5, r5, r1
 800447c:	4629      	mov	r1, r5
 800447e:	4630      	mov	r0, r6
 8004480:	f7ff ffa6 	bl	80043d0 <sbrk_aligned>
 8004484:	3001      	adds	r0, #1
 8004486:	d03a      	beq.n	80044fe <_malloc_r+0xea>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	442b      	add	r3, r5
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	f8d8 3000 	ldr.w	r3, [r8]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	bb62      	cbnz	r2, 80044f0 <_malloc_r+0xdc>
 8004496:	f8c8 7000 	str.w	r7, [r8]
 800449a:	e00f      	b.n	80044bc <_malloc_r+0xa8>
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	1b52      	subs	r2, r2, r5
 80044a0:	d420      	bmi.n	80044e4 <_malloc_r+0xd0>
 80044a2:	2a0b      	cmp	r2, #11
 80044a4:	d917      	bls.n	80044d6 <_malloc_r+0xc2>
 80044a6:	1961      	adds	r1, r4, r5
 80044a8:	42a3      	cmp	r3, r4
 80044aa:	6025      	str	r5, [r4, #0]
 80044ac:	bf18      	it	ne
 80044ae:	6059      	strne	r1, [r3, #4]
 80044b0:	6863      	ldr	r3, [r4, #4]
 80044b2:	bf08      	it	eq
 80044b4:	f8c8 1000 	streq.w	r1, [r8]
 80044b8:	5162      	str	r2, [r4, r5]
 80044ba:	604b      	str	r3, [r1, #4]
 80044bc:	4630      	mov	r0, r6
 80044be:	f000 f82f 	bl	8004520 <__malloc_unlock>
 80044c2:	f104 000b 	add.w	r0, r4, #11
 80044c6:	1d23      	adds	r3, r4, #4
 80044c8:	f020 0007 	bic.w	r0, r0, #7
 80044cc:	1ac2      	subs	r2, r0, r3
 80044ce:	bf1c      	itt	ne
 80044d0:	1a1b      	subne	r3, r3, r0
 80044d2:	50a3      	strne	r3, [r4, r2]
 80044d4:	e7af      	b.n	8004436 <_malloc_r+0x22>
 80044d6:	6862      	ldr	r2, [r4, #4]
 80044d8:	42a3      	cmp	r3, r4
 80044da:	bf0c      	ite	eq
 80044dc:	f8c8 2000 	streq.w	r2, [r8]
 80044e0:	605a      	strne	r2, [r3, #4]
 80044e2:	e7eb      	b.n	80044bc <_malloc_r+0xa8>
 80044e4:	4623      	mov	r3, r4
 80044e6:	6864      	ldr	r4, [r4, #4]
 80044e8:	e7ae      	b.n	8004448 <_malloc_r+0x34>
 80044ea:	463c      	mov	r4, r7
 80044ec:	687f      	ldr	r7, [r7, #4]
 80044ee:	e7b6      	b.n	800445e <_malloc_r+0x4a>
 80044f0:	461a      	mov	r2, r3
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	42a3      	cmp	r3, r4
 80044f6:	d1fb      	bne.n	80044f0 <_malloc_r+0xdc>
 80044f8:	2300      	movs	r3, #0
 80044fa:	6053      	str	r3, [r2, #4]
 80044fc:	e7de      	b.n	80044bc <_malloc_r+0xa8>
 80044fe:	230c      	movs	r3, #12
 8004500:	6033      	str	r3, [r6, #0]
 8004502:	4630      	mov	r0, r6
 8004504:	f000 f80c 	bl	8004520 <__malloc_unlock>
 8004508:	e794      	b.n	8004434 <_malloc_r+0x20>
 800450a:	6005      	str	r5, [r0, #0]
 800450c:	e7d6      	b.n	80044bc <_malloc_r+0xa8>
 800450e:	bf00      	nop
 8004510:	20000338 	.word	0x20000338

08004514 <__malloc_lock>:
 8004514:	4801      	ldr	r0, [pc, #4]	@ (800451c <__malloc_lock+0x8>)
 8004516:	f7ff bf0f 	b.w	8004338 <__retarget_lock_acquire_recursive>
 800451a:	bf00      	nop
 800451c:	20000330 	.word	0x20000330

08004520 <__malloc_unlock>:
 8004520:	4801      	ldr	r0, [pc, #4]	@ (8004528 <__malloc_unlock+0x8>)
 8004522:	f7ff bf0a 	b.w	800433a <__retarget_lock_release_recursive>
 8004526:	bf00      	nop
 8004528:	20000330 	.word	0x20000330

0800452c <__ssputs_r>:
 800452c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004530:	688e      	ldr	r6, [r1, #8]
 8004532:	461f      	mov	r7, r3
 8004534:	42be      	cmp	r6, r7
 8004536:	680b      	ldr	r3, [r1, #0]
 8004538:	4682      	mov	sl, r0
 800453a:	460c      	mov	r4, r1
 800453c:	4690      	mov	r8, r2
 800453e:	d82d      	bhi.n	800459c <__ssputs_r+0x70>
 8004540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004544:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004548:	d026      	beq.n	8004598 <__ssputs_r+0x6c>
 800454a:	6965      	ldr	r5, [r4, #20]
 800454c:	6909      	ldr	r1, [r1, #16]
 800454e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004552:	eba3 0901 	sub.w	r9, r3, r1
 8004556:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800455a:	1c7b      	adds	r3, r7, #1
 800455c:	444b      	add	r3, r9
 800455e:	106d      	asrs	r5, r5, #1
 8004560:	429d      	cmp	r5, r3
 8004562:	bf38      	it	cc
 8004564:	461d      	movcc	r5, r3
 8004566:	0553      	lsls	r3, r2, #21
 8004568:	d527      	bpl.n	80045ba <__ssputs_r+0x8e>
 800456a:	4629      	mov	r1, r5
 800456c:	f7ff ff52 	bl	8004414 <_malloc_r>
 8004570:	4606      	mov	r6, r0
 8004572:	b360      	cbz	r0, 80045ce <__ssputs_r+0xa2>
 8004574:	6921      	ldr	r1, [r4, #16]
 8004576:	464a      	mov	r2, r9
 8004578:	f000 fae8 	bl	8004b4c <memcpy>
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	6126      	str	r6, [r4, #16]
 800458a:	6165      	str	r5, [r4, #20]
 800458c:	444e      	add	r6, r9
 800458e:	eba5 0509 	sub.w	r5, r5, r9
 8004592:	6026      	str	r6, [r4, #0]
 8004594:	60a5      	str	r5, [r4, #8]
 8004596:	463e      	mov	r6, r7
 8004598:	42be      	cmp	r6, r7
 800459a:	d900      	bls.n	800459e <__ssputs_r+0x72>
 800459c:	463e      	mov	r6, r7
 800459e:	6820      	ldr	r0, [r4, #0]
 80045a0:	4632      	mov	r2, r6
 80045a2:	4641      	mov	r1, r8
 80045a4:	f000 faa8 	bl	8004af8 <memmove>
 80045a8:	68a3      	ldr	r3, [r4, #8]
 80045aa:	1b9b      	subs	r3, r3, r6
 80045ac:	60a3      	str	r3, [r4, #8]
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	4433      	add	r3, r6
 80045b2:	6023      	str	r3, [r4, #0]
 80045b4:	2000      	movs	r0, #0
 80045b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ba:	462a      	mov	r2, r5
 80045bc:	f000 fad4 	bl	8004b68 <_realloc_r>
 80045c0:	4606      	mov	r6, r0
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d1e0      	bne.n	8004588 <__ssputs_r+0x5c>
 80045c6:	6921      	ldr	r1, [r4, #16]
 80045c8:	4650      	mov	r0, sl
 80045ca:	f7ff feb7 	bl	800433c <_free_r>
 80045ce:	230c      	movs	r3, #12
 80045d0:	f8ca 3000 	str.w	r3, [sl]
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045da:	81a3      	strh	r3, [r4, #12]
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295
 80045e0:	e7e9      	b.n	80045b6 <__ssputs_r+0x8a>
	...

080045e4 <_svfiprintf_r>:
 80045e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e8:	4698      	mov	r8, r3
 80045ea:	898b      	ldrh	r3, [r1, #12]
 80045ec:	061b      	lsls	r3, r3, #24
 80045ee:	b09d      	sub	sp, #116	@ 0x74
 80045f0:	4607      	mov	r7, r0
 80045f2:	460d      	mov	r5, r1
 80045f4:	4614      	mov	r4, r2
 80045f6:	d510      	bpl.n	800461a <_svfiprintf_r+0x36>
 80045f8:	690b      	ldr	r3, [r1, #16]
 80045fa:	b973      	cbnz	r3, 800461a <_svfiprintf_r+0x36>
 80045fc:	2140      	movs	r1, #64	@ 0x40
 80045fe:	f7ff ff09 	bl	8004414 <_malloc_r>
 8004602:	6028      	str	r0, [r5, #0]
 8004604:	6128      	str	r0, [r5, #16]
 8004606:	b930      	cbnz	r0, 8004616 <_svfiprintf_r+0x32>
 8004608:	230c      	movs	r3, #12
 800460a:	603b      	str	r3, [r7, #0]
 800460c:	f04f 30ff 	mov.w	r0, #4294967295
 8004610:	b01d      	add	sp, #116	@ 0x74
 8004612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004616:	2340      	movs	r3, #64	@ 0x40
 8004618:	616b      	str	r3, [r5, #20]
 800461a:	2300      	movs	r3, #0
 800461c:	9309      	str	r3, [sp, #36]	@ 0x24
 800461e:	2320      	movs	r3, #32
 8004620:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004624:	f8cd 800c 	str.w	r8, [sp, #12]
 8004628:	2330      	movs	r3, #48	@ 0x30
 800462a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80047c8 <_svfiprintf_r+0x1e4>
 800462e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004632:	f04f 0901 	mov.w	r9, #1
 8004636:	4623      	mov	r3, r4
 8004638:	469a      	mov	sl, r3
 800463a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800463e:	b10a      	cbz	r2, 8004644 <_svfiprintf_r+0x60>
 8004640:	2a25      	cmp	r2, #37	@ 0x25
 8004642:	d1f9      	bne.n	8004638 <_svfiprintf_r+0x54>
 8004644:	ebba 0b04 	subs.w	fp, sl, r4
 8004648:	d00b      	beq.n	8004662 <_svfiprintf_r+0x7e>
 800464a:	465b      	mov	r3, fp
 800464c:	4622      	mov	r2, r4
 800464e:	4629      	mov	r1, r5
 8004650:	4638      	mov	r0, r7
 8004652:	f7ff ff6b 	bl	800452c <__ssputs_r>
 8004656:	3001      	adds	r0, #1
 8004658:	f000 80a7 	beq.w	80047aa <_svfiprintf_r+0x1c6>
 800465c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800465e:	445a      	add	r2, fp
 8004660:	9209      	str	r2, [sp, #36]	@ 0x24
 8004662:	f89a 3000 	ldrb.w	r3, [sl]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 809f 	beq.w	80047aa <_svfiprintf_r+0x1c6>
 800466c:	2300      	movs	r3, #0
 800466e:	f04f 32ff 	mov.w	r2, #4294967295
 8004672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004676:	f10a 0a01 	add.w	sl, sl, #1
 800467a:	9304      	str	r3, [sp, #16]
 800467c:	9307      	str	r3, [sp, #28]
 800467e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004682:	931a      	str	r3, [sp, #104]	@ 0x68
 8004684:	4654      	mov	r4, sl
 8004686:	2205      	movs	r2, #5
 8004688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800468c:	484e      	ldr	r0, [pc, #312]	@ (80047c8 <_svfiprintf_r+0x1e4>)
 800468e:	f7fb fd9f 	bl	80001d0 <memchr>
 8004692:	9a04      	ldr	r2, [sp, #16]
 8004694:	b9d8      	cbnz	r0, 80046ce <_svfiprintf_r+0xea>
 8004696:	06d0      	lsls	r0, r2, #27
 8004698:	bf44      	itt	mi
 800469a:	2320      	movmi	r3, #32
 800469c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046a0:	0711      	lsls	r1, r2, #28
 80046a2:	bf44      	itt	mi
 80046a4:	232b      	movmi	r3, #43	@ 0x2b
 80046a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046aa:	f89a 3000 	ldrb.w	r3, [sl]
 80046ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80046b0:	d015      	beq.n	80046de <_svfiprintf_r+0xfa>
 80046b2:	9a07      	ldr	r2, [sp, #28]
 80046b4:	4654      	mov	r4, sl
 80046b6:	2000      	movs	r0, #0
 80046b8:	f04f 0c0a 	mov.w	ip, #10
 80046bc:	4621      	mov	r1, r4
 80046be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046c2:	3b30      	subs	r3, #48	@ 0x30
 80046c4:	2b09      	cmp	r3, #9
 80046c6:	d94b      	bls.n	8004760 <_svfiprintf_r+0x17c>
 80046c8:	b1b0      	cbz	r0, 80046f8 <_svfiprintf_r+0x114>
 80046ca:	9207      	str	r2, [sp, #28]
 80046cc:	e014      	b.n	80046f8 <_svfiprintf_r+0x114>
 80046ce:	eba0 0308 	sub.w	r3, r0, r8
 80046d2:	fa09 f303 	lsl.w	r3, r9, r3
 80046d6:	4313      	orrs	r3, r2
 80046d8:	9304      	str	r3, [sp, #16]
 80046da:	46a2      	mov	sl, r4
 80046dc:	e7d2      	b.n	8004684 <_svfiprintf_r+0xa0>
 80046de:	9b03      	ldr	r3, [sp, #12]
 80046e0:	1d19      	adds	r1, r3, #4
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	9103      	str	r1, [sp, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bfbb      	ittet	lt
 80046ea:	425b      	neglt	r3, r3
 80046ec:	f042 0202 	orrlt.w	r2, r2, #2
 80046f0:	9307      	strge	r3, [sp, #28]
 80046f2:	9307      	strlt	r3, [sp, #28]
 80046f4:	bfb8      	it	lt
 80046f6:	9204      	strlt	r2, [sp, #16]
 80046f8:	7823      	ldrb	r3, [r4, #0]
 80046fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80046fc:	d10a      	bne.n	8004714 <_svfiprintf_r+0x130>
 80046fe:	7863      	ldrb	r3, [r4, #1]
 8004700:	2b2a      	cmp	r3, #42	@ 0x2a
 8004702:	d132      	bne.n	800476a <_svfiprintf_r+0x186>
 8004704:	9b03      	ldr	r3, [sp, #12]
 8004706:	1d1a      	adds	r2, r3, #4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	9203      	str	r2, [sp, #12]
 800470c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004710:	3402      	adds	r4, #2
 8004712:	9305      	str	r3, [sp, #20]
 8004714:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80047d8 <_svfiprintf_r+0x1f4>
 8004718:	7821      	ldrb	r1, [r4, #0]
 800471a:	2203      	movs	r2, #3
 800471c:	4650      	mov	r0, sl
 800471e:	f7fb fd57 	bl	80001d0 <memchr>
 8004722:	b138      	cbz	r0, 8004734 <_svfiprintf_r+0x150>
 8004724:	9b04      	ldr	r3, [sp, #16]
 8004726:	eba0 000a 	sub.w	r0, r0, sl
 800472a:	2240      	movs	r2, #64	@ 0x40
 800472c:	4082      	lsls	r2, r0
 800472e:	4313      	orrs	r3, r2
 8004730:	3401      	adds	r4, #1
 8004732:	9304      	str	r3, [sp, #16]
 8004734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004738:	4824      	ldr	r0, [pc, #144]	@ (80047cc <_svfiprintf_r+0x1e8>)
 800473a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800473e:	2206      	movs	r2, #6
 8004740:	f7fb fd46 	bl	80001d0 <memchr>
 8004744:	2800      	cmp	r0, #0
 8004746:	d036      	beq.n	80047b6 <_svfiprintf_r+0x1d2>
 8004748:	4b21      	ldr	r3, [pc, #132]	@ (80047d0 <_svfiprintf_r+0x1ec>)
 800474a:	bb1b      	cbnz	r3, 8004794 <_svfiprintf_r+0x1b0>
 800474c:	9b03      	ldr	r3, [sp, #12]
 800474e:	3307      	adds	r3, #7
 8004750:	f023 0307 	bic.w	r3, r3, #7
 8004754:	3308      	adds	r3, #8
 8004756:	9303      	str	r3, [sp, #12]
 8004758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800475a:	4433      	add	r3, r6
 800475c:	9309      	str	r3, [sp, #36]	@ 0x24
 800475e:	e76a      	b.n	8004636 <_svfiprintf_r+0x52>
 8004760:	fb0c 3202 	mla	r2, ip, r2, r3
 8004764:	460c      	mov	r4, r1
 8004766:	2001      	movs	r0, #1
 8004768:	e7a8      	b.n	80046bc <_svfiprintf_r+0xd8>
 800476a:	2300      	movs	r3, #0
 800476c:	3401      	adds	r4, #1
 800476e:	9305      	str	r3, [sp, #20]
 8004770:	4619      	mov	r1, r3
 8004772:	f04f 0c0a 	mov.w	ip, #10
 8004776:	4620      	mov	r0, r4
 8004778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800477c:	3a30      	subs	r2, #48	@ 0x30
 800477e:	2a09      	cmp	r2, #9
 8004780:	d903      	bls.n	800478a <_svfiprintf_r+0x1a6>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0c6      	beq.n	8004714 <_svfiprintf_r+0x130>
 8004786:	9105      	str	r1, [sp, #20]
 8004788:	e7c4      	b.n	8004714 <_svfiprintf_r+0x130>
 800478a:	fb0c 2101 	mla	r1, ip, r1, r2
 800478e:	4604      	mov	r4, r0
 8004790:	2301      	movs	r3, #1
 8004792:	e7f0      	b.n	8004776 <_svfiprintf_r+0x192>
 8004794:	ab03      	add	r3, sp, #12
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	462a      	mov	r2, r5
 800479a:	4b0e      	ldr	r3, [pc, #56]	@ (80047d4 <_svfiprintf_r+0x1f0>)
 800479c:	a904      	add	r1, sp, #16
 800479e:	4638      	mov	r0, r7
 80047a0:	f3af 8000 	nop.w
 80047a4:	1c42      	adds	r2, r0, #1
 80047a6:	4606      	mov	r6, r0
 80047a8:	d1d6      	bne.n	8004758 <_svfiprintf_r+0x174>
 80047aa:	89ab      	ldrh	r3, [r5, #12]
 80047ac:	065b      	lsls	r3, r3, #25
 80047ae:	f53f af2d 	bmi.w	800460c <_svfiprintf_r+0x28>
 80047b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047b4:	e72c      	b.n	8004610 <_svfiprintf_r+0x2c>
 80047b6:	ab03      	add	r3, sp, #12
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	462a      	mov	r2, r5
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <_svfiprintf_r+0x1f0>)
 80047be:	a904      	add	r1, sp, #16
 80047c0:	4638      	mov	r0, r7
 80047c2:	f000 f879 	bl	80048b8 <_printf_i>
 80047c6:	e7ed      	b.n	80047a4 <_svfiprintf_r+0x1c0>
 80047c8:	08004c3c 	.word	0x08004c3c
 80047cc:	08004c46 	.word	0x08004c46
 80047d0:	00000000 	.word	0x00000000
 80047d4:	0800452d 	.word	0x0800452d
 80047d8:	08004c42 	.word	0x08004c42

080047dc <_printf_common>:
 80047dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e0:	4616      	mov	r6, r2
 80047e2:	4698      	mov	r8, r3
 80047e4:	688a      	ldr	r2, [r1, #8]
 80047e6:	690b      	ldr	r3, [r1, #16]
 80047e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047ec:	4293      	cmp	r3, r2
 80047ee:	bfb8      	it	lt
 80047f0:	4613      	movlt	r3, r2
 80047f2:	6033      	str	r3, [r6, #0]
 80047f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047f8:	4607      	mov	r7, r0
 80047fa:	460c      	mov	r4, r1
 80047fc:	b10a      	cbz	r2, 8004802 <_printf_common+0x26>
 80047fe:	3301      	adds	r3, #1
 8004800:	6033      	str	r3, [r6, #0]
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	0699      	lsls	r1, r3, #26
 8004806:	bf42      	ittt	mi
 8004808:	6833      	ldrmi	r3, [r6, #0]
 800480a:	3302      	addmi	r3, #2
 800480c:	6033      	strmi	r3, [r6, #0]
 800480e:	6825      	ldr	r5, [r4, #0]
 8004810:	f015 0506 	ands.w	r5, r5, #6
 8004814:	d106      	bne.n	8004824 <_printf_common+0x48>
 8004816:	f104 0a19 	add.w	sl, r4, #25
 800481a:	68e3      	ldr	r3, [r4, #12]
 800481c:	6832      	ldr	r2, [r6, #0]
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	42ab      	cmp	r3, r5
 8004822:	dc26      	bgt.n	8004872 <_printf_common+0x96>
 8004824:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004828:	6822      	ldr	r2, [r4, #0]
 800482a:	3b00      	subs	r3, #0
 800482c:	bf18      	it	ne
 800482e:	2301      	movne	r3, #1
 8004830:	0692      	lsls	r2, r2, #26
 8004832:	d42b      	bmi.n	800488c <_printf_common+0xb0>
 8004834:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004838:	4641      	mov	r1, r8
 800483a:	4638      	mov	r0, r7
 800483c:	47c8      	blx	r9
 800483e:	3001      	adds	r0, #1
 8004840:	d01e      	beq.n	8004880 <_printf_common+0xa4>
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	6922      	ldr	r2, [r4, #16]
 8004846:	f003 0306 	and.w	r3, r3, #6
 800484a:	2b04      	cmp	r3, #4
 800484c:	bf02      	ittt	eq
 800484e:	68e5      	ldreq	r5, [r4, #12]
 8004850:	6833      	ldreq	r3, [r6, #0]
 8004852:	1aed      	subeq	r5, r5, r3
 8004854:	68a3      	ldr	r3, [r4, #8]
 8004856:	bf0c      	ite	eq
 8004858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800485c:	2500      	movne	r5, #0
 800485e:	4293      	cmp	r3, r2
 8004860:	bfc4      	itt	gt
 8004862:	1a9b      	subgt	r3, r3, r2
 8004864:	18ed      	addgt	r5, r5, r3
 8004866:	2600      	movs	r6, #0
 8004868:	341a      	adds	r4, #26
 800486a:	42b5      	cmp	r5, r6
 800486c:	d11a      	bne.n	80048a4 <_printf_common+0xc8>
 800486e:	2000      	movs	r0, #0
 8004870:	e008      	b.n	8004884 <_printf_common+0xa8>
 8004872:	2301      	movs	r3, #1
 8004874:	4652      	mov	r2, sl
 8004876:	4641      	mov	r1, r8
 8004878:	4638      	mov	r0, r7
 800487a:	47c8      	blx	r9
 800487c:	3001      	adds	r0, #1
 800487e:	d103      	bne.n	8004888 <_printf_common+0xac>
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004888:	3501      	adds	r5, #1
 800488a:	e7c6      	b.n	800481a <_printf_common+0x3e>
 800488c:	18e1      	adds	r1, r4, r3
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	2030      	movs	r0, #48	@ 0x30
 8004892:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004896:	4422      	add	r2, r4
 8004898:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800489c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048a0:	3302      	adds	r3, #2
 80048a2:	e7c7      	b.n	8004834 <_printf_common+0x58>
 80048a4:	2301      	movs	r3, #1
 80048a6:	4622      	mov	r2, r4
 80048a8:	4641      	mov	r1, r8
 80048aa:	4638      	mov	r0, r7
 80048ac:	47c8      	blx	r9
 80048ae:	3001      	adds	r0, #1
 80048b0:	d0e6      	beq.n	8004880 <_printf_common+0xa4>
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7d9      	b.n	800486a <_printf_common+0x8e>
	...

080048b8 <_printf_i>:
 80048b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048bc:	7e0f      	ldrb	r7, [r1, #24]
 80048be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048c0:	2f78      	cmp	r7, #120	@ 0x78
 80048c2:	4691      	mov	r9, r2
 80048c4:	4680      	mov	r8, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	469a      	mov	sl, r3
 80048ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048ce:	d807      	bhi.n	80048e0 <_printf_i+0x28>
 80048d0:	2f62      	cmp	r7, #98	@ 0x62
 80048d2:	d80a      	bhi.n	80048ea <_printf_i+0x32>
 80048d4:	2f00      	cmp	r7, #0
 80048d6:	f000 80d2 	beq.w	8004a7e <_printf_i+0x1c6>
 80048da:	2f58      	cmp	r7, #88	@ 0x58
 80048dc:	f000 80b9 	beq.w	8004a52 <_printf_i+0x19a>
 80048e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048e8:	e03a      	b.n	8004960 <_printf_i+0xa8>
 80048ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048ee:	2b15      	cmp	r3, #21
 80048f0:	d8f6      	bhi.n	80048e0 <_printf_i+0x28>
 80048f2:	a101      	add	r1, pc, #4	@ (adr r1, 80048f8 <_printf_i+0x40>)
 80048f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048f8:	08004951 	.word	0x08004951
 80048fc:	08004965 	.word	0x08004965
 8004900:	080048e1 	.word	0x080048e1
 8004904:	080048e1 	.word	0x080048e1
 8004908:	080048e1 	.word	0x080048e1
 800490c:	080048e1 	.word	0x080048e1
 8004910:	08004965 	.word	0x08004965
 8004914:	080048e1 	.word	0x080048e1
 8004918:	080048e1 	.word	0x080048e1
 800491c:	080048e1 	.word	0x080048e1
 8004920:	080048e1 	.word	0x080048e1
 8004924:	08004a65 	.word	0x08004a65
 8004928:	0800498f 	.word	0x0800498f
 800492c:	08004a1f 	.word	0x08004a1f
 8004930:	080048e1 	.word	0x080048e1
 8004934:	080048e1 	.word	0x080048e1
 8004938:	08004a87 	.word	0x08004a87
 800493c:	080048e1 	.word	0x080048e1
 8004940:	0800498f 	.word	0x0800498f
 8004944:	080048e1 	.word	0x080048e1
 8004948:	080048e1 	.word	0x080048e1
 800494c:	08004a27 	.word	0x08004a27
 8004950:	6833      	ldr	r3, [r6, #0]
 8004952:	1d1a      	adds	r2, r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6032      	str	r2, [r6, #0]
 8004958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800495c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004960:	2301      	movs	r3, #1
 8004962:	e09d      	b.n	8004aa0 <_printf_i+0x1e8>
 8004964:	6833      	ldr	r3, [r6, #0]
 8004966:	6820      	ldr	r0, [r4, #0]
 8004968:	1d19      	adds	r1, r3, #4
 800496a:	6031      	str	r1, [r6, #0]
 800496c:	0606      	lsls	r6, r0, #24
 800496e:	d501      	bpl.n	8004974 <_printf_i+0xbc>
 8004970:	681d      	ldr	r5, [r3, #0]
 8004972:	e003      	b.n	800497c <_printf_i+0xc4>
 8004974:	0645      	lsls	r5, r0, #25
 8004976:	d5fb      	bpl.n	8004970 <_printf_i+0xb8>
 8004978:	f9b3 5000 	ldrsh.w	r5, [r3]
 800497c:	2d00      	cmp	r5, #0
 800497e:	da03      	bge.n	8004988 <_printf_i+0xd0>
 8004980:	232d      	movs	r3, #45	@ 0x2d
 8004982:	426d      	negs	r5, r5
 8004984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004988:	4859      	ldr	r0, [pc, #356]	@ (8004af0 <_printf_i+0x238>)
 800498a:	230a      	movs	r3, #10
 800498c:	e011      	b.n	80049b2 <_printf_i+0xfa>
 800498e:	6821      	ldr	r1, [r4, #0]
 8004990:	6833      	ldr	r3, [r6, #0]
 8004992:	0608      	lsls	r0, r1, #24
 8004994:	f853 5b04 	ldr.w	r5, [r3], #4
 8004998:	d402      	bmi.n	80049a0 <_printf_i+0xe8>
 800499a:	0649      	lsls	r1, r1, #25
 800499c:	bf48      	it	mi
 800499e:	b2ad      	uxthmi	r5, r5
 80049a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80049a2:	4853      	ldr	r0, [pc, #332]	@ (8004af0 <_printf_i+0x238>)
 80049a4:	6033      	str	r3, [r6, #0]
 80049a6:	bf14      	ite	ne
 80049a8:	230a      	movne	r3, #10
 80049aa:	2308      	moveq	r3, #8
 80049ac:	2100      	movs	r1, #0
 80049ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049b2:	6866      	ldr	r6, [r4, #4]
 80049b4:	60a6      	str	r6, [r4, #8]
 80049b6:	2e00      	cmp	r6, #0
 80049b8:	bfa2      	ittt	ge
 80049ba:	6821      	ldrge	r1, [r4, #0]
 80049bc:	f021 0104 	bicge.w	r1, r1, #4
 80049c0:	6021      	strge	r1, [r4, #0]
 80049c2:	b90d      	cbnz	r5, 80049c8 <_printf_i+0x110>
 80049c4:	2e00      	cmp	r6, #0
 80049c6:	d04b      	beq.n	8004a60 <_printf_i+0x1a8>
 80049c8:	4616      	mov	r6, r2
 80049ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80049ce:	fb03 5711 	mls	r7, r3, r1, r5
 80049d2:	5dc7      	ldrb	r7, [r0, r7]
 80049d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049d8:	462f      	mov	r7, r5
 80049da:	42bb      	cmp	r3, r7
 80049dc:	460d      	mov	r5, r1
 80049de:	d9f4      	bls.n	80049ca <_printf_i+0x112>
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d10b      	bne.n	80049fc <_printf_i+0x144>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	07df      	lsls	r7, r3, #31
 80049e8:	d508      	bpl.n	80049fc <_printf_i+0x144>
 80049ea:	6923      	ldr	r3, [r4, #16]
 80049ec:	6861      	ldr	r1, [r4, #4]
 80049ee:	4299      	cmp	r1, r3
 80049f0:	bfde      	ittt	le
 80049f2:	2330      	movle	r3, #48	@ 0x30
 80049f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049fc:	1b92      	subs	r2, r2, r6
 80049fe:	6122      	str	r2, [r4, #16]
 8004a00:	f8cd a000 	str.w	sl, [sp]
 8004a04:	464b      	mov	r3, r9
 8004a06:	aa03      	add	r2, sp, #12
 8004a08:	4621      	mov	r1, r4
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	f7ff fee6 	bl	80047dc <_printf_common>
 8004a10:	3001      	adds	r0, #1
 8004a12:	d14a      	bne.n	8004aaa <_printf_i+0x1f2>
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295
 8004a18:	b004      	add	sp, #16
 8004a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	f043 0320 	orr.w	r3, r3, #32
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	4833      	ldr	r0, [pc, #204]	@ (8004af4 <_printf_i+0x23c>)
 8004a28:	2778      	movs	r7, #120	@ 0x78
 8004a2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	6831      	ldr	r1, [r6, #0]
 8004a32:	061f      	lsls	r7, r3, #24
 8004a34:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a38:	d402      	bmi.n	8004a40 <_printf_i+0x188>
 8004a3a:	065f      	lsls	r7, r3, #25
 8004a3c:	bf48      	it	mi
 8004a3e:	b2ad      	uxthmi	r5, r5
 8004a40:	6031      	str	r1, [r6, #0]
 8004a42:	07d9      	lsls	r1, r3, #31
 8004a44:	bf44      	itt	mi
 8004a46:	f043 0320 	orrmi.w	r3, r3, #32
 8004a4a:	6023      	strmi	r3, [r4, #0]
 8004a4c:	b11d      	cbz	r5, 8004a56 <_printf_i+0x19e>
 8004a4e:	2310      	movs	r3, #16
 8004a50:	e7ac      	b.n	80049ac <_printf_i+0xf4>
 8004a52:	4827      	ldr	r0, [pc, #156]	@ (8004af0 <_printf_i+0x238>)
 8004a54:	e7e9      	b.n	8004a2a <_printf_i+0x172>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	f023 0320 	bic.w	r3, r3, #32
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	e7f6      	b.n	8004a4e <_printf_i+0x196>
 8004a60:	4616      	mov	r6, r2
 8004a62:	e7bd      	b.n	80049e0 <_printf_i+0x128>
 8004a64:	6833      	ldr	r3, [r6, #0]
 8004a66:	6825      	ldr	r5, [r4, #0]
 8004a68:	6961      	ldr	r1, [r4, #20]
 8004a6a:	1d18      	adds	r0, r3, #4
 8004a6c:	6030      	str	r0, [r6, #0]
 8004a6e:	062e      	lsls	r6, r5, #24
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	d501      	bpl.n	8004a78 <_printf_i+0x1c0>
 8004a74:	6019      	str	r1, [r3, #0]
 8004a76:	e002      	b.n	8004a7e <_printf_i+0x1c6>
 8004a78:	0668      	lsls	r0, r5, #25
 8004a7a:	d5fb      	bpl.n	8004a74 <_printf_i+0x1bc>
 8004a7c:	8019      	strh	r1, [r3, #0]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	6123      	str	r3, [r4, #16]
 8004a82:	4616      	mov	r6, r2
 8004a84:	e7bc      	b.n	8004a00 <_printf_i+0x148>
 8004a86:	6833      	ldr	r3, [r6, #0]
 8004a88:	1d1a      	adds	r2, r3, #4
 8004a8a:	6032      	str	r2, [r6, #0]
 8004a8c:	681e      	ldr	r6, [r3, #0]
 8004a8e:	6862      	ldr	r2, [r4, #4]
 8004a90:	2100      	movs	r1, #0
 8004a92:	4630      	mov	r0, r6
 8004a94:	f7fb fb9c 	bl	80001d0 <memchr>
 8004a98:	b108      	cbz	r0, 8004a9e <_printf_i+0x1e6>
 8004a9a:	1b80      	subs	r0, r0, r6
 8004a9c:	6060      	str	r0, [r4, #4]
 8004a9e:	6863      	ldr	r3, [r4, #4]
 8004aa0:	6123      	str	r3, [r4, #16]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004aa8:	e7aa      	b.n	8004a00 <_printf_i+0x148>
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	4632      	mov	r2, r6
 8004aae:	4649      	mov	r1, r9
 8004ab0:	4640      	mov	r0, r8
 8004ab2:	47d0      	blx	sl
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d0ad      	beq.n	8004a14 <_printf_i+0x15c>
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	079b      	lsls	r3, r3, #30
 8004abc:	d413      	bmi.n	8004ae6 <_printf_i+0x22e>
 8004abe:	68e0      	ldr	r0, [r4, #12]
 8004ac0:	9b03      	ldr	r3, [sp, #12]
 8004ac2:	4298      	cmp	r0, r3
 8004ac4:	bfb8      	it	lt
 8004ac6:	4618      	movlt	r0, r3
 8004ac8:	e7a6      	b.n	8004a18 <_printf_i+0x160>
 8004aca:	2301      	movs	r3, #1
 8004acc:	4632      	mov	r2, r6
 8004ace:	4649      	mov	r1, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	47d0      	blx	sl
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d09d      	beq.n	8004a14 <_printf_i+0x15c>
 8004ad8:	3501      	adds	r5, #1
 8004ada:	68e3      	ldr	r3, [r4, #12]
 8004adc:	9903      	ldr	r1, [sp, #12]
 8004ade:	1a5b      	subs	r3, r3, r1
 8004ae0:	42ab      	cmp	r3, r5
 8004ae2:	dcf2      	bgt.n	8004aca <_printf_i+0x212>
 8004ae4:	e7eb      	b.n	8004abe <_printf_i+0x206>
 8004ae6:	2500      	movs	r5, #0
 8004ae8:	f104 0619 	add.w	r6, r4, #25
 8004aec:	e7f5      	b.n	8004ada <_printf_i+0x222>
 8004aee:	bf00      	nop
 8004af0:	08004c4d 	.word	0x08004c4d
 8004af4:	08004c5e 	.word	0x08004c5e

08004af8 <memmove>:
 8004af8:	4288      	cmp	r0, r1
 8004afa:	b510      	push	{r4, lr}
 8004afc:	eb01 0402 	add.w	r4, r1, r2
 8004b00:	d902      	bls.n	8004b08 <memmove+0x10>
 8004b02:	4284      	cmp	r4, r0
 8004b04:	4623      	mov	r3, r4
 8004b06:	d807      	bhi.n	8004b18 <memmove+0x20>
 8004b08:	1e43      	subs	r3, r0, #1
 8004b0a:	42a1      	cmp	r1, r4
 8004b0c:	d008      	beq.n	8004b20 <memmove+0x28>
 8004b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b16:	e7f8      	b.n	8004b0a <memmove+0x12>
 8004b18:	4402      	add	r2, r0
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	428a      	cmp	r2, r1
 8004b1e:	d100      	bne.n	8004b22 <memmove+0x2a>
 8004b20:	bd10      	pop	{r4, pc}
 8004b22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b2a:	e7f7      	b.n	8004b1c <memmove+0x24>

08004b2c <_sbrk_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	4d06      	ldr	r5, [pc, #24]	@ (8004b48 <_sbrk_r+0x1c>)
 8004b30:	2300      	movs	r3, #0
 8004b32:	4604      	mov	r4, r0
 8004b34:	4608      	mov	r0, r1
 8004b36:	602b      	str	r3, [r5, #0]
 8004b38:	f7fb ff5c 	bl	80009f4 <_sbrk>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d102      	bne.n	8004b46 <_sbrk_r+0x1a>
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	b103      	cbz	r3, 8004b46 <_sbrk_r+0x1a>
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	2000032c 	.word	0x2000032c

08004b4c <memcpy>:
 8004b4c:	440a      	add	r2, r1
 8004b4e:	4291      	cmp	r1, r2
 8004b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b54:	d100      	bne.n	8004b58 <memcpy+0xc>
 8004b56:	4770      	bx	lr
 8004b58:	b510      	push	{r4, lr}
 8004b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b62:	4291      	cmp	r1, r2
 8004b64:	d1f9      	bne.n	8004b5a <memcpy+0xe>
 8004b66:	bd10      	pop	{r4, pc}

08004b68 <_realloc_r>:
 8004b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6c:	4680      	mov	r8, r0
 8004b6e:	4615      	mov	r5, r2
 8004b70:	460c      	mov	r4, r1
 8004b72:	b921      	cbnz	r1, 8004b7e <_realloc_r+0x16>
 8004b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b78:	4611      	mov	r1, r2
 8004b7a:	f7ff bc4b 	b.w	8004414 <_malloc_r>
 8004b7e:	b92a      	cbnz	r2, 8004b8c <_realloc_r+0x24>
 8004b80:	f7ff fbdc 	bl	800433c <_free_r>
 8004b84:	2400      	movs	r4, #0
 8004b86:	4620      	mov	r0, r4
 8004b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b8c:	f000 f81a 	bl	8004bc4 <_malloc_usable_size_r>
 8004b90:	4285      	cmp	r5, r0
 8004b92:	4606      	mov	r6, r0
 8004b94:	d802      	bhi.n	8004b9c <_realloc_r+0x34>
 8004b96:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004b9a:	d8f4      	bhi.n	8004b86 <_realloc_r+0x1e>
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	4640      	mov	r0, r8
 8004ba0:	f7ff fc38 	bl	8004414 <_malloc_r>
 8004ba4:	4607      	mov	r7, r0
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d0ec      	beq.n	8004b84 <_realloc_r+0x1c>
 8004baa:	42b5      	cmp	r5, r6
 8004bac:	462a      	mov	r2, r5
 8004bae:	4621      	mov	r1, r4
 8004bb0:	bf28      	it	cs
 8004bb2:	4632      	movcs	r2, r6
 8004bb4:	f7ff ffca 	bl	8004b4c <memcpy>
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4640      	mov	r0, r8
 8004bbc:	f7ff fbbe 	bl	800433c <_free_r>
 8004bc0:	463c      	mov	r4, r7
 8004bc2:	e7e0      	b.n	8004b86 <_realloc_r+0x1e>

08004bc4 <_malloc_usable_size_r>:
 8004bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bc8:	1f18      	subs	r0, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bfbc      	itt	lt
 8004bce:	580b      	ldrlt	r3, [r1, r0]
 8004bd0:	18c0      	addlt	r0, r0, r3
 8004bd2:	4770      	bx	lr

08004bd4 <_init>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	bf00      	nop
 8004bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bda:	bc08      	pop	{r3}
 8004bdc:	469e      	mov	lr, r3
 8004bde:	4770      	bx	lr

08004be0 <_fini>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	bf00      	nop
 8004be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be6:	bc08      	pop	{r3}
 8004be8:	469e      	mov	lr, r3
 8004bea:	4770      	bx	lr
